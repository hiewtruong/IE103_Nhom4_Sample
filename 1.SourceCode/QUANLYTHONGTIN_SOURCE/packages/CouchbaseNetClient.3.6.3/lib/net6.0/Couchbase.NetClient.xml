<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Couchbase.NetClient</name>
    </assembly>
    <members>
        <member name="M:Couchbase.Analytics.AnalyticsClient.QueryAsync``1(System.String,Couchbase.Analytics.AnalyticsOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsClient.CreateExceptionForError``1(Couchbase.Analytics.AnalyticsResultBase{``0},Couchbase.Core.Exceptions.Analytics.AnalyticsErrorContext,System.Boolean)">
            <summary>
            Create the appropriate Exception for an error context
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="result">Result</param>
            <param name="context">Error context</param>
            <param name="couchbaseExceptionFallback">Flag on whether a fallback CouchbaseException should be created</param>
            <returns>Nullable Exception</returns>
        </member>
        <member name="T:Couchbase.Analytics.AnalyticsExtensions">
            <summary>
            Analytics related extensions for <see cref="T:Couchbase.ICluster"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsExtensions.IngestAsync``1(Couchbase.ICluster,System.String,Couchbase.KeyValue.ICouchbaseCollection,System.Action{Couchbase.Analytics.IngestOptions})">
            <summary>
            Executes a query and ingests the results as documents into Couchbase server for further analytics.
            <para>
            NOTE: This is an experimental API and may change in the future.
            </para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cluster"></param>
            <param name="collection"></param>
            <param name="statement"></param>
            <param name="configureOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsExtensions.IngestAsync``1(Couchbase.ICluster,System.String,Couchbase.KeyValue.ICouchbaseCollection,Couchbase.Analytics.IngestOptions)">
            <summary>
            Executes a query and ingests the results as documents into Couchbase server for further analytics.
            <para>
            NOTE: This is an experimental API and may change in the future.
            </para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cluster"></param>
            <param name="collection"></param>
            <param name="statement"></param>
            <param name="ingestOptions"></param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsMetaData.ClientContextId">
            <summary>
            Gets the clientContextID of the request, if one was supplied. Used for debugging.
            </summary>
            <value>
            The client context identifier.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsMetaData.Metrics">
            <summary>
            Gets an object containing metrics about the request.
            </summary>
            <value>
            The metrics.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsMetaData.RequestId">
            <summary>
            Gets A unique identifier for the response.
            </summary>
            <value>
            The unique identifier for the response.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsMetaData.Signature">
            <summary>
            Gets the schema of the results. Present only when the query completes successfully.
            </summary>
            <value>
            The signature of the schema of the request.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsMetaData.Status">
            <summary>
            Gets the status of the request; possible values are: success, running, errors, completed, stopped, timeout, fatal.
            </summary>
            <value>
            The status of the request.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsMetaData.Warnings">
            <summary>
            Gets a list of 0 or more warning objects; if a warning occurred during processing of the request, it will be represented by a warning object in this list.
            </summary>
            <value>
            The warnings.
            </value>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            A parent or external span for tracing.
            </summary>
            <param name="span">An external <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/> implementation for tracing.</param>
            <returns>A <see cref="T:Couchbase.Analytics.AnalyticsOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Overrides the global <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/> defined in <see cref="T:Couchbase.ClusterOptions"/> for a request.
            </summary>
            <param name="retryStrategy">The <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/> to use for a single request.</param>
            <returns>A <see cref="T:Couchbase.Analytics.AnalyticsOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsOptions.ScanConsistency(Couchbase.Analytics.AnalyticsScanConsistency)">
            <summary>
            The <see cref="T:Couchbase.Analytics.AnalyticsScanConsistency" /> you require for your analytics query.
            </summary>
            <param name="scanConsistency">The <see cref="T:Couchbase.Analytics.AnalyticsScanConsistency" /> for documents to be included in the analytics results.</param>
            <returns>A <see cref="T:Couchbase.Analytics.AnalyticsOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsOptions.Readonly(System.Boolean)">
            <summary>
            Allows to specify if the query is readonly.
            </summary>
            <param name="readOnly"></param>
            <returns>A <see cref="T:Couchbase.Analytics.AnalyticsOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsOptions.Raw(System.String,System.Object)">
            <summary>
            Specifies values with their key and value as presented as part of the JSON payload.
            </summary>
            <param name="key">The key of the raw parameter.</param>
            <param name="value">The value of the raw parameter.</param>
            <returns>A <see cref="T:Couchbase.Analytics.AnalyticsOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsOptions.Parameter(System.String,System.Object)">
            <summary>
            Specifies named parameters.
            </summary>
            <param name="parameterName">The named parameter value.</param>
            <param name="value">The named parameter key or name.</param>
            <returns>A <see cref="T:Couchbase.Analytics.AnalyticsOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsOptions.Parameter(System.Object)">
            <summary>
            Specifies positional parameters.
            </summary>
            <param name="value">The value of the positional parameter.</param>
            <returns>A <see cref="T:Couchbase.Analytics.AnalyticsOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsOptions.Timeout(System.TimeSpan)">
            <summary>
            Specifies how long to allow the operation to continue running before it is cancelled.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/></param> value.
            <returns>A <see cref="T:Couchbase.Analytics.AnalyticsOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsOptions.Priority(System.Boolean)">
            <summary>
            Allows to give certain requests higher priority than others.
            </summary>
            <param name="priority">Set to true to prioritize the query.</param>
            <returns>A <see cref="T:Couchbase.Analytics.AnalyticsOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A token for controlling cooperative cancellation of the query.
            </summary>
            <param name="cancellationToken">A <see cref="M:Couchbase.Analytics.AnalyticsOptions.CancellationToken(System.Threading.CancellationToken)"/> for controlling query cancellation</param>
            <returns>A <see cref="T:Couchbase.Analytics.AnalyticsOptions"/> object for chaining options.</returns>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsOptions.QueryContext">
             <summary>
            The alias for the namespace:bucket:scope:collection
             </summary>
             <returns></returns>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsOptions.BucketName">
            <summary>
            The name of the bucket if this is a scope level query.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsOptions.ScopeName">
            <summary>
            The name of the scope if this is a scope level query.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsResultBase`1.#ctor(System.IO.Stream,System.IDisposable)">
            <summary>
            Creates a new AnalyticsResultBase.
            </summary>
            <param name="responseStream"><see cref="T:System.IO.Stream"/> to read.</param>
            <param name="ownedForCleanup">Additional object to dispose when complete.</param>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResultBase`1.Rows">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResultBase`1.ResponseStream">
            <summary>
            Response stream being deserialized.
            </summary>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResultBase`1.MetaData">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsResultBase`1.ShouldRetry">
            <summary>
            If the response indicates the request is retryable, returns true.
            </summary>
            <returns></returns>
            <remarks>
            Intended for internal use only.
            </remarks>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsResultBase`1.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the reader, and reads all attributes until result rows are encountered.
            This must be called before properties are valid.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsResultBase`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsResultBase`1.Dispose">
            <inheritdoc />
        </member>
        <member name="F:Couchbase.Analytics.AnalyticsScanConsistency.NotBounded">
            <summary>
            The default which means that the query can return data that is currently indexed
            and accessible by the index or the view. The query output can be arbitrarily
            out-of-date if there are many pending mutations that have not been indexed by
            the index or the view. This consistency level is useful for queries that favor
            low latency and do not need precise and most up-to-date information.
            </summary>
        </member>
        <member name="F:Couchbase.Analytics.AnalyticsScanConsistency.RequestPlus">
            <summary>
            This level provides the strictest consistency level and thus executes with higher
            latencies than the other levels. This consistency level requires all mutations, up
            to the moment of the query request, to be processed before the query execution can start.
            </summary>
        </member>
        <member name="T:Couchbase.Analytics.AnalyticsStatus">
            <summary>
            Represents the return status of an Analytics query.
            </summary>
        </member>
        <member name="T:Couchbase.Analytics.BlockAnalyticsResult`1">
            <summary>
            The result of a N1QL query, read without streaming results.
            </summary>
            <typeparam name="T">The Type of each row returned.</typeparam>
            <seealso cref="T:Couchbase.Analytics.IAnalyticsResult`1" />
        </member>
        <member name="M:Couchbase.Analytics.BlockAnalyticsResult`1.#ctor(System.IO.Stream,Couchbase.Core.IO.Serializers.ITypeSerializer,System.IDisposable)">
            <summary>
            Creates a new BlockAnalyticsResult.
            </summary>
            <param name="responseStream"><see cref="T:System.IO.Stream"/> to read.</param>
            <param name="deserializer"><see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> used to deserialize objects.</param>
            <param name="ownedForCleanup">Additional object to dispose when complete.</param>
        </member>
        <member name="M:Couchbase.Analytics.BlockAnalyticsResult`1.InitializeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Analytics.BlockAnalyticsResult`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsClient.LastActivity">
            <summary>
            Gets the timestamp of the last activity.
            </summary>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsClient.QueryAsync``1(System.String,Couchbase.Analytics.AnalyticsOptions)">
            <summary>
            Asynchronously executes an analytics request against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="statement">The analytics statement to execute.</param>
            <param name="options">The analytics options - various methods have implementations.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsRequest.NamedParameters">
            <summary>
            Parameters identified by name.
            </summary>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsRequest.PositionalArguments">
            <summary>
            Parameters identified by position.
            </summary>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsRequest.OriginalStatement">
            <summary>
            Gets the original analytics statement.
            </summary>
            <returns>The original statement as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.GetFormValues">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IDictionary`2"/> of the name/value pairs to be POSTed to the analytics service.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IDictionary`2"/> of the name/value pairs to be POSTed to the analytics service.</returns>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.GetFormValuesAsJson">
            <summary>
            Gets the JSON representation of this analytics request's parameters.
            </summary>
            <returns>The form values as a JSON object.</returns>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.WithStatement(System.String)">
            <summary>
            Sets a analytics statement to be executed.
            </summary>
            <param name="statement">Any valid SQL++ statement for.</param>
            <returns>A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.WithClientContextId(System.String)">
            <summary>
            A user supplied piece of data supplied with the request to the sevice. Any result will also contain the same data.
            </summary>
            <param name="contextId"></param>
            <returns>A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> for method chaining.</returns>
            <remarks>Optional.</remarks>
            <remarks>Maximum allowed size is 64 characters. A clientContextID longer than 64 characters is cut off at 64 characters.</remarks>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.AddNamedParameter(System.String,System.Object)">
            <summary>
            Adds a named parameter to be used with the statement.
            </summary>
            <param name="key">The paramemeter name.</param>
            <param name="value">The parameter value.</param>
            <returns>A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.AddPositionalParameter(System.Object)">
            <summary>
            Adds a positional parameter to be used with the statement.
            </summary>
            <param name="value">The parameter value.</param>
            <returns>A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.WithTimeout(System.TimeSpan)">
            <summary>
            Sets the query timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.Priority(System.Boolean)">
            <summary>
            Sets the query priority. Default is <c>false</c>.
            </summary>
            <param name="priority"><c>true</c> is the query is to be prioritized.</param>
            <returns>A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.Priority(System.Int32)">
            <summary>
            Sets the query priority. Default is <c>0</c>.
            </summary>
            <param name="priority">The priority.</param>
            <returns>A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> for method chaining.</returns>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsRequest.BucketName">
            <summary>
            The name of the bucket if this is a scope level query.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsRequest.ScopeName">
            <summary>
            The name of the scope if this is a scope level query.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="T:Couchbase.Analytics.IAnalyticsResult`1">
            <summary>
            Results of an analytics query.
            </summary>
            <typeparam name="T">Type of each row in the result.</typeparam>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsResult`1.Rows">
            <summary>
            The results of the query as a <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <remarks>
            In most cases, the rows may be enumerated only once. If it's necessary to enumerate more than
            once, use <see cref="M:System.Linq.AsyncEnumerable.ToListAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)"/> to convert to a list.
            ToListAsync can also be used to enumerate with a synchronous foreach loop in C# 7.
            </remarks>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsResult`1.MetaData">
            <summary>
            Gets the meta data associated with the analytics result.
            </summary>
        </member>
        <member name="F:Couchbase.Analytics.IngestMethod.Insert">
            <summary>
            Insert the document, failing if it exists
            </summary>
        </member>
        <member name="F:Couchbase.Analytics.IngestMethod.Upsert">
            <summary>
            Inserts the document, updating it if it exists
            </summary>
        </member>
        <member name="F:Couchbase.Analytics.IngestMethod.Replace">
            <summary>
            Replaces and existing document, failing if does not exist
            </summary>
        </member>
        <member name="M:Couchbase.Analytics.IngestOptions.IdGenerator(System.Func{System.Object,System.String})">
            <summary>
            Overrides the default Guid based key generator.
            </summary>
            <param name="idGenerator">A Func{string} that generates a valid Couchbase server key.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Analytics.IngestOptions.Timeout(System.TimeSpan)">
            <summary>
            The maximum time for the query to run. Overrides the default timeout of 75s.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Analytics.IngestOptions.Expiry(System.TimeSpan)">
            <summary>
            The lifetime of the documents ingested by Couchbase. Overrides the default of zero (0) or infinite lifespan.
            </summary>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Analytics.IngestOptions.IngestMethod(Couchbase.Analytics.IngestMethod)">
            <summary>
            The ingest method to use when ingesting into Couchbase. Insert, Replace and Upsert are supported.
            </summary>
            <param name="ingestMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Analytics.IngestOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            An optional cancellation token to use for the query.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Analytics.StreamingAnalyticsResult`1.#ctor(System.IO.Stream,Couchbase.Core.IO.Serializers.IStreamingTypeDeserializer,System.IDisposable)">
            <summary>
            Creates a new StreamingQueryResult.
            </summary>
            <param name="responseStream"><see cref="T:System.IO.Stream"/> to read.</param>
            <param name="deserializer"><see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> used to deserialize objects.</param>
            <param name="ownedForCleanup">Additional object to dispose when complete.</param>
        </member>
        <member name="M:Couchbase.Analytics.StreamingAnalyticsResult`1.InitializeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Analytics.StreamingAnalyticsResult`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Analytics.StreamingAnalyticsResult`1.ReadResponseAttributes(System.Threading.CancellationToken)">
            <summary>
            Reads and parses any response attributes, returning at the end of the response or
            once the "results" attribute is encountered.
            </summary>
        </member>
        <member name="M:Couchbase.Analytics.StreamingAnalyticsResult`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Couchbase.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Couchbase.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Couchbase.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Couchbase.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Couchbase.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Couchbase.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data)
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Couchbase.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Couchbase.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Couchbase.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Couchbase.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:Couchbase.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Couchbase.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Couchbase.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Couchbase.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Couchbase.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Couchbase.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:Couchbase.MeansImplicitUseAttribute"/>
            or <see cref="T:Couchbase.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Couchbase.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Couchbase.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Couchbase.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:Couchbase.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:Couchbase.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Couchbase.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:Couchbase.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Couchbase.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Couchbase.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Couchbase.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Couchbase.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="M:Couchbase.BucketExtensions.ViewQueryAsync``2(Couchbase.IBucket,System.String,System.String)">
            <summary>
            Execute a view query.
            </summary>
            <typeparam name="TKey">Type of the key for each result row.</typeparam>
            <typeparam name="TValue">Type of the value for each result row.</typeparam>
            <param name="bucket"><seealso cref="T:Couchbase.IBucket"/> to execute the query against.</param>
            <param name="designDocument">Design document name.</param>
            <param name="viewName">View name.</param>
            <returns>An <seealso cref="T:Couchbase.Views.IViewResult`2"/>.</returns>
        </member>
        <member name="M:Couchbase.BucketExtensions.ViewQueryAsync``2(Couchbase.IBucket,System.String,System.String,System.Action{Couchbase.Views.ViewOptions})">
            <summary>
            Execute a view query.
            </summary>
            <typeparam name="TKey">Type of the key for each result row.</typeparam>
            <typeparam name="TValue">Type of the value for each result row.</typeparam>
            <param name="bucket"><seealso cref="T:Couchbase.IBucket"/> to execute the query against.</param>
            <param name="designDocument">Design document name.</param>
            <param name="viewName">View name.</param>
            <param name="configureOptions">Action to configure the <seealso cref="T:Couchbase.Views.ViewOptions"/> controlling query execution.</param>
            <returns>An <seealso cref="T:Couchbase.Views.IViewResult`2"/>.</returns>
        </member>
        <member name="T:Couchbase.BucketMissingException">
            <summary>
            A generic error raised when the Bucket for a resource cannot be located.
            </summary>
        </member>
        <member name="P:Couchbase.Cluster.ClusterServices">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Cluster.DiagnosticsAsync(Couchbase.Diagnostics.DiagnosticsOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Cluster.WaitUntilReadyAsync(System.TimeSpan,Couchbase.Diagnostics.WaitUntilReadyOptions)">
            <summary>
            Waits until bootstrapping has completed and all services have been initialized.
            </summary>
            <param name="timeout">The amount of time to wait for the desired <see cref="T:Couchbase.Diagnostics.ClusterState"/>.</param>
            <param name="options">The optional arguments.</param>
        </member>
        <member name="P:Couchbase.Cluster.QueryIndexes">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Cluster.AnalyticsIndexes">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Cluster.SearchIndexes">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Cluster.Buckets">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Cluster.Users">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Cluster.EventingFunctions">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Cluster.EnsureBootstrapped">
            <summary>
            Seam for unit tests and for supporting non-GC3P servers (prior to v6.5).
            </summary>
        </member>
        <member name="M:Couchbase.Cluster.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Cluster.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.ClusterExtensions.QueryInterpolatedAsync``1(Couchbase.ICluster,Couchbase.Query.QueryInterpolatedStringHandler@)">
            <summary>
            Executes an interpolated query.
            </summary>
            <typeparam name="T">Type of row returned by the query.</typeparam>
            <param name="cluster">Cluster against which to execute the query.</param>
            <param name="handler">The interpolated string.</param>
            <returns>The query result.</returns>
            <remarks>
            <para>
            Treats expressions in the interpolated string as positional parameters. This makes prepared queries with dynamic
            parameters very easy to build. Note that format strings and alignment are ignored. Also, you may only use expressions
            in locations in the query where parameters are acceptable.
            </para>
            <para>
            This overload executes the query with AdHoc <c>false</c>, resulting in prepared queries.
            </para>
            </remarks>
        </member>
        <member name="M:Couchbase.ClusterExtensions.QueryInterpolatedAsync``1(Couchbase.ICluster,System.Action{Couchbase.Query.QueryOptions},Couchbase.Query.QueryInterpolatedStringHandler@)">
            <summary>
            Executes an interpolated query.
            </summary>
            <typeparam name="T">Type of row returned by the query.</typeparam>
            <param name="cluster">Cluster against which to execute the query.</param>
            <param name="configureOptions">Action to configure the <see cref="T:Couchbase.Query.QueryOptions"/>.</param>
            <param name="handler">The interpolated string.</param>
            <returns>The query result.</returns>
            <remarks>
            <para>
            Treats expressions in the interpolated string as positional parameters. This makes prepared queries with dynamic
            parameters very easy to build. Note that format strings and alignment are ignored. Also, you may only use expressions
            in locations in the query where parameters are acceptable.
            </para>
            <para>
            This overload defaults AdHoc to <c>false</c>, resulting in prepared queries. This may be overridden in
            <paramref name="configureOptions"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Couchbase.ClusterExtensions.QueryInterpolatedAsync``1(Couchbase.ICluster,Couchbase.Query.QueryOptions,Couchbase.Query.QueryInterpolatedStringHandler@)">
            <summary>
            Executes an interpolated query.
            </summary>
            <typeparam name="T">Type of row returned by the query.</typeparam>
            <param name="cluster">Cluster against which to execute the query.</param>
            <param name="options">Options to control query execution. Should not include any positional parameters.</param>
            <param name="handler">The interpolated string.</param>
            <returns>The query result.</returns>
            <remarks>
            <para>
            Treats expressions in the interpolated string as positional parameters. This makes prepared queries with dynamic
            parameters very easy to build. Note that format strings and alignment are ignored. Also, you may only use expressions
            in locations in the query where parameters are acceptable.
            </para>
            <para>
            This overload does not default AdHoc to <c>false</c> like the other overloads. If you desire prepared queries,
            be sure to set AdHoc to <c>false</c> in <paramref name="options"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Couchbase.ClusterOptions">
            <summary>
            Options controlling the connection to the Couchbase cluster.
            </summary>
        </member>
        <member name="P:Couchbase.ClusterOptions.ConnectionString">
            <summary>
            The connection string for the cluster.
            </summary>
        </member>
        <member name="M:Couchbase.ClusterOptions.ApplyProfile(System.String)">
            <summary>
            Applies pre-set configuration values based on a named configuration profile.  Values defined in the named profile are applied and overwrite existing values.
            Values <em>not</em> defined in the profile do not overwrite existing values.
            </summary>
            <param name="profileName">The name of the profile to apply. (e.g. "default" or "wan-development")</param>
            <returns>
            A reference to this <see cref="T:Couchbase.ClusterOptions"/> object for method chaining.
            </returns>
        </member>
        <member name="M:Couchbase.ClusterOptions.ApplyProfile(Couchbase.ConfigProfiles.ConfigProfile)">
            <summary>
            Applies pre-set configuration values based on a named configuration profile.  Values defined in the named profile are applied and overwrite existing values.
            Values <em>not</em> defined in the profile do not overwrite existing values.
            </summary>
            <param name="profile">The profile to apply.</param>
            <returns>
            A reference to this <see cref="T:Couchbase.ClusterOptions"/> object for method chaining.
            </returns>        [InterfaceStability(Level.Volatile)]
        </member>
        <member name="M:Couchbase.ClusterOptions.WithConnectionString(System.String)">
            <summary>
            Set the connection string for the cluster.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>
            A reference to this <see cref="T:Couchbase.ClusterOptions"/> object for method chaining.
            </returns>
        </member>
        <member name="P:Couchbase.ClusterOptions.Buckets">
            <summary>
            The buckets to be used in the cluster.
            </summary>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithBuckets(System.String[])">
            <summary>
            Set the buckets to be used in the cluster.
            </summary>
            <param name="bucketNames">The names of the buckets.</param>
            <returns>
            A reference to this <see cref="T:Couchbase.ClusterOptions"/> object for method chaining.
            </returns>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithCredentials(System.String,System.String)">
            <summary>
            Set credentials used for authentication.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>
            A reference to this <see cref="T:Couchbase.ClusterOptions"/> object for method chaining.
            </returns>
        </member>
        <member name="P:Couchbase.ClusterOptions.Logging">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging.
            </summary>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithLogging(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Set the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging.
            </summary>
            <param name="loggerFactory">The logger factory.</param>
            <returns>
            A reference to this <see cref="T:Couchbase.ClusterOptions"/> object for method chaining.
            </returns>
        </member>
        <member name="P:Couchbase.ClusterOptions.Serializer">
            <summary>
            Provide a custom <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/>.
            </summary>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithSerializer(Couchbase.Core.IO.Serializers.ITypeSerializer)">
            <summary>
            Provide a custom <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/>.
            </summary>
            <param name="serializer">Serializer to use.</param>
            <returns>
            A reference to this <see cref="T:Couchbase.ClusterOptions"/> object for method chaining.
            </returns>
        </member>
        <member name="P:Couchbase.ClusterOptions.Transcoder">
            <summary>
            Provide a custom <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/>.
            </summary>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithTranscoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Provide a custom <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/>.
            </summary>
            <param name="transcoder">Transcoder to use.</param>
            <returns>
            A reference to this <see cref="T:Couchbase.ClusterOptions"/> object for method chaining.
            </returns>
        </member>
        <member name="P:Couchbase.ClusterOptions.DnsResolver">
            <summary>
            Provide a custom <see cref="T:Couchbase.IDnsResolver"/> for DNS SRV resolution.
            </summary>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithDnsResolver(Couchbase.IDnsResolver)">
            <summary>
            Provide a custom <see cref="T:Couchbase.IDnsResolver"/> for DNS SRV resolution.
            </summary>
            <param name="dnsResolver">DNS resolver to use.</param>
            <returns>
            A reference to this <see cref="T:Couchbase.ClusterOptions"/> object for method chaining.
            </returns>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithCompressionAlgorithm(Couchbase.Core.IO.Compression.ICompressionAlgorithm)">
            <summary>
            Provide a custom <see cref="T:Couchbase.Core.IO.Compression.ICompressionAlgorithm"/> for key/value body compression.
            </summary>
            <param name="compressionAlgorithm">Compression algorithm to use.</param>
            <returns>
            A reference to this <see cref="T:Couchbase.ClusterOptions"/> object for method chaining.
            </returns>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithCompressionAlgorithm``1">
            <summary>
            Provide a custom <see cref="T:Couchbase.Core.IO.Compression.ICompressionAlgorithm"/> for key/value body compression.
            </summary>
            <typeparam name="TImplementation">Compression algorithm to use.</typeparam>
            <returns>
            A reference to this <see cref="T:Couchbase.ClusterOptions"/> object for method chaining.
            </returns>
        </member>
        <member name="P:Couchbase.ClusterOptions.TracingOptions">
            <summary>
            Enables request tracing within the SDK.
            <remarks>The default is enabled and the <see cref="T:Couchbase.Core.Diagnostics.Tracing.RequestTracer"/> is configured.</remarks>
            </summary>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithTracing(Couchbase.Core.Diagnostics.Tracing.TracingOptions)">
            <summary>
            Enables request tracing within the SDK.
            <remarks>The default is enabled and the <see cref="T:Couchbase.Core.Diagnostics.Tracing.RequestTracer"/> is configured.</remarks>
            </summary>
            <param name="options">A <see cref="P:Couchbase.ClusterOptions.TracingOptions"/> object for configuration.</param>
            <returns>A <see cref="T:Couchbase.ClusterOptions"/> object for chaining.</returns>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithTracing(System.Action{Couchbase.Core.Diagnostics.Tracing.TracingOptions})">
            <summary>
            Enables request tracing within the SDK.
            <remarks>The default is enabled and the <see cref="T:Couchbase.Core.Diagnostics.Tracing.RequestTracer"/> is configured.</remarks>
            </summary>
            <param name="configure">A <see cref="P:Couchbase.ClusterOptions.TracingOptions"/> lambda for configuration.</param>
            <returns>A <see cref="T:Couchbase.ClusterOptions"/> object for chaining.</returns>
        </member>
        <member name="P:Couchbase.ClusterOptions.ThresholdOptions">
            <summary>
            Configures threshold logging for the SDK.
            </summary>
            <remarks>The default is enabled and <see cref="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTraceListener"/> class is used.</remarks>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithThresholdTracing(Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions)">
            <summary>
            Configures threshold logging for the SDK.
            </summary>
            <remarks>The default is enabled and <see cref="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTraceListener"/> class is used.</remarks>
            <param name="options">The <see cref="P:Couchbase.ClusterOptions.ThresholdOptions"/> for configuration.</param>
            <returns>A <see cref="T:Couchbase.ClusterOptions"/> object for chaining.</returns>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithThresholdTracing(System.Action{Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions})">
            <summary>
            Configures request tracing for the SDK.
            </summary>
            <remarks>The default is enabled and <see cref="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTraceListener"/> class is used.</remarks>
            <param name="configure">The <see cref="T:System.Action`1"/> lambda to be configured.</param>
            <returns>A <see cref="T:Couchbase.ClusterOptions"/> object for chaining.</returns>
        </member>
        <member name="P:Couchbase.ClusterOptions.OrphanTracingOptions">
            <summary>
            Configures orphan logging for the SDK. Requires that <see cref="P:Couchbase.ClusterOptions.TracingOptions"></see> is enabled (the default).
            </summary>
            <remarks>The default is enabled and <see cref="T:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanTraceListener"/> class is used.</remarks>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithOrphanTracing(Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions)">
            <summary>
            Configures orphan logging for the SDK. Requires that <see cref="P:Couchbase.ClusterOptions.TracingOptions"></see> is enabled (the default).
            </summary>
            <remarks>The default is enabled and <see cref="T:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanTraceListener"/> class is used.</remarks>
            <param name="options">The <see cref="T:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions"/> object for configuration.</param>
            <returns>A <see cref="T:Couchbase.ClusterOptions"/> object for chaining.</returns>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithOrphanTracing(System.Action{Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions})">
            <summary>
            Configures orphan logging for the SDK. Requires that <see cref="P:Couchbase.ClusterOptions.TracingOptions"></see> is enabled (the default).
            </summary>
            <remarks>The default is enabled and <see cref="T:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanTraceListener"/> class is used.</remarks>
            <param name="configure">The <see cref="T:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions"/> lambda for configuration.</param>
            <returns>A <see cref="T:Couchbase.ClusterOptions"/> object for chaining.</returns>
        </member>
        <member name="P:Couchbase.ClusterOptions.LoggingMeterOptions">
            <summary>
            Configures logging for measuring latencies of the various Couchbase Services.
            </summary>
            <remarks>The default is enabled using the <see cref="T:Couchbase.Core.Diagnostics.Metrics.LoggingMeter"/> class.</remarks>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithLoggingMeterOptions(Couchbase.Core.Diagnostics.Metrics.LoggingMeterOptions)">
            <summary>
            Configures logging for measuring latencies of the various Couchbase Services.
            </summary>
            <remarks>The default is enabled using the <see cref="T:Couchbase.Core.Diagnostics.Metrics.LoggingMeter"/> class.</remarks>
            <param name="options">An <see cref="P:Couchbase.ClusterOptions.LoggingMeterOptions"/> object for configuration.</param>
            <returns>A <see cref="T:Couchbase.ClusterOptions"/> object for chaining.</returns>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithLoggingMeterOptions(System.Action{Couchbase.Core.Diagnostics.Metrics.LoggingMeterOptions})">
            <summary>
            Configures logging for measuring latencies of the various Couchbase Services.
            </summary>
            <remarks>The default is enabled using the <see cref="T:Couchbase.Core.Diagnostics.Metrics.LoggingMeter"/> class.</remarks>
            <param name="configure">An <see cref="P:Couchbase.ClusterOptions.LoggingMeterOptions"/> lambda for configuration.</param>
            <returns>A <see cref="T:Couchbase.ClusterOptions"/> object for chaining.</returns>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithRetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            The <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/> for operation retries. Applies to all services: K/V, Query, etc.
            </summary>
            <param name="retryStrategy">The custom <see cref="P:Couchbase.ClusterOptions.RetryStrategy"/>.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.ClusterOptions.RetryStrategy">
            <summary>
            The <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/> for operation retries. Applies to all services: K/V, Query, etc.
            </summary>
        </member>
        <member name="P:Couchbase.ClusterOptions.ConfigUpdatingTimeout">
            <summary>
            The time to wait for a bucket re-configuration to take place after receiving a new cluster map config.
            </summary>
            <remarks>The default is 15s.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.KvConnectTimeout">
            <summary>
            The time to wait while attempting to connect to a node’s KV service via a socket. Initial connection, reconnecting, node added, etc.
            </summary>
            <remarks> The default is 10s.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.KvTimeout">
            <summary>
            The time to wait before timing out a KV operation by the client.
            </summary>
            <remarks>The default is 2.5s.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.KvScanTimeout">
            <summary>
            The time to wait before timing out a KV Range Scan.
            </summary>
        </member>
        <member name="P:Couchbase.ClusterOptions.KvDurabilityTimeout">
            <summary>
            The time to wait before timing out a KV operation that is either using synchronous durability or observe-based durability.
            </summary>
            <remarks>The default is 10s.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.ViewTimeout">
            <summary>
            The time to wait before timing out a View request by the client.
            </summary>
            <remarks>The default is 75s.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.QueryTimeout">
            <summary>
            The time to wait before timing out a Query or N1QL request by the client.
            </summary>
            <remarks>The default is 75s.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.AnalyticsTimeout">
            <summary>
            The time to wait before timing out an Analytics request by the client.
            </summary>
            <remarks>The default is 75s.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.SearchTimeout">
            <summary>
            Number of seconds to wait before timing out a Search request by the client.
            </summary>
            <remarks>The default is 75s.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.ManagementTimeout">
            <summary>
            Number of seconds to wait before timing out a Management API request by the client.
            </summary>
            <remarks>The default is 75s.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.KvSendQueueCapacity">
            <summary>
            Gets or sets the maximum number of operations that will be queued for processing per node.
            If this value is exceeded, any additional operations will be put into the retry loop.
            </summary>
            <remarks>Defaults to 1024 operations.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.EnableTls">
             <summary>
             Overrides the TLS behavior in <see cref="P:Couchbase.ClusterOptions.ConnectionString"/>, enabling or
             disabling TLS.
             </summary>
            <remarks>Disabled default.</remarks>
             <seealso cref="P:Couchbase.ClusterOptions.KvCertificateCallbackValidation"/>
             <seealso cref="P:Couchbase.ClusterOptions.HttpCertificateCallbackValidation"/>
        </member>
        <member name="P:Couchbase.ClusterOptions.EnableMutationTokens">
             <summary>
             Enables mutation tokens for read consistency in Query searches.
             </summary>
            <remarks>They are enabled by default.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.TcpKeepAliveTime">
            <summary>
             The duration between two keepalive transmissions in idle condition.
            </summary>
            <remarks>The default is every 1m.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.TcpKeepAliveInterval">
            <summary>
            The duration between two successive keepalive retransmissions, if acknowledgement to the previous keepalive transmission is not received.
            </summary>
            <remarks>The default is every 1s.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.ForceIPv4">
            <summary>
            Forces the SDK use IPv4 over IPv6
            </summary>
            <remarks>Defaults to disabled.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.ConfigPollInterval">
            <summary>
            The time between querying the server for new cluster map revisions.
            </summary>
            <remarks>The default is 2.5s.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.ConfigPollFloorInterval">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="P:Couchbase.ClusterOptions.ConfigIdleRedialTimeout">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="P:Couchbase.ClusterOptions.NumKvConnections">
            <summary>
            Minimum number of connections per key/value node.
            </summary>
            <remarks>The default is 2; use the smallest number possible for best performance.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.MaxKvConnections">
            <summary>
            Maximum number of connections per key/value node.
            </summary>
            <remarks>The default is 5; use the smallest number possible for best performance.
            A higher number of socket connections will increase the amount resources used by
            the server and harm performance.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.IdleKvConnectionTimeout">
            <summary>
            Amount of time with no activity before a key/value connection is considered idle.
            </summary>
            <remarks>The default is 1m.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.MaxHttpConnections">
            <summary>
            Gets or sets the maximum number of simultaneous TCP connections allowed to a single server.
            </summary>
            <remarks>The default is 0 which equates to the maximum value or Int32.Max.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.IdleHttpConnectionTimeout">
            <summary>
            The maximum time an HTTP connection will remain idle before being considered reusable.
            </summary>
            <remarks>The default is 1s.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.HttpConnectionLifetime">
            <summary>
            Gets or sets how long a connection can be in the pool to be considered reusable.
            </summary>
            <remarks>Default of zero equates to the SocketsHttpHandler's default of -1 for infinite.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.CircuitBreakerConfiguration">
            <summary>
            The configuration for tuning the circuit breaker; if the default is changed ensure that the change is properly measured and tested.
            </summary>
        </member>
        <member name="P:Couchbase.ClusterOptions.EnableOperationDurationTracing">
            <summary>
            If true the server duration for an operation will be enabled and the value collected per K/V operation.
            </summary>
            <remarks>The default is enabled.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.RedactionLevel">
            <summary>
            The redaction level for log files.
            </summary>
            <remarks>The default is <see cref="F:Couchbase.Core.Logging.RedactionLevel.None"/></remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.BootstrapHttpPort">
            <summary>
            Port used for HTTP bootstrapping fallback if other bootstrap methods are not available. Do not change unless the Cochbase server default ports have be changed.
            </summary>
            <remarks>The default is 8091.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.BootstrapHttpPortTls">
            <summary>
            Port used for TLS HTTP bootstrapping fallback if other bootstrap methods are not available. Do not change unless the Cochbase server default ports have be changed.
            </summary>
        </member>
        <member name="P:Couchbase.ClusterOptions.BootstrapPollInterval">
            <summary>
            Used for checking that the SDK has bootstrapped and potentially retrying if not.
            </summary>
            <remarks>The default is 2.5s.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.EnableCertificateRevocation">
            <summary>
            A <see cref="T:System.Boolean"/> value that specifies whether the certificate revocation list is checked during authentication.
            </summary>
        </member>
        <member name="P:Couchbase.ClusterOptions.IgnoreRemoteCertificateNameMismatch">
            <summary>
            Ignore CertificateNameMismatch and CertificateChainMismatch, since they happen together.
            </summary>
        </member>
        <member name="P:Couchbase.ClusterOptions.EnableConfigPolling">
            <summary>
            Polls the server for cluster map configuration revision changes. This should always be enabled unless debugging the SDK.
            </summary>
            <remarks>This is enabled by default.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.EnableTcpKeepAlives">
            <summary>
            Enables TCP Keep Alives.
            </summary>
            <remarks>This is enabled by default.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.EnableDnsSrvResolution">
            <summary>
            When bootstrapping, checks first that the connection string is a DNS SRV lookup;
            this can cause slower bootstrap times if not needed and can be disabled if DNS SRV is not being used.
            </summary>
            <remarks>This is enabled by default.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.NetworkResolution">
            <summary>
            Specifies the network resolution strategy to use for alternative network; used in some container
            environments where there maybe internal and external addresses for connecting.
            </summary>
            <remarks>The default is "Auto"; Alternative addresses will be used if available.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.Compression">
            <summary>
            Enables compression for key/value operations.
            </summary>
            <remarks>
            The value is ignored if no compression algorithm is supplied via <see cref="M:Couchbase.ClusterOptions.WithCompressionAlgorithm(Couchbase.Core.IO.Compression.ICompressionAlgorithm)"/>.
            Defaults to true.
            </remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.CompressionMinSize">
            <summary>
            If compression is enabled, the minimum document size considered for compression (in bytes).
            Documents smaller than this size are always sent to the server uncompressed.
            </summary>
            <remarks>The default is 32.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.CompressionMinRatio">
            <summary>
            If compression is enabled, the minimum compression ratio to accept when sending documents to the server.
            Documents which don't achieve this compression ratio are sent to the server uncompressed.
            </summary>
            <remarks>
            1.0 means no compression was achieved. A value of 0.75 would result in documents which compress to at least
            75% of their original size to be transmitted compressed. The default is 0.83 (83%).
            </remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.Tuning">
            <inheritdoc cref="T:Couchbase.TuningOptions"/>
        </member>
        <member name="P:Couchbase.ClusterOptions.Experiments">
            <inheritdoc cref="T:Couchbase.ExperimentalOptions"/>
        </member>
        <member name="P:Couchbase.ClusterOptions.Default">
            <summary>
            Provides a default implementation of <see cref="T:Couchbase.ClusterOptions"/>.
            </summary>
        </member>
        <member name="P:Couchbase.ClusterOptions.EffectiveEnableTls">
            <summary>
            Effective value for TLS, should be used instead of <see cref="P:Couchbase.ClusterOptions.EnableTls"/> internally within the SDK.
            </summary>
        </member>
        <member name="P:Couchbase.ClusterOptions.KvIgnoreRemoteCertificateNameMismatch">
            <summary>
            Ignore CertificateNameMismatch and CertificateChainMismatch for Key/Value operations, since they happen together.
            </summary>
            <remarks>
            Intended for development purposes only.
            Does <b>NOT</b> affect anything other than the name mismatch,
            such as an untrusted root or an expired certificate.
            </remarks>
            <seealso cref="P:Couchbase.ClusterOptions.KvCertificateCallbackValidation"/>
            <seealso cref="P:Couchbase.ClusterOptions.HttpIgnoreRemoteCertificateMismatch"/>
        </member>
        <member name="P:Couchbase.ClusterOptions.KvCertificateCallbackValidation">
            <summary>
            The default <see cref="T:System.Net.Security.RemoteCertificateValidationCallback"/> called by .NET to validate the TLS/SSL certificates being used for
            Key/Value operations. If this method returns <code>true</code>, then the certificate will be accepted.
            </summary>
            <remarks>
            Proper SSL/TLS certificate validation is a complex subject.
            While it can be handy to simply <code>return true</code> for development against self-signed certificates,
            such a shortcut should never be used against a public-facing or production system.
            </remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.HttpIgnoreRemoteCertificateMismatch">
            <summary>
            Ignore CertificateNameMismatch and CertificateChainMismatch for HTTP services (Query, FTS, Analytics, etc), since they happen together.
            </summary>
            <remarks>
            Intended for development purposes only.
            Does <b>NOT</b> affect anything other than the name mismatch,
            such as an untrusted root or an expired certificate.
            </remarks>
            <seealso cref="P:Couchbase.ClusterOptions.KvIgnoreRemoteCertificateNameMismatch"/>
            <seealso cref="P:Couchbase.ClusterOptions.HttpCertificateCallbackValidation"/>
        </member>
        <member name="P:Couchbase.ClusterOptions.HttpCertificateCallbackValidation">
            <summary>
            The default RemoteCertificateValidationCallback called by .NET to validate the TLS/SSL certificates being used for
            HTTP services (Query, FTS, Analytics, etc).
             If this method returns <code>true</code>, then the certificate will be accepted.
            </summary>
            <remarks>
            Proper SSL/TLS certificate validation is a complex subject.
            While it can be handy to simply <code>return true</code> for development against self-signed certificates,
            such a shortcut should never be used against a public-facing or production system.
            </remarks>
            <seealso cref="P:Couchbase.ClusterOptions.KvCertificateCallbackValidation"/>
        </member>
        <member name="P:Couchbase.ClusterOptions.X509CertificateFactory">
            <summary>
            Gets or sets the <see cref="T:Couchbase.Core.IO.Authentication.X509.ICertificateFactory"/> to provide client certificates during TLS authentication.
            </summary>
        </member>
        <member name="M:Couchbase.ClusterOptions.WithX509CertificateFactory(Couchbase.Core.IO.Authentication.X509.ICertificateFactory)">
            <summary>
            Use the given <see cref="T:Couchbase.Core.IO.Authentication.X509.ICertificateFactory"/> to provide client certificates during TLS authentication.
            </summary>
            <param name="certificateFactory">The certificate factory to use.</param>
            <returns>The ClusterOptions to continue configuration in a fluent style.</returns>
            <exception cref="T:System.NullReferenceException">The certificateFactory parameter cannot be null.</exception>
        </member>
        <member name="P:Couchbase.ClusterOptions.UnorderedExecutionEnabled">
            <summary>
            Allows unordered execution of commands by the server.
            </summary>
            <remarks>The default is enabled.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.ForceIpAsTargetHost">
            <summary>
            If <see cref="P:Couchbase.ClusterOptions.ForceIpAsTargetHost"/> is true, send the IP as the target host during TLS authentication. If <see cref="P:Couchbase.ClusterOptions.ForceIpAsTargetHost"/> is false,
            then mimic the default SDK2 behavior; the hostname or IP as defined by the server will be sent as the target host during TLS authentication.
            </summary>
            <remarks>Only applies when <see cref="P:Couchbase.ClusterOptions.EnableTls"/> is true.</remarks>
            <remarks>The default is true and the IP Address will be sent as the target host.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.EnabledSslProtocols">
            <summary>
            Enabled SSL Protocols
            </summary>
            <remarks>The defaults TLS1.2 and TLS1.3.  Earlier versions are considered insecure.</remarks>
        </member>
        <member name="P:Couchbase.ClusterOptions.EnabledTlsCipherSuites">
            <summary>
            List of enabled TLS Cipher Suites.  If not set, will use default .NET Cipher Suites
            </summary>
        </member>
        <member name="M:Couchbase.ClusterOptions.BuildServiceProvider">
            <summary>
            Build a <see cref="T:System.IServiceProvider"/> from the currently registered services.
            </summary>
            <returns>The new <see cref="T:System.IServiceProvider"/>.</returns>
        </member>
        <member name="M:Couchbase.ClusterOptions.AddService``2(System.Func{System.IServiceProvider,``1},Couchbase.ClusterServiceLifetime)">
            <summary>
            Register a service with the cluster's <see cref="P:Couchbase.ICluster.ClusterServices"/>.
            </summary>
            <typeparam name="TService">The type of the service which will be requested.</typeparam>
            <typeparam name="TImplementation">The type of the service implementation which is returned.</typeparam>
            <param name="factory">Factory which will create the service.</param>
            <param name="lifetime">Lifetime of the service.</param>
            <returns>The <see cref="T:Couchbase.ClusterOptions"/>.</returns>
        </member>
        <member name="M:Couchbase.ClusterOptions.AddService``2(Couchbase.ClusterServiceLifetime)">
            <summary>
            Register a service with the cluster's <see cref="P:Couchbase.ICluster.ClusterServices"/>.
            </summary>
            <typeparam name="TService">The type of the service which will be requested.</typeparam>
            <typeparam name="TImplementation">The type of the service implementation which is returned.</typeparam>
            <param name="lifetime">Lifetime of the service.</param>
            <returns>The <see cref="T:Couchbase.ClusterOptions"/>.</returns>
        </member>
        <member name="T:Couchbase.ClusterOptionsExtensions">
            <summary>
            Extensions for <see cref="T:Couchbase.ClusterOptions"/>.
            </summary>
        </member>
        <member name="M:Couchbase.ClusterOptionsExtensions.AddTransientService``2(Couchbase.ClusterOptions)">
            <summary>
            Register a transient service with the cluster's <see cref="P:Couchbase.ICluster.ClusterServices"/>.
            </summary>
            <typeparam name="TService">The type of the service which will be requested.</typeparam>
            <typeparam name="TImplementation">The type of the service implementation which is returned.</typeparam>
            <param name="clusterOptions">The <see cref="T:Couchbase.ClusterOptions"/>.</param>
            <returns>The <see cref="T:Couchbase.ClusterOptions"/>.</returns>
        </member>
        <member name="M:Couchbase.ClusterOptionsExtensions.AddTransientService``2(Couchbase.ClusterOptions,System.Func{System.IServiceProvider,``1})">
            <summary>
            Register a transient service with the cluster's <see cref="P:Couchbase.ICluster.ClusterServices"/>.
            </summary>
            <typeparam name="TService">The type of the service which will be requested.</typeparam>
            <typeparam name="TImplementation">The type of the service implementation which is returned.</typeparam>
            <param name="clusterOptions">The <see cref="T:Couchbase.ClusterOptions"/>.</param>
            <param name="factory">Factory which creates the service each time it is requested.</param>
            <returns>The <see cref="T:Couchbase.ClusterOptions"/>.</returns>
        </member>
        <member name="M:Couchbase.ClusterOptionsExtensions.AddClusterService``1(Couchbase.ClusterOptions,``0)">
            <summary>
            Register a singleton service with the cluster's <see cref="P:Couchbase.ICluster.ClusterServices"/>.
            </summary>
            <typeparam name="T">The type of the service which will be requested and returned.</typeparam>
            <param name="clusterOptions">The <see cref="T:Couchbase.ClusterOptions"/>.</param>
            <param name="singleton">Singleton instance which is always returned.</param>
            <returns>The <see cref="T:Couchbase.ClusterOptions"/>.</returns>
        </member>
        <member name="M:Couchbase.ClusterOptionsExtensions.AddClusterService``2(Couchbase.ClusterOptions,``1)">
            <summary>
            Register a singleton service with the cluster's <see cref="P:Couchbase.ICluster.ClusterServices"/>.
            </summary>
            <typeparam name="TService">The type of the service which will be requested.</typeparam>
            <typeparam name="TImplementation">The type of the service implementation which is returned.</typeparam>
            <param name="clusterOptions">The <see cref="T:Couchbase.ClusterOptions"/>.</param>
            <param name="singleton">Singleton instance which is always returned.</param>
            <returns>The <see cref="T:Couchbase.ClusterOptions"/>.</returns>
        </member>
        <member name="M:Couchbase.ClusterOptionsExtensions.AddClusterService``2(Couchbase.ClusterOptions)">
            <summary>
            Register a service with the cluster's <see cref="P:Couchbase.ICluster.ClusterServices"/> using the cluster's lifetime.
            </summary>
            <typeparam name="TService">The type of the service which will be requested.</typeparam>
            <typeparam name="TImplementation">The type of the service implementation which is returned.</typeparam>
            <param name="clusterOptions">The <see cref="T:Couchbase.ClusterOptions"/>.</param>
            <returns>The <see cref="T:Couchbase.ClusterOptions"/>.</returns>
        </member>
        <member name="M:Couchbase.ClusterOptionsExtensions.AddClusterService``2(Couchbase.ClusterOptions,System.Func{System.IServiceProvider,``1})">
            <summary>
            Register a service with the cluster's <see cref="P:Couchbase.ICluster.ClusterServices"/> using the cluster's lifetime.
            </summary>
            <typeparam name="TService">The type of the service which will be requested.</typeparam>
            <typeparam name="TImplementation">The type of the service implementation which is returned.</typeparam>
            <param name="clusterOptions">The <see cref="T:Couchbase.ClusterOptions"/>.</param>
            <param name="factory">Factory which creates the service the first time it is requested.</param>
            <returns>The <see cref="T:Couchbase.ClusterOptions"/>.</returns>
        </member>
        <member name="T:Couchbase.ClusterServiceLifetime">
            <summary>
            Represents the scope used for a custom cluster service.
            </summary>
        </member>
        <member name="F:Couchbase.ClusterServiceLifetime.Transient">
            <summary>
            A new service will be created for each request for the service.
            </summary>
        </member>
        <member name="F:Couchbase.ClusterServiceLifetime.Cluster">
            <summary>
            A single service will be used for the lifetime of the cluster.
            </summary>
        </member>
        <member name="T:Couchbase.Protostellar.Admin.Bucket.V1.BucketReflection">
            <summary>Holder for reflection information generated from couchbase/admin/bucket/v1/bucket.proto</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.BucketReflection.Descriptor">
            <summary>File descriptor for couchbase/admin/bucket/v1/bucket.proto</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.BucketsFieldNumber">
            <summary>Field number for the "buckets" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types">
            <summary>Container for nested types declared in the ListBucketsResponse message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.FlushEnabledFieldNumber">
            <summary>Field number for the "flush_enabled" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.RamQuotaMbFieldNumber">
            <summary>Field number for the "ram_quota_mb" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.NumReplicasFieldNumber">
            <summary>Field number for the "num_replicas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.ReplicaIndexesFieldNumber">
            <summary>Field number for the "replica_indexes" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.BucketTypeFieldNumber">
            <summary>Field number for the "bucket_type" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.EvictionModeFieldNumber">
            <summary>Field number for the "eviction_mode" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.MaxExpirySecsFieldNumber">
            <summary>Field number for the "max_expiry_secs" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.CompressionModeFieldNumber">
            <summary>Field number for the "compression_mode" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.MinimumDurabilityLevelFieldNumber">
            <summary>Field number for the "minimum_durability_level" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.HasMinimumDurabilityLevel">
            <summary>Gets whether the "minimum_durability_level" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.ClearMinimumDurabilityLevel">
            <summary>Clears the value of the "minimum_durability_level" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.StorageBackendFieldNumber">
            <summary>Field number for the "storage_backend" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.HasStorageBackend">
            <summary>Gets whether the "storage_backend" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.ClearStorageBackend">
            <summary>Clears the value of the "storage_backend" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.ListBucketsResponse.Types.Bucket.ConflictResolutionTypeFieldNumber">
            <summary>Field number for the "conflict_resolution_type" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.BucketTypeFieldNumber">
            <summary>Field number for the "bucket_type" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.RamQuotaMbFieldNumber">
            <summary>Field number for the "ram_quota_mb" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.HasRamQuotaMb">
            <summary>Gets whether the "ram_quota_mb" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.ClearRamQuotaMb">
            <summary>Clears the value of the "ram_quota_mb" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.NumReplicasFieldNumber">
            <summary>Field number for the "num_replicas" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.HasNumReplicas">
            <summary>Gets whether the "num_replicas" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.ClearNumReplicas">
            <summary>Clears the value of the "num_replicas" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.FlushEnabledFieldNumber">
            <summary>Field number for the "flush_enabled" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.HasFlushEnabled">
            <summary>Gets whether the "flush_enabled" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.ClearFlushEnabled">
            <summary>Clears the value of the "flush_enabled" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.ReplicaIndexesFieldNumber">
            <summary>Field number for the "replica_indexes" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.HasReplicaIndexes">
            <summary>Gets whether the "replica_indexes" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.ClearReplicaIndexes">
            <summary>Clears the value of the "replica_indexes" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.EvictionModeFieldNumber">
            <summary>Field number for the "eviction_mode" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.HasEvictionMode">
            <summary>Gets whether the "eviction_mode" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.ClearEvictionMode">
            <summary>Clears the value of the "eviction_mode" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.MaxExpirySecsFieldNumber">
            <summary>Field number for the "max_expiry_secs" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.HasMaxExpirySecs">
            <summary>Gets whether the "max_expiry_secs" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.ClearMaxExpirySecs">
            <summary>Clears the value of the "max_expiry_secs" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.CompressionModeFieldNumber">
            <summary>Field number for the "compression_mode" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.HasCompressionMode">
            <summary>Gets whether the "compression_mode" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.ClearCompressionMode">
            <summary>Clears the value of the "compression_mode" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.MinimumDurabilityLevelFieldNumber">
            <summary>Field number for the "minimum_durability_level" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.HasMinimumDurabilityLevel">
            <summary>Gets whether the "minimum_durability_level" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.ClearMinimumDurabilityLevel">
            <summary>Clears the value of the "minimum_durability_level" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.StorageBackendFieldNumber">
            <summary>Field number for the "storage_backend" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.HasStorageBackend">
            <summary>Gets whether the "storage_backend" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.ClearStorageBackend">
            <summary>Clears the value of the "storage_backend" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.ConflictResolutionTypeFieldNumber">
            <summary>Field number for the "conflict_resolution_type" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.HasConflictResolutionType">
            <summary>Gets whether the "conflict_resolution_type" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketRequest.ClearConflictResolutionType">
            <summary>Clears the value of the "conflict_resolution_type" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.CreateBucketResponse.BucketUuidFieldNumber">
            <summary>Field number for the "bucket_uuid" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.RamQuotaMbFieldNumber">
            <summary>Field number for the "ram_quota_mb" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.HasRamQuotaMb">
            <summary>Gets whether the "ram_quota_mb" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.ClearRamQuotaMb">
            <summary>Clears the value of the "ram_quota_mb" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.NumReplicasFieldNumber">
            <summary>Field number for the "num_replicas" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.HasNumReplicas">
            <summary>Gets whether the "num_replicas" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.ClearNumReplicas">
            <summary>Clears the value of the "num_replicas" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.FlushEnabledFieldNumber">
            <summary>Field number for the "flush_enabled" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.HasFlushEnabled">
            <summary>Gets whether the "flush_enabled" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.ClearFlushEnabled">
            <summary>Clears the value of the "flush_enabled" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.EvictionModeFieldNumber">
            <summary>Field number for the "eviction_mode" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.HasEvictionMode">
            <summary>Gets whether the "eviction_mode" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.ClearEvictionMode">
            <summary>Clears the value of the "eviction_mode" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.MaxExpirySecsFieldNumber">
            <summary>Field number for the "max_expiry_secs" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.HasMaxExpirySecs">
            <summary>Gets whether the "max_expiry_secs" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.ClearMaxExpirySecs">
            <summary>Clears the value of the "max_expiry_secs" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.CompressionModeFieldNumber">
            <summary>Field number for the "compression_mode" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.HasCompressionMode">
            <summary>Gets whether the "compression_mode" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.ClearCompressionMode">
            <summary>Clears the value of the "compression_mode" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.MinimumDurabilityLevelFieldNumber">
            <summary>Field number for the "minimum_durability_level" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.HasMinimumDurabilityLevel">
            <summary>Gets whether the "minimum_durability_level" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.UpdateBucketRequest.ClearMinimumDurabilityLevel">
            <summary>Clears the value of the "minimum_durability_level" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Bucket.V1.DeleteBucketRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Bucket.V1.BucketAdminService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Admin.Bucket.V1.BucketAdminService.BucketAdminServiceClient">
            <summary>Client for BucketAdminService</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.BucketAdminService.BucketAdminServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for BucketAdminService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.BucketAdminService.BucketAdminServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for BucketAdminService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.BucketAdminService.BucketAdminServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.BucketAdminService.BucketAdminServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Bucket.V1.BucketAdminService.BucketAdminServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Admin.Collection.V1.CollectionReflection">
            <summary>Holder for reflection information generated from couchbase/admin/collection/v1/collection.proto</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Collection.V1.CollectionReflection.Descriptor">
            <summary>File descriptor for couchbase/admin/collection/v1/collection.proto</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.ListCollectionsRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.ListCollectionsResponse.ScopesFieldNumber">
            <summary>Field number for the "scopes" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Admin.Collection.V1.ListCollectionsResponse.Types">
            <summary>Container for nested types declared in the ListCollectionsResponse message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.ListCollectionsResponse.Types.Collection.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.ListCollectionsResponse.Types.Collection.MaxExpirySecsFieldNumber">
            <summary>Field number for the "max_expiry_secs" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Collection.V1.ListCollectionsResponse.Types.Collection.HasMaxExpirySecs">
            <summary>Gets whether the "max_expiry_secs" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Collection.V1.ListCollectionsResponse.Types.Collection.ClearMaxExpirySecs">
            <summary>Clears the value of the "max_expiry_secs" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.ListCollectionsResponse.Types.Scope.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.ListCollectionsResponse.Types.Scope.CollectionsFieldNumber">
            <summary>Field number for the "collections" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.CreateScopeRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.CreateScopeRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.DeleteScopeRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.DeleteScopeRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.CreateCollectionRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.CreateCollectionRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.CreateCollectionRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.CreateCollectionRequest.MaxExpirySecsFieldNumber">
            <summary>Field number for the "max_expiry_secs" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Collection.V1.CreateCollectionRequest.HasMaxExpirySecs">
            <summary>Gets whether the "max_expiry_secs" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Collection.V1.CreateCollectionRequest.ClearMaxExpirySecs">
            <summary>Clears the value of the "max_expiry_secs" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.DeleteCollectionRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.DeleteCollectionRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Collection.V1.DeleteCollectionRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Collection.V1.CollectionAdminService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Admin.Collection.V1.CollectionAdminService.CollectionAdminServiceClient">
            <summary>Client for CollectionAdminService</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Collection.V1.CollectionAdminService.CollectionAdminServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for CollectionAdminService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Collection.V1.CollectionAdminService.CollectionAdminServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for CollectionAdminService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Collection.V1.CollectionAdminService.CollectionAdminServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Collection.V1.CollectionAdminService.CollectionAdminServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Collection.V1.CollectionAdminService.CollectionAdminServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Admin.Query.V1.QueryReflection">
            <summary>Holder for reflection information generated from couchbase/admin/query/v1/query.proto</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.QueryReflection.Descriptor">
            <summary>File descriptor for couchbase/admin/query/v1/query.proto</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesRequest.HasCollectionName">
            <summary>Gets whether the "collection_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesRequest.ClearCollectionName">
            <summary>Clears the value of the "collection_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.IndexesFieldNumber">
            <summary>Field number for the "indexes" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types">
            <summary>Container for nested types declared in the GetAllIndexesResponse message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.IsPrimaryFieldNumber">
            <summary>Field number for the "is_primary" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.StateFieldNumber">
            <summary>Field number for the "state" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.FieldsFieldNumber">
            <summary>Field number for the "fields" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.ConditionFieldNumber">
            <summary>Field number for the "condition" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.HasCondition">
            <summary>Gets whether the "condition" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.ClearCondition">
            <summary>Clears the value of the "condition" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.PartitionFieldNumber">
            <summary>Field number for the "partition" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.HasPartition">
            <summary>Gets whether the "partition" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.GetAllIndexesResponse.Types.Index.ClearPartition">
            <summary>Clears the value of the "partition" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.HasCollectionName">
            <summary>Gets whether the "collection_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.ClearCollectionName">
            <summary>Clears the value of the "collection_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.HasName">
            <summary>Gets whether the "name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.ClearName">
            <summary>Clears the value of the "name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.NumReplicasFieldNumber">
            <summary>Field number for the "num_replicas" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.HasNumReplicas">
            <summary>Gets whether the "num_replicas" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.ClearNumReplicas">
            <summary>Clears the value of the "num_replicas" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.DeferredFieldNumber">
            <summary>Field number for the "deferred" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.HasDeferred">
            <summary>Gets whether the "deferred" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.ClearDeferred">
            <summary>Clears the value of the "deferred" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.IgnoreIfExistsFieldNumber">
            <summary>Field number for the "ignore_if_exists" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.HasIgnoreIfExists">
            <summary>Gets whether the "ignore_if_exists" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.CreatePrimaryIndexRequest.ClearIgnoreIfExists">
            <summary>Clears the value of the "ignore_if_exists" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.HasCollectionName">
            <summary>Gets whether the "collection_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.ClearCollectionName">
            <summary>Clears the value of the "collection_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.NumReplicasFieldNumber">
            <summary>Field number for the "num_replicas" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.HasNumReplicas">
            <summary>Gets whether the "num_replicas" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.ClearNumReplicas">
            <summary>Clears the value of the "num_replicas" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.FieldsFieldNumber">
            <summary>Field number for the "fields" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.DeferredFieldNumber">
            <summary>Field number for the "deferred" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.HasDeferred">
            <summary>Gets whether the "deferred" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.ClearDeferred">
            <summary>Clears the value of the "deferred" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.IgnoreIfExistsFieldNumber">
            <summary>Field number for the "ignore_if_exists" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.HasIgnoreIfExists">
            <summary>Gets whether the "ignore_if_exists" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.CreateIndexRequest.ClearIgnoreIfExists">
            <summary>Clears the value of the "ignore_if_exists" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.DropPrimaryIndexRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.DropPrimaryIndexRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.DropPrimaryIndexRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.DropPrimaryIndexRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.DropPrimaryIndexRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.DropPrimaryIndexRequest.HasCollectionName">
            <summary>Gets whether the "collection_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.DropPrimaryIndexRequest.ClearCollectionName">
            <summary>Clears the value of the "collection_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.DropPrimaryIndexRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.DropPrimaryIndexRequest.HasName">
            <summary>Gets whether the "name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.DropPrimaryIndexRequest.ClearName">
            <summary>Clears the value of the "name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.DropPrimaryIndexRequest.IgnoreIfMissingFieldNumber">
            <summary>Field number for the "ignore_if_missing" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.DropPrimaryIndexRequest.HasIgnoreIfMissing">
            <summary>Gets whether the "ignore_if_missing" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.DropPrimaryIndexRequest.ClearIgnoreIfMissing">
            <summary>Clears the value of the "ignore_if_missing" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.DropIndexRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.DropIndexRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.DropIndexRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.DropIndexRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.DropIndexRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.DropIndexRequest.HasCollectionName">
            <summary>Gets whether the "collection_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.DropIndexRequest.ClearCollectionName">
            <summary>Clears the value of the "collection_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.DropIndexRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.DropIndexRequest.IgnoreIfMissingFieldNumber">
            <summary>Field number for the "ignore_if_missing" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.DropIndexRequest.HasIgnoreIfMissing">
            <summary>Gets whether the "ignore_if_missing" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.DropIndexRequest.ClearIgnoreIfMissing">
            <summary>Clears the value of the "ignore_if_missing" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesRequest.HasCollectionName">
            <summary>Gets whether the "collection_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesRequest.ClearCollectionName">
            <summary>Clears the value of the "collection_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesResponse.IndexesFieldNumber">
            <summary>Field number for the "indexes" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesResponse.Types">
            <summary>Container for nested types declared in the BuildDeferredIndexesResponse message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesResponse.Types.Index.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesResponse.Types.Index.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesResponse.Types.Index.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesResponse.Types.Index.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesResponse.Types.Index.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesResponse.Types.Index.HasCollectionName">
            <summary>Gets whether the "collection_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesResponse.Types.Index.ClearCollectionName">
            <summary>Clears the value of the "collection_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Query.V1.BuildDeferredIndexesResponse.Types.Index.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Query.V1.QueryAdminService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Admin.Query.V1.QueryAdminService.QueryAdminServiceClient">
            <summary>Client for QueryAdminService</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.QueryAdminService.QueryAdminServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for QueryAdminService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.QueryAdminService.QueryAdminServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for QueryAdminService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.QueryAdminService.QueryAdminServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.QueryAdminService.QueryAdminServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Query.V1.QueryAdminService.QueryAdminServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Admin.Search.V1.SearchReflection">
            <summary>Holder for reflection information generated from couchbase/admin/search/v1/search.proto</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.SearchReflection.Descriptor">
            <summary>File descriptor for couchbase/admin/search/v1/search.proto</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.Index.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.Index.ParamsFieldNumber">
            <summary>Field number for the "params" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.Index.PlanParamsFieldNumber">
            <summary>Field number for the "plan_params" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.Index.SourceNameFieldNumber">
            <summary>Field number for the "source_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.Index.HasSourceName">
            <summary>Gets whether the "source_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.Index.ClearSourceName">
            <summary>Clears the value of the "source_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.Index.SourceParamsFieldNumber">
            <summary>Field number for the "source_params" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.Index.SourceTypeFieldNumber">
            <summary>Field number for the "source_type" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.Index.HasSourceType">
            <summary>Gets whether the "source_type" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.Index.ClearSourceType">
            <summary>Clears the value of the "source_type" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.Index.SourceUuidFieldNumber">
            <summary>Field number for the "source_uuid" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.Index.HasSourceUuid">
            <summary>Gets whether the "source_uuid" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.Index.ClearSourceUuid">
            <summary>Clears the value of the "source_uuid" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.Index.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.Index.UuidFieldNumber">
            <summary>Field number for the "uuid" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest">
            <summary>
            CreateIndexRequest does not use Index because of the uuid field.
            </summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.ParamsFieldNumber">
            <summary>Field number for the "params" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.PlanParamsFieldNumber">
            <summary>Field number for the "plan_params" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.PrevIndexUuidFieldNumber">
            <summary>Field number for the "prev_index_uuid" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.HasPrevIndexUuid">
            <summary>Gets whether the "prev_index_uuid" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.ClearPrevIndexUuid">
            <summary>Clears the value of the "prev_index_uuid" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.SourceNameFieldNumber">
            <summary>Field number for the "source_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.HasSourceName">
            <summary>Gets whether the "source_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.ClearSourceName">
            <summary>Clears the value of the "source_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.SourceParamsFieldNumber">
            <summary>Field number for the "source_params" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.SourceTypeFieldNumber">
            <summary>Field number for the "source_type" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.HasSourceType">
            <summary>Gets whether the "source_type" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.ClearSourceType">
            <summary>Clears the value of the "source_type" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.SourceUuidFieldNumber">
            <summary>Field number for the "source_uuid" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.HasSourceUuid">
            <summary>Gets whether the "source_uuid" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.ClearSourceUuid">
            <summary>Clears the value of the "source_uuid" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.CreateIndexRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.UpdateIndexRequest.IndexFieldNumber">
            <summary>Field number for the "index" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.UpdateIndexRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.UpdateIndexRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.UpdateIndexRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.UpdateIndexRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.UpdateIndexRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.UpdateIndexRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.GetIndexRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.GetIndexRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.GetIndexRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.GetIndexRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.GetIndexRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.GetIndexRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.GetIndexRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.GetIndexResponse.IndexFieldNumber">
            <summary>Field number for the "index" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.ListIndexesRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.ListIndexesRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.ListIndexesRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.ListIndexesRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.ListIndexesRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.ListIndexesRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.ListIndexesResponse.IndexesFieldNumber">
            <summary>Field number for the "indexes" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.DeleteIndexRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.DeleteIndexRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.DeleteIndexRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.DeleteIndexRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.DeleteIndexRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.DeleteIndexRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.DeleteIndexRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.AnalyzeDocumentRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.AnalyzeDocumentRequest.DocFieldNumber">
            <summary>Field number for the "doc" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.AnalyzeDocumentRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.AnalyzeDocumentRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.AnalyzeDocumentRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.AnalyzeDocumentRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.AnalyzeDocumentRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.AnalyzeDocumentRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.AnalyzeDocumentResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.AnalyzeDocumentResponse.AnalyzedFieldNumber">
            <summary>Field number for the "analyzed" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.GetIndexedDocumentsCountRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.GetIndexedDocumentsCountRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.GetIndexedDocumentsCountRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.GetIndexedDocumentsCountRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.GetIndexedDocumentsCountRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.GetIndexedDocumentsCountRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.GetIndexedDocumentsCountRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.GetIndexedDocumentsCountResponse.CountFieldNumber">
            <summary>Field number for the "count" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.PauseIndexIngestRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.PauseIndexIngestRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.PauseIndexIngestRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.PauseIndexIngestRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.PauseIndexIngestRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.PauseIndexIngestRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.PauseIndexIngestRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.ResumeIndexIngestRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.ResumeIndexIngestRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.ResumeIndexIngestRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.ResumeIndexIngestRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.ResumeIndexIngestRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.ResumeIndexIngestRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.ResumeIndexIngestRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.AllowIndexQueryingRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.AllowIndexQueryingRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.AllowIndexQueryingRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.AllowIndexQueryingRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.AllowIndexQueryingRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.AllowIndexQueryingRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.AllowIndexQueryingRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.DisallowIndexQueryingRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.DisallowIndexQueryingRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.DisallowIndexQueryingRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.DisallowIndexQueryingRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.DisallowIndexQueryingRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.DisallowIndexQueryingRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.DisallowIndexQueryingRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.FreezeIndexPlanRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.FreezeIndexPlanRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.FreezeIndexPlanRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.FreezeIndexPlanRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.FreezeIndexPlanRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.FreezeIndexPlanRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.FreezeIndexPlanRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.UnfreezeIndexPlanRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.UnfreezeIndexPlanRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.UnfreezeIndexPlanRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.UnfreezeIndexPlanRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Admin.Search.V1.UnfreezeIndexPlanRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.UnfreezeIndexPlanRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.UnfreezeIndexPlanRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Admin.Search.V1.SearchAdminService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Admin.Search.V1.SearchAdminService.SearchAdminServiceClient">
            <summary>Client for SearchAdminService</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.SearchAdminService.SearchAdminServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for SearchAdminService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.SearchAdminService.SearchAdminServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for SearchAdminService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.SearchAdminService.SearchAdminServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.SearchAdminService.SearchAdminServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Admin.Search.V1.SearchAdminService.SearchAdminServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Analytics.V1.AnalyticsReflection">
            <summary>Holder for reflection information generated from couchbase/analytics/v1/analytics.proto</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Analytics.V1.AnalyticsReflection.Descriptor">
            <summary>File descriptor for couchbase/analytics/v1/analytics.proto</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.StatementFieldNumber">
            <summary>Field number for the "statement" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.ReadOnlyFieldNumber">
            <summary>Field number for the "read_only" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.HasReadOnly">
            <summary>Gets whether the "read_only" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.ClearReadOnly">
            <summary>Clears the value of the "read_only" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.ClientContextIdFieldNumber">
            <summary>Field number for the "client_context_id" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.HasClientContextId">
            <summary>Gets whether the "client_context_id" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.ClearClientContextId">
            <summary>Clears the value of the "client_context_id" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.PriorityFieldNumber">
            <summary>Field number for the "priority" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.HasPriority">
            <summary>Gets whether the "priority" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.ClearPriority">
            <summary>Clears the value of the "priority" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.ScanConsistencyFieldNumber">
            <summary>Field number for the "scan_consistency" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.HasScanConsistency">
            <summary>Gets whether the "scan_consistency" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.ClearScanConsistency">
            <summary>Clears the value of the "scan_consistency" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.PositionalParametersFieldNumber">
            <summary>Field number for the "positional_parameters" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.NamedParametersFieldNumber">
            <summary>Field number for the "named_parameters" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryRequest.Types">
            <summary>Container for nested types declared in the AnalyticsQueryRequest message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.RowsFieldNumber">
            <summary>Field number for the "rows" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.MetaDataFieldNumber">
            <summary>Field number for the "meta_data" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types">
            <summary>Container for nested types declared in the AnalyticsQueryResponse message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.Metrics.ElapsedTimeFieldNumber">
            <summary>Field number for the "elapsed_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.Metrics.ExecutionTimeFieldNumber">
            <summary>Field number for the "execution_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.Metrics.ResultCountFieldNumber">
            <summary>Field number for the "result_count" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.Metrics.ResultSizeFieldNumber">
            <summary>Field number for the "result_size" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.Metrics.MutationCountFieldNumber">
            <summary>Field number for the "mutation_count" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.Metrics.SortCountFieldNumber">
            <summary>Field number for the "sort_count" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.Metrics.ErrorCountFieldNumber">
            <summary>Field number for the "error_count" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.Metrics.WarningCountFieldNumber">
            <summary>Field number for the "warning_count" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.Metrics.ProcessedObjectsFieldNumber">
            <summary>Field number for the "processed_objects" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.MetaData.RequestIdFieldNumber">
            <summary>Field number for the "request_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.MetaData.ClientContextIdFieldNumber">
            <summary>Field number for the "client_context_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.MetaData.MetricsFieldNumber">
            <summary>Field number for the "metrics" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.MetaData.SignatureFieldNumber">
            <summary>Field number for the "signature" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.MetaData.WarningsFieldNumber">
            <summary>Field number for the "warnings" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.MetaData.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.MetaData.Types">
            <summary>Container for nested types declared in the MetaData message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.MetaData.Types.Warning.CodeFieldNumber">
            <summary>Field number for the "code" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Analytics.V1.AnalyticsQueryResponse.Types.MetaData.Types.Warning.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Analytics.V1.AnalyticsService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Analytics.V1.AnalyticsService.AnalyticsServiceClient">
            <summary>Client for AnalyticsService</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Analytics.V1.AnalyticsService.AnalyticsServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for AnalyticsService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Analytics.V1.AnalyticsService.AnalyticsServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for AnalyticsService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Analytics.V1.AnalyticsService.AnalyticsServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Analytics.V1.AnalyticsService.AnalyticsServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Analytics.V1.AnalyticsService.AnalyticsServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Internal.Hooks.V1.HooksReflection">
            <summary>Holder for reflection information generated from couchbase/internal/hooks/v1/hooks.proto</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Internal.Hooks.V1.HooksReflection.Descriptor">
            <summary>File descriptor for couchbase/internal/hooks/v1/hooks.proto</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.CreateHooksContextRequest.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.DestroyHooksContextRequest.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.ValueRef.RequestFieldFieldNumber">
            <summary>Field number for the "request_field" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.ValueRef.CounterValueFieldNumber">
            <summary>Field number for the "counter_value" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.ValueRef.JsonValueFieldNumber">
            <summary>Field number for the "json_value" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Internal.Hooks.V1.ValueRef.ValueOneofCase">
            <summary>Enum of possible cases for the "value" oneof.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookCondition.LeftFieldNumber">
            <summary>Field number for the "left" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookCondition.OpFieldNumber">
            <summary>Field number for the "op" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookCondition.RightFieldNumber">
            <summary>Field number for the "right" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.IfFieldNumber">
            <summary>Field number for the "if" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.CounterFieldNumber">
            <summary>Field number for the "counter" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.WaitOnBarrierFieldNumber">
            <summary>Field number for the "wait_on_barrier" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.SignalBarrierFieldNumber">
            <summary>Field number for the "signal_barrier" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.ReturnResponseFieldNumber">
            <summary>Field number for the "return_response" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.ReturnErrorFieldNumber">
            <summary>Field number for the "return_error" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.ExecuteFieldNumber">
            <summary>Field number for the "execute" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.ActionOneofCase">
            <summary>Enum of possible cases for the "action" oneof.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.Types">
            <summary>Container for nested types declared in the HookAction message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.Types.If.CondFieldNumber">
            <summary>Field number for the "cond" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.Types.If.MatchFieldNumber">
            <summary>Field number for the "match" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.Types.If.NoMatchFieldNumber">
            <summary>Field number for the "no_match" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.Types.Counter.CounterIdFieldNumber">
            <summary>Field number for the "counter_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.Types.Counter.DeltaFieldNumber">
            <summary>Field number for the "delta" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.Types.WaitOnBarrier.BarrierIdFieldNumber">
            <summary>Field number for the "barrier_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.Types.SignalBarrier.BarrierIdFieldNumber">
            <summary>Field number for the "barrier_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.Types.SignalBarrier.SignalAllFieldNumber">
            <summary>Field number for the "signal_all" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.Types.ReturnResponse.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.Types.ReturnError.CodeFieldNumber">
            <summary>Field number for the "code" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.Types.ReturnError.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.HookAction.Types.ReturnError.DetailsFieldNumber">
            <summary>Field number for the "details" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.Hook.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.Hook.DescriptionFieldNumber">
            <summary>Field number for the "description" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.Hook.TargetMethodFieldNumber">
            <summary>Field number for the "target_method" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.Hook.ActionsFieldNumber">
            <summary>Field number for the "actions" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.AddHooksRequest.HooksContextIdFieldNumber">
            <summary>Field number for the "hooks_context_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.AddHooksRequest.HooksFieldNumber">
            <summary>Field number for the "hooks" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.WatchBarrierRequest.HooksContextIdFieldNumber">
            <summary>Field number for the "hooks_context_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.WatchBarrierRequest.BarrierIdFieldNumber">
            <summary>Field number for the "barrier_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.WatchBarrierResponse.WaitIdFieldNumber">
            <summary>Field number for the "wait_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.SignalBarrierRequest.HooksContextIdFieldNumber">
            <summary>Field number for the "hooks_context_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.SignalBarrierRequest.BarrierIdFieldNumber">
            <summary>Field number for the "barrier_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Internal.Hooks.V1.SignalBarrierRequest.WaitIdFieldNumber">
            <summary>Field number for the "wait_id" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Internal.Hooks.V1.SignalBarrierRequest.HasWaitId">
            <summary>Gets whether the "wait_id" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Internal.Hooks.V1.SignalBarrierRequest.ClearWaitId">
            <summary>Clears the value of the "wait_id" field</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Internal.Hooks.V1.HooksService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Internal.Hooks.V1.HooksService.HooksServiceClient">
            <summary>Client for HooksService</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Internal.Hooks.V1.HooksService.HooksServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for HooksService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Internal.Hooks.V1.HooksService.HooksServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for HooksService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Internal.Hooks.V1.HooksService.HooksServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Internal.Hooks.V1.HooksService.HooksServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Internal.Hooks.V1.HooksService.HooksServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.KvReflection">
            <summary>Holder for reflection information generated from couchbase/kv/v1/kv.proto</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.KvReflection.Descriptor">
            <summary>File descriptor for couchbase/kv/v1/kv.proto</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LegacyDurabilitySpec.NumReplicatedFieldNumber">
            <summary>Field number for the "num_replicated" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LegacyDurabilitySpec.NumPersistedFieldNumber">
            <summary>Field number for the "num_persisted" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutationToken.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutationToken.VbucketIdFieldNumber">
            <summary>Field number for the "vbucket_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutationToken.VbucketUuidFieldNumber">
            <summary>Field number for the "vbucket_uuid" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutationToken.SeqNoFieldNumber">
            <summary>Field number for the "seq_no" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetRequest.ProjectFieldNumber">
            <summary>Field number for the "project" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetResponse.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetResponse.ContentFlagsFieldNumber">
            <summary>Field number for the "content_flags" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetResponse.ExpiryFieldNumber">
            <summary>Field number for the "expiry" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndTouchRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndTouchRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndTouchRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndTouchRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndTouchRequest.ExpiryTimeFieldNumber">
            <summary>Field number for the "expiry_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndTouchRequest.ExpirySecsFieldNumber">
            <summary>Field number for the "expiry_secs" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.GetAndTouchRequest.ExpiryOneofCase">
            <summary>Enum of possible cases for the "expiry" oneof.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndTouchResponse.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndTouchResponse.ContentFlagsFieldNumber">
            <summary>Field number for the "content_flags" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndTouchResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndTouchResponse.ExpiryFieldNumber">
            <summary>Field number for the "expiry" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndLockRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndLockRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndLockRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndLockRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndLockRequest.LockTimeFieldNumber">
            <summary>Field number for the "lock_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndLockResponse.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndLockResponse.ContentFlagsFieldNumber">
            <summary>Field number for the "content_flags" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndLockResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAndLockResponse.ExpiryFieldNumber">
            <summary>Field number for the "expiry" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UnlockRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UnlockRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UnlockRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UnlockRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UnlockRequest.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.TouchRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.TouchRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.TouchRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.TouchRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.TouchRequest.ExpiryTimeFieldNumber">
            <summary>Field number for the "expiry_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.TouchRequest.ExpirySecsFieldNumber">
            <summary>Field number for the "expiry_secs" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.TouchRequest.ExpiryOneofCase">
            <summary>Enum of possible cases for the "expiry" oneof.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.TouchResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.TouchResponse.MutationTokenFieldNumber">
            <summary>Field number for the "mutation_token" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ExistsRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ExistsRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ExistsRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ExistsRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ExistsResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ExistsResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.InsertRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.InsertRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.InsertRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.InsertRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.InsertRequest.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.InsertRequest.ContentFlagsFieldNumber">
            <summary>Field number for the "content_flags" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.InsertRequest.ExpiryTimeFieldNumber">
            <summary>Field number for the "expiry_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.InsertRequest.ExpirySecsFieldNumber">
            <summary>Field number for the "expiry_secs" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.InsertRequest.DurabilityLevelFieldNumber">
            <summary>Field number for the "durability_level" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.InsertRequest.HasDurabilityLevel">
            <summary>Gets whether the "durability_level" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.InsertRequest.ClearDurabilityLevel">
            <summary>Clears the value of the "durability_level" field</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.InsertRequest.ExpiryOneofCase">
            <summary>Enum of possible cases for the "expiry" oneof.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.InsertResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.InsertResponse.MutationTokenFieldNumber">
            <summary>Field number for the "mutation_token" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UpsertRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UpsertRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UpsertRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UpsertRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UpsertRequest.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UpsertRequest.ContentFlagsFieldNumber">
            <summary>Field number for the "content_flags" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UpsertRequest.ExpiryTimeFieldNumber">
            <summary>Field number for the "expiry_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UpsertRequest.ExpirySecsFieldNumber">
            <summary>Field number for the "expiry_secs" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UpsertRequest.PreserveExpiryOnExistingFieldNumber">
            <summary>Field number for the "preserve_expiry_on_existing" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.UpsertRequest.HasPreserveExpiryOnExisting">
            <summary>Gets whether the "preserve_expiry_on_existing" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.UpsertRequest.ClearPreserveExpiryOnExisting">
            <summary>Clears the value of the "preserve_expiry_on_existing" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UpsertRequest.DurabilityLevelFieldNumber">
            <summary>Field number for the "durability_level" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.UpsertRequest.HasDurabilityLevel">
            <summary>Gets whether the "durability_level" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.UpsertRequest.ClearDurabilityLevel">
            <summary>Clears the value of the "durability_level" field</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.UpsertRequest.ExpiryOneofCase">
            <summary>Enum of possible cases for the "expiry" oneof.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UpsertResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.UpsertResponse.MutationTokenFieldNumber">
            <summary>Field number for the "mutation_token" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ReplaceRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ReplaceRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ReplaceRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ReplaceRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ReplaceRequest.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ReplaceRequest.ContentFlagsFieldNumber">
            <summary>Field number for the "content_flags" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ReplaceRequest.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.ReplaceRequest.HasCas">
            <summary>Gets whether the "cas" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.ReplaceRequest.ClearCas">
            <summary>Clears the value of the "cas" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ReplaceRequest.ExpiryTimeFieldNumber">
            <summary>Field number for the "expiry_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ReplaceRequest.ExpirySecsFieldNumber">
            <summary>Field number for the "expiry_secs" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ReplaceRequest.DurabilityLevelFieldNumber">
            <summary>Field number for the "durability_level" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.ReplaceRequest.HasDurabilityLevel">
            <summary>Gets whether the "durability_level" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.ReplaceRequest.ClearDurabilityLevel">
            <summary>Clears the value of the "durability_level" field</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.ReplaceRequest.ExpiryOneofCase">
            <summary>Enum of possible cases for the "expiry" oneof.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ReplaceResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.ReplaceResponse.MutationTokenFieldNumber">
            <summary>Field number for the "mutation_token" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.RemoveRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.RemoveRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.RemoveRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.RemoveRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.RemoveRequest.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.RemoveRequest.HasCas">
            <summary>Gets whether the "cas" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.RemoveRequest.ClearCas">
            <summary>Clears the value of the "cas" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.RemoveRequest.DurabilityLevelFieldNumber">
            <summary>Field number for the "durability_level" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.RemoveRequest.HasDurabilityLevel">
            <summary>Gets whether the "durability_level" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.RemoveRequest.ClearDurabilityLevel">
            <summary>Clears the value of the "durability_level" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.RemoveResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.RemoveResponse.MutationTokenFieldNumber">
            <summary>Field number for the "mutation_token" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.IncrementRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.IncrementRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.IncrementRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.IncrementRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.IncrementRequest.DeltaFieldNumber">
            <summary>Field number for the "delta" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.IncrementRequest.ExpiryTimeFieldNumber">
            <summary>Field number for the "expiry_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.IncrementRequest.ExpirySecsFieldNumber">
            <summary>Field number for the "expiry_secs" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.IncrementRequest.InitialFieldNumber">
            <summary>Field number for the "initial" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.IncrementRequest.HasInitial">
            <summary>Gets whether the "initial" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.IncrementRequest.ClearInitial">
            <summary>Clears the value of the "initial" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.IncrementRequest.DurabilityLevelFieldNumber">
            <summary>Field number for the "durability_level" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.IncrementRequest.HasDurabilityLevel">
            <summary>Gets whether the "durability_level" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.IncrementRequest.ClearDurabilityLevel">
            <summary>Clears the value of the "durability_level" field</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.IncrementRequest.ExpiryOneofCase">
            <summary>Enum of possible cases for the "expiry" oneof.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.IncrementResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.IncrementResponse.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.IncrementResponse.MutationTokenFieldNumber">
            <summary>Field number for the "mutation_token" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.DecrementRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.DecrementRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.DecrementRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.DecrementRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.DecrementRequest.DeltaFieldNumber">
            <summary>Field number for the "delta" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.DecrementRequest.ExpiryTimeFieldNumber">
            <summary>Field number for the "expiry_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.DecrementRequest.ExpirySecsFieldNumber">
            <summary>Field number for the "expiry_secs" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.DecrementRequest.InitialFieldNumber">
            <summary>Field number for the "initial" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.DecrementRequest.HasInitial">
            <summary>Gets whether the "initial" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.DecrementRequest.ClearInitial">
            <summary>Clears the value of the "initial" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.DecrementRequest.DurabilityLevelFieldNumber">
            <summary>Field number for the "durability_level" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.DecrementRequest.HasDurabilityLevel">
            <summary>Gets whether the "durability_level" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.DecrementRequest.ClearDurabilityLevel">
            <summary>Clears the value of the "durability_level" field</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.DecrementRequest.ExpiryOneofCase">
            <summary>Enum of possible cases for the "expiry" oneof.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.DecrementResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.DecrementResponse.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.DecrementResponse.MutationTokenFieldNumber">
            <summary>Field number for the "mutation_token" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.AppendRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.AppendRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.AppendRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.AppendRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.AppendRequest.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.AppendRequest.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.AppendRequest.HasCas">
            <summary>Gets whether the "cas" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.AppendRequest.ClearCas">
            <summary>Clears the value of the "cas" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.AppendRequest.DurabilityLevelFieldNumber">
            <summary>Field number for the "durability_level" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.AppendRequest.HasDurabilityLevel">
            <summary>Gets whether the "durability_level" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.AppendRequest.ClearDurabilityLevel">
            <summary>Clears the value of the "durability_level" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.AppendResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.AppendResponse.MutationTokenFieldNumber">
            <summary>Field number for the "mutation_token" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.PrependRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.PrependRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.PrependRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.PrependRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.PrependRequest.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.PrependRequest.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.PrependRequest.HasCas">
            <summary>Gets whether the "cas" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.PrependRequest.ClearCas">
            <summary>Clears the value of the "cas" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.PrependRequest.DurabilityLevelFieldNumber">
            <summary>Field number for the "durability_level" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.PrependRequest.HasDurabilityLevel">
            <summary>Gets whether the "durability_level" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.PrependRequest.ClearDurabilityLevel">
            <summary>Clears the value of the "durability_level" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.PrependResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.PrependResponse.MutationTokenFieldNumber">
            <summary>Field number for the "mutation_token" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInRequest.SpecsFieldNumber">
            <summary>Field number for the "specs" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInRequest.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.LookupInRequest.Types">
            <summary>Container for nested types declared in the LookupInRequest message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInRequest.Types.Spec.OperationFieldNumber">
            <summary>Field number for the "operation" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInRequest.Types.Spec.PathFieldNumber">
            <summary>Field number for the "path" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInRequest.Types.Spec.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.LookupInRequest.Types.Spec.Types">
            <summary>Container for nested types declared in the Spec message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInRequest.Types.Spec.Types.Flags.XattrFieldNumber">
            <summary>Field number for the "xattr" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.LookupInRequest.Types.Spec.Types.Flags.HasXattr">
            <summary>Gets whether the "xattr" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.LookupInRequest.Types.Spec.Types.Flags.ClearXattr">
            <summary>Clears the value of the "xattr" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInRequest.Types.Flags.AccessDeletedFieldNumber">
            <summary>Field number for the "access_deleted" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.LookupInRequest.Types.Flags.HasAccessDeleted">
            <summary>Gets whether the "access_deleted" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.LookupInRequest.Types.Flags.ClearAccessDeleted">
            <summary>Clears the value of the "access_deleted" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInResponse.SpecsFieldNumber">
            <summary>Field number for the "specs" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.LookupInResponse.Types">
            <summary>Container for nested types declared in the LookupInResponse message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInResponse.Types.Spec.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.LookupInResponse.Types.Spec.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.SpecsFieldNumber">
            <summary>Field number for the "specs" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.StoreSemanticFieldNumber">
            <summary>Field number for the "store_semantic" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.MutateInRequest.HasStoreSemantic">
            <summary>Gets whether the "store_semantic" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.MutateInRequest.ClearStoreSemantic">
            <summary>Clears the value of the "store_semantic" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.DurabilityLevelFieldNumber">
            <summary>Field number for the "durability_level" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.MutateInRequest.HasDurabilityLevel">
            <summary>Gets whether the "durability_level" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.MutateInRequest.ClearDurabilityLevel">
            <summary>Clears the value of the "durability_level" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.MutateInRequest.HasCas">
            <summary>Gets whether the "cas" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.MutateInRequest.ClearCas">
            <summary>Clears the value of the "cas" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.ExpiryTimeFieldNumber">
            <summary>Field number for the "expiry_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.ExpirySecsFieldNumber">
            <summary>Field number for the "expiry_secs" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.MutateInRequest.ExpiryOneofCase">
            <summary>Enum of possible cases for the "expiry" oneof.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.MutateInRequest.Types">
            <summary>Container for nested types declared in the MutateInRequest message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Spec.OperationFieldNumber">
            <summary>Field number for the "operation" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Spec.PathFieldNumber">
            <summary>Field number for the "path" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Spec.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Spec.FlagsFieldNumber">
            <summary>Field number for the "flags" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Spec.Types">
            <summary>Container for nested types declared in the Spec message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Spec.Types.Flags.CreatePathFieldNumber">
            <summary>Field number for the "create_path" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Spec.Types.Flags.HasCreatePath">
            <summary>Gets whether the "create_path" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Spec.Types.Flags.ClearCreatePath">
            <summary>Clears the value of the "create_path" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Spec.Types.Flags.XattrFieldNumber">
            <summary>Field number for the "xattr" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Spec.Types.Flags.HasXattr">
            <summary>Gets whether the "xattr" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Spec.Types.Flags.ClearXattr">
            <summary>Clears the value of the "xattr" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Flags.AccessDeletedFieldNumber">
            <summary>Field number for the "access_deleted" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Flags.HasAccessDeleted">
            <summary>Gets whether the "access_deleted" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.MutateInRequest.Types.Flags.ClearAccessDeleted">
            <summary>Clears the value of the "access_deleted" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInResponse.SpecsFieldNumber">
            <summary>Field number for the "specs" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInResponse.MutationTokenFieldNumber">
            <summary>Field number for the "mutation_token" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.MutateInResponse.Types">
            <summary>Container for nested types declared in the MutateInResponse message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.MutateInResponse.Types.Spec.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.MutateInResponse.Types.Spec.HasContent">
            <summary>Gets whether the "content" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.MutateInResponse.Types.Spec.ClearContent">
            <summary>Clears the value of the "content" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAllReplicasRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAllReplicasRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAllReplicasRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAllReplicasRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAllReplicasResponse.IsReplicaFieldNumber">
            <summary>Field number for the "is_replica" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAllReplicasResponse.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAllReplicasResponse.ContentFlagsFieldNumber">
            <summary>Field number for the "content_flags" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.KV.V1.GetAllReplicasResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.KV.V1.KvService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Couchbase.Protostellar.KV.V1.KvService.KvServiceClient">
            <summary>Client for KvService</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.KvService.KvServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for KvService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.KvService.KvServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for KvService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.KvService.KvServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.KvService.KvServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Couchbase.Protostellar.KV.V1.KvService.KvServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Query.V1.QueryReflection">
            <summary>Holder for reflection information generated from couchbase/query/v1/query.proto</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryReflection.Descriptor">
            <summary>File descriptor for couchbase/query/v1/query.proto</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.StatementFieldNumber">
            <summary>Field number for the "statement" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.ReadOnlyFieldNumber">
            <summary>Field number for the "read_only" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.HasReadOnly">
            <summary>Gets whether the "read_only" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.ClearReadOnly">
            <summary>Clears the value of the "read_only" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.PreparedFieldNumber">
            <summary>Field number for the "prepared" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.HasPrepared">
            <summary>Gets whether the "prepared" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.ClearPrepared">
            <summary>Clears the value of the "prepared" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.TuningOptionsFieldNumber">
            <summary>Field number for the "tuning_options" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.ClientContextIdFieldNumber">
            <summary>Field number for the "client_context_id" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.HasClientContextId">
            <summary>Gets whether the "client_context_id" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.ClearClientContextId">
            <summary>Clears the value of the "client_context_id" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.ScanConsistencyFieldNumber">
            <summary>Field number for the "scan_consistency" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.HasScanConsistency">
            <summary>Gets whether the "scan_consistency" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.ClearScanConsistency">
            <summary>Clears the value of the "scan_consistency" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.PositionalParametersFieldNumber">
            <summary>Field number for the "positional_parameters" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.NamedParametersFieldNumber">
            <summary>Field number for the "named_parameters" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.FlexIndexFieldNumber">
            <summary>Field number for the "flex_index" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.HasFlexIndex">
            <summary>Gets whether the "flex_index" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.ClearFlexIndex">
            <summary>Clears the value of the "flex_index" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.PreserveExpiryFieldNumber">
            <summary>Field number for the "preserve_expiry" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.HasPreserveExpiry">
            <summary>Gets whether the "preserve_expiry" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.ClearPreserveExpiry">
            <summary>Clears the value of the "preserve_expiry" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.ConsistentWithFieldNumber">
            <summary>Field number for the "consistent_with" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.ProfileModeFieldNumber">
            <summary>Field number for the "profile_mode" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.HasProfileMode">
            <summary>Gets whether the "profile_mode" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.ClearProfileMode">
            <summary>Clears the value of the "profile_mode" field</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Query.V1.QueryRequest.Types">
            <summary>Container for nested types declared in the QueryRequest message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.MaxParallelismFieldNumber">
            <summary>Field number for the "max_parallelism" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.HasMaxParallelism">
            <summary>Gets whether the "max_parallelism" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.ClearMaxParallelism">
            <summary>Clears the value of the "max_parallelism" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.PipelineBatchFieldNumber">
            <summary>Field number for the "pipeline_batch" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.HasPipelineBatch">
            <summary>Gets whether the "pipeline_batch" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.ClearPipelineBatch">
            <summary>Clears the value of the "pipeline_batch" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.PipelineCapFieldNumber">
            <summary>Field number for the "pipeline_cap" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.HasPipelineCap">
            <summary>Gets whether the "pipeline_cap" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.ClearPipelineCap">
            <summary>Clears the value of the "pipeline_cap" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.ScanWaitFieldNumber">
            <summary>Field number for the "scan_wait" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.ScanCapFieldNumber">
            <summary>Field number for the "scan_cap" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.HasScanCap">
            <summary>Gets whether the "scan_cap" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.ClearScanCap">
            <summary>Clears the value of the "scan_cap" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.DisableMetricsFieldNumber">
            <summary>Field number for the "disable_metrics" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.HasDisableMetrics">
            <summary>Gets whether the "disable_metrics" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryRequest.Types.TuningOptions.ClearDisableMetrics">
            <summary>Clears the value of the "disable_metrics" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.RowsFieldNumber">
            <summary>Field number for the "rows" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.MetaDataFieldNumber">
            <summary>Field number for the "meta_data" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Query.V1.QueryResponse.Types">
            <summary>Container for nested types declared in the QueryResponse message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.RequestIdFieldNumber">
            <summary>Field number for the "request_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.ClientContextIdFieldNumber">
            <summary>Field number for the "client_context_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.MetricsFieldNumber">
            <summary>Field number for the "metrics" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.WarningsFieldNumber">
            <summary>Field number for the "warnings" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.ProfileFieldNumber">
            <summary>Field number for the "profile" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.HasProfile">
            <summary>Gets whether the "profile" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.ClearProfile">
            <summary>Clears the value of the "profile" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.SignatureFieldNumber">
            <summary>Field number for the "signature" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.Types">
            <summary>Container for nested types declared in the MetaData message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.Types.Warning.CodeFieldNumber">
            <summary>Field number for the "code" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.Types.Warning.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.Types.Metrics.ElapsedTimeFieldNumber">
            <summary>Field number for the "elapsed_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.Types.Metrics.ExecutionTimeFieldNumber">
            <summary>Field number for the "execution_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.Types.Metrics.ResultCountFieldNumber">
            <summary>Field number for the "result_count" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.Types.Metrics.ResultSizeFieldNumber">
            <summary>Field number for the "result_size" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.Types.Metrics.MutationCountFieldNumber">
            <summary>Field number for the "mutation_count" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.Types.Metrics.SortCountFieldNumber">
            <summary>Field number for the "sort_count" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.Types.Metrics.ErrorCountFieldNumber">
            <summary>Field number for the "error_count" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Query.V1.QueryResponse.Types.MetaData.Types.Metrics.WarningCountFieldNumber">
            <summary>Field number for the "warning_count" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Query.V1.QueryService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Query.V1.QueryService.QueryServiceClient">
            <summary>Client for QueryService</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryService.QueryServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for QueryService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryService.QueryServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for QueryService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryService.QueryServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryService.QueryServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Query.V1.QueryService.QueryServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Routing.V1.RoutingReflection">
            <summary>Holder for reflection information generated from couchbase/routing/v1/routing.proto</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Routing.V1.RoutingReflection.Descriptor">
            <summary>File descriptor for couchbase/routing/v1/routing.proto</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.RoutingEndpoint.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.RoutingEndpoint.ServerGroupFieldNumber">
            <summary>Field number for the "server_group" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.RoutingEndpoint.AddressFieldNumber">
            <summary>Field number for the "address" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.DataRoutingEndpoint.EndpointIdxFieldNumber">
            <summary>Field number for the "endpoint_idx" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.DataRoutingEndpoint.LocalVbucketsFieldNumber">
            <summary>Field number for the "local_vbuckets" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.DataRoutingEndpoint.GroupVbucketsFieldNumber">
            <summary>Field number for the "group_vbuckets" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.VbucketDataRoutingStrategy.EndpointsFieldNumber">
            <summary>Field number for the "endpoints" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.VbucketDataRoutingStrategy.NumVbucketsFieldNumber">
            <summary>Field number for the "num_vbuckets" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.QueryRoutingEndpoint.EndpointIdxFieldNumber">
            <summary>Field number for the "endpoint_idx" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.QueryRouting.EndpointsFieldNumber">
            <summary>Field number for the "endpoints" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.ViewsRoutingEndpoint.EndpointIdxFieldNumber">
            <summary>Field number for the "endpoint_idx" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.ViewsRouting.EndpointsFieldNumber">
            <summary>Field number for the "endpoints" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.WatchRoutingRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Routing.V1.WatchRoutingRequest.BucketName">
            <summary>
            Specifies the specific bucket that will be accessed.
            </summary>
        </member>
        <member name="P:Couchbase.Protostellar.Routing.V1.WatchRoutingRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Routing.V1.WatchRoutingRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.WatchRoutingResponse.RevisionFieldNumber">
            <summary>Field number for the "revision" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Routing.V1.WatchRoutingResponse.Revision">
            <summary>
            Represents the revision of this configuration.  The revision not being
            included indicates that this configuration is not versioned.  Configuration
            revisions can only be compared for responses from the same request values
            (different buckets may have uniquely incremented revisions).  Revision
            comparison is done in order of the revision data, for instance we may have
            [major, minor, patch].  Revisions may be any number of values long, and any
            missing values should be assumed as 0 (except in the completely empty case,
            where it is considered unused).
            </summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.WatchRoutingResponse.EndpointsFieldNumber">
            <summary>Field number for the "endpoints" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Routing.V1.WatchRoutingResponse.Endpoints">
            <summary>
            Represents a complete list of all endpoints that are available for this
            cluster.
            </summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.WatchRoutingResponse.VbucketDataRoutingFieldNumber">
            <summary>Field number for the "vbucket_data_routing" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.WatchRoutingResponse.QueryRoutingFieldNumber">
            <summary>Field number for the "query_routing" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Routing.V1.WatchRoutingResponse.ViewsRoutingFieldNumber">
            <summary>Field number for the "views_routing" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Routing.V1.WatchRoutingResponse.DataRoutingOneofCase">
            <summary>Enum of possible cases for the "data_routing" oneof.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Routing.V1.RoutingService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Routing.V1.RoutingService.RoutingServiceClient">
            <summary>Client for RoutingService</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Routing.V1.RoutingService.RoutingServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for RoutingService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Routing.V1.RoutingService.RoutingServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for RoutingService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Routing.V1.RoutingService.RoutingServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Routing.V1.RoutingService.RoutingServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Routing.V1.RoutingService.RoutingServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Search.V1.SearchReflection">
            <summary>Holder for reflection information generated from couchbase/search/v1/search.proto</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.SearchReflection.Descriptor">
            <summary>File descriptor for couchbase/search/v1/search.proto</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.BooleanFieldQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.BooleanFieldQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.BooleanFieldQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.BooleanFieldQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.BooleanFieldQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.BooleanFieldQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.BooleanFieldQuery.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.BooleanQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.BooleanQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.BooleanQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.BooleanQuery.MustFieldNumber">
            <summary>Field number for the "must" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.BooleanQuery.MustNotFieldNumber">
            <summary>Field number for the "must_not" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.BooleanQuery.ShouldFieldNumber">
            <summary>Field number for the "should" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.ConjunctionQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.ConjunctionQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.ConjunctionQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.ConjunctionQuery.QueriesFieldNumber">
            <summary>Field number for the "queries" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DateRangeQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.DateRangeQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.DateRangeQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DateRangeQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.DateRangeQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.DateRangeQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DateRangeQuery.DateTimeParserFieldNumber">
            <summary>Field number for the "date_time_parser" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.DateRangeQuery.HasDateTimeParser">
            <summary>Gets whether the "date_time_parser" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.DateRangeQuery.ClearDateTimeParser">
            <summary>Clears the value of the "date_time_parser" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DateRangeQuery.StartDateFieldNumber">
            <summary>Field number for the "start_date" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.DateRangeQuery.HasStartDate">
            <summary>Gets whether the "start_date" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.DateRangeQuery.ClearStartDate">
            <summary>Clears the value of the "start_date" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DateRangeQuery.EndDateFieldNumber">
            <summary>Field number for the "end_date" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.DateRangeQuery.HasEndDate">
            <summary>Gets whether the "end_date" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.DateRangeQuery.ClearEndDate">
            <summary>Clears the value of the "end_date" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DisjunctionQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.DisjunctionQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.DisjunctionQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DisjunctionQuery.QueriesFieldNumber">
            <summary>Field number for the "queries" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DisjunctionQuery.MinimumFieldNumber">
            <summary>Field number for the "minimum" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.DisjunctionQuery.HasMinimum">
            <summary>Gets whether the "minimum" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.DisjunctionQuery.ClearMinimum">
            <summary>Clears the value of the "minimum" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DocIdQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.DocIdQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.DocIdQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DocIdQuery.IdsFieldNumber">
            <summary>Field number for the "ids" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.LatLng.LatitudeFieldNumber">
            <summary>Field number for the "latitude" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.LatLng.LongitudeFieldNumber">
            <summary>Field number for the "longitude" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoBoundingBoxQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.GeoBoundingBoxQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.GeoBoundingBoxQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoBoundingBoxQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.GeoBoundingBoxQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.GeoBoundingBoxQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoBoundingBoxQuery.TopLeftFieldNumber">
            <summary>Field number for the "top_left" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoBoundingBoxQuery.BottomRightFieldNumber">
            <summary>Field number for the "bottom_right" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoDistanceQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.GeoDistanceQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.GeoDistanceQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoDistanceQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.GeoDistanceQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.GeoDistanceQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoDistanceQuery.CenterFieldNumber">
            <summary>Field number for the "center" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoDistanceQuery.DistanceFieldNumber">
            <summary>Field number for the "distance" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoPolygonQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.GeoPolygonQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.GeoPolygonQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoPolygonQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.GeoPolygonQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.GeoPolygonQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoPolygonQuery.VerticesFieldNumber">
            <summary>Field number for the "vertices" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.MatchPhraseQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.MatchPhraseQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.MatchPhraseQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.MatchPhraseQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.MatchPhraseQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.MatchPhraseQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.MatchPhraseQuery.PhraseFieldNumber">
            <summary>Field number for the "phrase" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.MatchPhraseQuery.AnalyzerFieldNumber">
            <summary>Field number for the "analyzer" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.MatchPhraseQuery.HasAnalyzer">
            <summary>Gets whether the "analyzer" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.MatchPhraseQuery.ClearAnalyzer">
            <summary>Clears the value of the "analyzer" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.MatchQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.MatchQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.MatchQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.MatchQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.MatchQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.MatchQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.MatchQuery.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.MatchQuery.AnalyzerFieldNumber">
            <summary>Field number for the "analyzer" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.MatchQuery.HasAnalyzer">
            <summary>Gets whether the "analyzer" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.MatchQuery.ClearAnalyzer">
            <summary>Clears the value of the "analyzer" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.MatchQuery.FuzzinessFieldNumber">
            <summary>Field number for the "fuzziness" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.MatchQuery.HasFuzziness">
            <summary>Gets whether the "fuzziness" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.MatchQuery.ClearFuzziness">
            <summary>Clears the value of the "fuzziness" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.MatchQuery.OperatorFieldNumber">
            <summary>Field number for the "operator" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.MatchQuery.HasOperator">
            <summary>Gets whether the "operator" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.MatchQuery.ClearOperator">
            <summary>Clears the value of the "operator" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.MatchQuery.PrefixLengthFieldNumber">
            <summary>Field number for the "prefix_length" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.MatchQuery.HasPrefixLength">
            <summary>Gets whether the "prefix_length" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.MatchQuery.ClearPrefixLength">
            <summary>Clears the value of the "prefix_length" field</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Search.V1.MatchQuery.Types">
            <summary>Container for nested types declared in the MatchQuery message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.NumericRangeQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.NumericRangeQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.NumericRangeQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.NumericRangeQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.NumericRangeQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.NumericRangeQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.NumericRangeQuery.MinFieldNumber">
            <summary>Field number for the "min" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.NumericRangeQuery.HasMin">
            <summary>Gets whether the "min" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.NumericRangeQuery.ClearMin">
            <summary>Clears the value of the "min" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.NumericRangeQuery.MaxFieldNumber">
            <summary>Field number for the "max" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.NumericRangeQuery.HasMax">
            <summary>Gets whether the "max" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.NumericRangeQuery.ClearMax">
            <summary>Clears the value of the "max" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.NumericRangeQuery.InclusiveMinFieldNumber">
            <summary>Field number for the "inclusive_min" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.NumericRangeQuery.HasInclusiveMin">
            <summary>Gets whether the "inclusive_min" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.NumericRangeQuery.ClearInclusiveMin">
            <summary>Clears the value of the "inclusive_min" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.NumericRangeQuery.InclusiveMaxFieldNumber">
            <summary>Field number for the "inclusive_max" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.NumericRangeQuery.HasInclusiveMax">
            <summary>Gets whether the "inclusive_max" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.NumericRangeQuery.ClearInclusiveMax">
            <summary>Clears the value of the "inclusive_max" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.PhraseQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.PhraseQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.PhraseQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.PhraseQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.PhraseQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.PhraseQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.PhraseQuery.TermsFieldNumber">
            <summary>Field number for the "terms" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.PrefixQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.PrefixQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.PrefixQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.PrefixQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.PrefixQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.PrefixQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.PrefixQuery.PrefixFieldNumber">
            <summary>Field number for the "prefix" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.QueryStringQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.QueryStringQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.QueryStringQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.QueryStringQuery.QueryStringFieldNumber">
            <summary>Field number for the "query_string" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.RegexpQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.RegexpQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.RegexpQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.RegexpQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.RegexpQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.RegexpQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.RegexpQuery.RegexpFieldNumber">
            <summary>Field number for the "regexp" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.TermQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.TermQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.TermQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.TermQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.TermQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.TermQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.TermQuery.TermFieldNumber">
            <summary>Field number for the "term" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.TermQuery.FuzzinessFieldNumber">
            <summary>Field number for the "fuzziness" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.TermQuery.HasFuzziness">
            <summary>Gets whether the "fuzziness" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.TermQuery.ClearFuzziness">
            <summary>Clears the value of the "fuzziness" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.TermQuery.PrefixLengthFieldNumber">
            <summary>Field number for the "prefix_length" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.TermQuery.HasPrefixLength">
            <summary>Gets whether the "prefix_length" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.TermQuery.ClearPrefixLength">
            <summary>Clears the value of the "prefix_length" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.TermRangeQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.TermRangeQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.TermRangeQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.TermRangeQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.TermRangeQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.TermRangeQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.TermRangeQuery.MinFieldNumber">
            <summary>Field number for the "min" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.TermRangeQuery.HasMin">
            <summary>Gets whether the "min" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.TermRangeQuery.ClearMin">
            <summary>Clears the value of the "min" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.TermRangeQuery.MaxFieldNumber">
            <summary>Field number for the "max" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.TermRangeQuery.HasMax">
            <summary>Gets whether the "max" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.TermRangeQuery.ClearMax">
            <summary>Clears the value of the "max" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.TermRangeQuery.InclusiveMinFieldNumber">
            <summary>Field number for the "inclusive_min" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.TermRangeQuery.HasInclusiveMin">
            <summary>Gets whether the "inclusive_min" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.TermRangeQuery.ClearInclusiveMin">
            <summary>Clears the value of the "inclusive_min" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.TermRangeQuery.InclusiveMaxFieldNumber">
            <summary>Field number for the "inclusive_max" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.TermRangeQuery.HasInclusiveMax">
            <summary>Gets whether the "inclusive_max" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.TermRangeQuery.ClearInclusiveMax">
            <summary>Clears the value of the "inclusive_max" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.WildcardQuery.BoostFieldNumber">
            <summary>Field number for the "boost" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.WildcardQuery.HasBoost">
            <summary>Gets whether the "boost" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.WildcardQuery.ClearBoost">
            <summary>Clears the value of the "boost" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.WildcardQuery.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.WildcardQuery.HasField">
            <summary>Gets whether the "field" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.WildcardQuery.ClearField">
            <summary>Clears the value of the "field" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.WildcardQuery.WildcardFieldNumber">
            <summary>Field number for the "wildcard" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.BooleanFieldQueryFieldNumber">
            <summary>Field number for the "boolean_field_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.BooleanQueryFieldNumber">
            <summary>Field number for the "boolean_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.ConjunctionQueryFieldNumber">
            <summary>Field number for the "conjunction_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.DateRangeQueryFieldNumber">
            <summary>Field number for the "date_range_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.DisjunctionQueryFieldNumber">
            <summary>Field number for the "disjunction_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.DocIdQueryFieldNumber">
            <summary>Field number for the "doc_id_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.GeoBoundingBoxQueryFieldNumber">
            <summary>Field number for the "geo_bounding_box_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.GeoDistanceQueryFieldNumber">
            <summary>Field number for the "geo_distance_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.GeoPolygonQueryFieldNumber">
            <summary>Field number for the "geo_polygon_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.MatchAllQueryFieldNumber">
            <summary>Field number for the "match_all_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.MatchNoneQueryFieldNumber">
            <summary>Field number for the "match_none_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.MatchPhraseQueryFieldNumber">
            <summary>Field number for the "match_phrase_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.MatchQueryFieldNumber">
            <summary>Field number for the "match_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.NumericRangeQueryFieldNumber">
            <summary>Field number for the "numeric_range_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.PhraseQueryFieldNumber">
            <summary>Field number for the "phrase_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.PrefixQueryFieldNumber">
            <summary>Field number for the "prefix_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.QueryStringQueryFieldNumber">
            <summary>Field number for the "query_string_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.RegexpQueryFieldNumber">
            <summary>Field number for the "regexp_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.TermQueryFieldNumber">
            <summary>Field number for the "term_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.TermRangeQueryFieldNumber">
            <summary>Field number for the "term_range_query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Query.WildcardQueryFieldNumber">
            <summary>Field number for the "wildcard_query" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Search.V1.Query.QueryOneofCase">
            <summary>Enum of possible cases for the "query" oneof.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.FieldSorting.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.FieldSorting.DescendingFieldNumber">
            <summary>Field number for the "descending" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.FieldSorting.MissingFieldNumber">
            <summary>Field number for the "missing" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.FieldSorting.ModeFieldNumber">
            <summary>Field number for the "mode" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.FieldSorting.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoDistanceSorting.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoDistanceSorting.DescendingFieldNumber">
            <summary>Field number for the "descending" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoDistanceSorting.CenterFieldNumber">
            <summary>Field number for the "center" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.GeoDistanceSorting.UnitFieldNumber">
            <summary>Field number for the "unit" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.IdSorting.DescendingFieldNumber">
            <summary>Field number for the "descending" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.ScoreSorting.DescendingFieldNumber">
            <summary>Field number for the "descending" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Sorting.FieldSortingFieldNumber">
            <summary>Field number for the "field_sorting" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Sorting.GeoDistanceSortingFieldNumber">
            <summary>Field number for the "geo_distance_sorting" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Sorting.IdSortingFieldNumber">
            <summary>Field number for the "id_sorting" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Sorting.ScoreSortingFieldNumber">
            <summary>Field number for the "score_sorting" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Search.V1.Sorting.SortingOneofCase">
            <summary>Enum of possible cases for the "sorting" oneof.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DateRange.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DateRange.StartFieldNumber">
            <summary>Field number for the "start" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.DateRange.HasStart">
            <summary>Gets whether the "start" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.DateRange.ClearStart">
            <summary>Clears the value of the "start" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DateRange.EndFieldNumber">
            <summary>Field number for the "end" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.DateRange.HasEnd">
            <summary>Gets whether the "end" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.DateRange.ClearEnd">
            <summary>Clears the value of the "end" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DateRangeFacet.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DateRangeFacet.SizeFieldNumber">
            <summary>Field number for the "size" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.DateRangeFacet.DateRangesFieldNumber">
            <summary>Field number for the "date_ranges" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.NumericRange.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.NumericRange.MinFieldNumber">
            <summary>Field number for the "min" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.NumericRange.HasMin">
            <summary>Gets whether the "min" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.NumericRange.ClearMin">
            <summary>Clears the value of the "min" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.NumericRange.MaxFieldNumber">
            <summary>Field number for the "max" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.NumericRange.HasMax">
            <summary>Gets whether the "max" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.NumericRange.ClearMax">
            <summary>Clears the value of the "max" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.NumericRangeFacet.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.NumericRangeFacet.SizeFieldNumber">
            <summary>Field number for the "size" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.NumericRangeFacet.NumericRangesFieldNumber">
            <summary>Field number for the "numeric_ranges" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.TermFacet.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.TermFacet.SizeFieldNumber">
            <summary>Field number for the "size" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Facet.DateRangeFacetFieldNumber">
            <summary>Field number for the "date_range_facet" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Facet.NumericRangeFacetFieldNumber">
            <summary>Field number for the "numeric_range_facet" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.Facet.TermFacetFieldNumber">
            <summary>Field number for the "term_facet" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Search.V1.Facet.FacetOneofCase">
            <summary>Enum of possible cases for the "facet" oneof.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.IndexNameFieldNumber">
            <summary>Field number for the "index_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.QueryFieldNumber">
            <summary>Field number for the "query" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.ScanConsistencyFieldNumber">
            <summary>Field number for the "scan_consistency" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.LimitFieldNumber">
            <summary>Field number for the "limit" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.SkipFieldNumber">
            <summary>Field number for the "skip" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.IncludeExplanationFieldNumber">
            <summary>Field number for the "include_explanation" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.HighlightStyleFieldNumber">
            <summary>Field number for the "highlight_style" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.HighlightFieldsFieldNumber">
            <summary>Field number for the "highlight_fields" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.FieldsFieldNumber">
            <summary>Field number for the "fields" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.SortFieldNumber">
            <summary>Field number for the "sort" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.DisableScoringFieldNumber">
            <summary>Field number for the "disable_scoring" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.CollectionsFieldNumber">
            <summary>Field number for the "collections" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.IncludeLocationsFieldNumber">
            <summary>Field number for the "include_locations" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.FacetsFieldNumber">
            <summary>Field number for the "facets" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.SearchQueryRequest.HasBucketName">
            <summary>Gets whether the "bucket_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.SearchQueryRequest.ClearBucketName">
            <summary>Clears the value of the "bucket_name" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.SearchQueryRequest.HasScopeName">
            <summary>Gets whether the "scope_name" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.SearchQueryRequest.ClearScopeName">
            <summary>Clears the value of the "scope_name" field</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Search.V1.SearchQueryRequest.Types">
            <summary>Container for nested types declared in the SearchQueryRequest message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.HitsFieldNumber">
            <summary>Field number for the "hits" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.FacetsFieldNumber">
            <summary>Field number for the "facets" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.MetaDataFieldNumber">
            <summary>Field number for the "meta_data" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types">
            <summary>Container for nested types declared in the SearchQueryResponse message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.SearchQueryRow.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.SearchQueryRow.ScoreFieldNumber">
            <summary>Field number for the "score" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.SearchQueryRow.IndexFieldNumber">
            <summary>Field number for the "index" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.SearchQueryRow.ExplanationFieldNumber">
            <summary>Field number for the "explanation" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.SearchQueryRow.LocationsFieldNumber">
            <summary>Field number for the "locations" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.SearchQueryRow.FragmentsFieldNumber">
            <summary>Field number for the "fragments" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.SearchQueryRow.FieldsFieldNumber">
            <summary>Field number for the "fields" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.Location.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.Location.TermFieldNumber">
            <summary>Field number for the "term" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.Location.PositionFieldNumber">
            <summary>Field number for the "position" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.Location.StartFieldNumber">
            <summary>Field number for the "start" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.Location.EndFieldNumber">
            <summary>Field number for the "end" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.Location.ArrayPositionsFieldNumber">
            <summary>Field number for the "array_positions" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.Fragment.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.FacetResult.TermFacetFieldNumber">
            <summary>Field number for the "term_facet" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.FacetResult.DateRangeFacetFieldNumber">
            <summary>Field number for the "date_range_facet" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.FacetResult.NumericRangeFacetFieldNumber">
            <summary>Field number for the "numeric_range_facet" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.FacetResult.SearchFacetOneofCase">
            <summary>Enum of possible cases for the "search_facet" oneof.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.TermResult.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.TermResult.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.TermResult.SizeFieldNumber">
            <summary>Field number for the "size" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.TermFacetResult.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.TermFacetResult.TotalFieldNumber">
            <summary>Field number for the "total" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.TermFacetResult.MissingFieldNumber">
            <summary>Field number for the "missing" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.TermFacetResult.OtherFieldNumber">
            <summary>Field number for the "other" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.TermFacetResult.TermsFieldNumber">
            <summary>Field number for the "terms" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.DateRangeResult.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.DateRangeResult.SizeFieldNumber">
            <summary>Field number for the "size" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.DateRangeResult.StartFieldNumber">
            <summary>Field number for the "start" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.DateRangeResult.EndFieldNumber">
            <summary>Field number for the "end" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.DateRangeFacetResult.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.DateRangeFacetResult.TotalFieldNumber">
            <summary>Field number for the "total" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.DateRangeFacetResult.MissingFieldNumber">
            <summary>Field number for the "missing" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.DateRangeFacetResult.OtherFieldNumber">
            <summary>Field number for the "other" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.DateRangeFacetResult.DateRangesFieldNumber">
            <summary>Field number for the "date_ranges" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.NumericRangeResult.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.NumericRangeResult.SizeFieldNumber">
            <summary>Field number for the "size" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.NumericRangeResult.MinFieldNumber">
            <summary>Field number for the "min" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.NumericRangeResult.MaxFieldNumber">
            <summary>Field number for the "max" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.NumericRangeFacetResult.FieldFieldNumber">
            <summary>Field number for the "field" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.NumericRangeFacetResult.TotalFieldNumber">
            <summary>Field number for the "total" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.NumericRangeFacetResult.MissingFieldNumber">
            <summary>Field number for the "missing" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.NumericRangeFacetResult.OtherFieldNumber">
            <summary>Field number for the "other" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.NumericRangeFacetResult.NumericRangesFieldNumber">
            <summary>Field number for the "numeric_ranges" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.MetaData.MetricsFieldNumber">
            <summary>Field number for the "metrics" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.MetaData.ErrorsFieldNumber">
            <summary>Field number for the "errors" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.SearchMetrics.ExecutionTimeFieldNumber">
            <summary>Field number for the "execution_time" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.SearchMetrics.TotalRowsFieldNumber">
            <summary>Field number for the "total_rows" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.SearchMetrics.MaxScoreFieldNumber">
            <summary>Field number for the "max_score" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.SearchMetrics.TotalPartitionCountFieldNumber">
            <summary>Field number for the "total_partition_count" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.SearchMetrics.SuccessPartitionCountFieldNumber">
            <summary>Field number for the "success_partition_count" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Search.V1.SearchQueryResponse.Types.SearchMetrics.ErrorPartitionCountFieldNumber">
            <summary>Field number for the "error_partition_count" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Search.V1.SearchService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Search.V1.SearchService.SearchServiceClient">
            <summary>Client for SearchService</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.SearchService.SearchServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for SearchService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.SearchService.SearchServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for SearchService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.SearchService.SearchServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.SearchService.SearchServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Search.V1.SearchService.SearchServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Transactions.V1.TransactionsReflection">
            <summary>Holder for reflection information generated from couchbase/transactions/v1/transactions.proto</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Transactions.V1.TransactionsReflection.Descriptor">
            <summary>File descriptor for couchbase/transactions/v1/transactions.proto</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionBeginAttemptRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionBeginAttemptRequest.TransactionIdFieldNumber">
            <summary>Field number for the "transaction_id" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Transactions.V1.TransactionBeginAttemptRequest.HasTransactionId">
            <summary>Gets whether the "transaction_id" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Transactions.V1.TransactionBeginAttemptRequest.ClearTransactionId">
            <summary>Clears the value of the "transaction_id" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionBeginAttemptResponse.TransactionIdFieldNumber">
            <summary>Field number for the "transaction_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionBeginAttemptResponse.AttemptIdFieldNumber">
            <summary>Field number for the "attempt_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionCommitRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionCommitRequest.TransactionIdFieldNumber">
            <summary>Field number for the "transaction_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionCommitRequest.AttemptIdFieldNumber">
            <summary>Field number for the "attempt_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionRollbackRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionRollbackRequest.TransactionIdFieldNumber">
            <summary>Field number for the "transaction_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionRollbackRequest.AttemptIdFieldNumber">
            <summary>Field number for the "attempt_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionGetRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionGetRequest.TransactionIdFieldNumber">
            <summary>Field number for the "transaction_id" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Transactions.V1.TransactionGetRequest.TransactionId">
            <summary>
            transaction_id and attempt_id are optional to allow read-only transactions.
            clients are not permitted to use this functionality to optimize
            non-read-only transactions.
            </summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionGetRequest.AttemptIdFieldNumber">
            <summary>Field number for the "attempt_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionGetRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionGetRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionGetRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionGetResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionGetResponse.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionInsertRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionInsertRequest.TransactionIdFieldNumber">
            <summary>Field number for the "transaction_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionInsertRequest.AttemptIdFieldNumber">
            <summary>Field number for the "attempt_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionInsertRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionInsertRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionInsertRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionInsertRequest.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionInsertResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionReplaceRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionReplaceRequest.TransactionIdFieldNumber">
            <summary>Field number for the "transaction_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionReplaceRequest.AttemptIdFieldNumber">
            <summary>Field number for the "attempt_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionReplaceRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionReplaceRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionReplaceRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionReplaceRequest.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionReplaceRequest.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionReplaceResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionRemoveRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionRemoveRequest.TransactionIdFieldNumber">
            <summary>Field number for the "transaction_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionRemoveRequest.AttemptIdFieldNumber">
            <summary>Field number for the "attempt_id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionRemoveRequest.ScopeNameFieldNumber">
            <summary>Field number for the "scope_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionRemoveRequest.CollectionNameFieldNumber">
            <summary>Field number for the "collection_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionRemoveRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionRemoveRequest.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.Transactions.V1.TransactionRemoveResponse.CasFieldNumber">
            <summary>Field number for the "cas" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.Transactions.V1.TransactionsService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Couchbase.Protostellar.Transactions.V1.TransactionsService.TransactionsServiceClient">
            <summary>Client for TransactionsService</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Transactions.V1.TransactionsService.TransactionsServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for TransactionsService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Transactions.V1.TransactionsService.TransactionsServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for TransactionsService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Transactions.V1.TransactionsService.TransactionsServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Couchbase.Protostellar.Transactions.V1.TransactionsService.TransactionsServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Couchbase.Protostellar.Transactions.V1.TransactionsService.TransactionsServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.View.V1.ViewReflection">
            <summary>Holder for reflection information generated from couchbase/view/v1/view.proto</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewReflection.Descriptor">
            <summary>File descriptor for couchbase/view/v1/view.proto</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.BucketNameFieldNumber">
            <summary>Field number for the "bucket_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.DesignDocumentNameFieldNumber">
            <summary>Field number for the "design_document_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.ViewNameFieldNumber">
            <summary>Field number for the "view_name" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.SkipFieldNumber">
            <summary>Field number for the "skip" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasSkip">
            <summary>Gets whether the "skip" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearSkip">
            <summary>Clears the value of the "skip" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.LimitFieldNumber">
            <summary>Field number for the "limit" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasLimit">
            <summary>Gets whether the "limit" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearLimit">
            <summary>Clears the value of the "limit" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.ScanConsistencyFieldNumber">
            <summary>Field number for the "scan_consistency" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasScanConsistency">
            <summary>Gets whether the "scan_consistency" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearScanConsistency">
            <summary>Clears the value of the "scan_consistency" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.ReduceFieldNumber">
            <summary>Field number for the "reduce" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasReduce">
            <summary>Gets whether the "reduce" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearReduce">
            <summary>Clears the value of the "reduce" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.GroupFieldNumber">
            <summary>Field number for the "group" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasGroup">
            <summary>Gets whether the "group" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearGroup">
            <summary>Clears the value of the "group" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.GroupLevelFieldNumber">
            <summary>Field number for the "group_level" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasGroupLevel">
            <summary>Gets whether the "group_level" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearGroupLevel">
            <summary>Clears the value of the "group_level" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasKey">
            <summary>Gets whether the "key" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearKey">
            <summary>Clears the value of the "key" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.KeysFieldNumber">
            <summary>Field number for the "keys" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.StartKeyFieldNumber">
            <summary>Field number for the "start_key" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasStartKey">
            <summary>Gets whether the "start_key" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearStartKey">
            <summary>Clears the value of the "start_key" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.EndKeyFieldNumber">
            <summary>Field number for the "end_key" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasEndKey">
            <summary>Gets whether the "end_key" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearEndKey">
            <summary>Clears the value of the "end_key" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.InclusiveEndFieldNumber">
            <summary>Field number for the "inclusive_end" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasInclusiveEnd">
            <summary>Gets whether the "inclusive_end" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearInclusiveEnd">
            <summary>Clears the value of the "inclusive_end" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.StartKeyDocIdFieldNumber">
            <summary>Field number for the "start_key_doc_id" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasStartKeyDocId">
            <summary>Gets whether the "start_key_doc_id" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearStartKeyDocId">
            <summary>Clears the value of the "start_key_doc_id" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.EndKeyDocIdFieldNumber">
            <summary>Field number for the "end_key_doc_id" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasEndKeyDocId">
            <summary>Gets whether the "end_key_doc_id" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearEndKeyDocId">
            <summary>Clears the value of the "end_key_doc_id" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.OnErrorFieldNumber">
            <summary>Field number for the "on_error" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasOnError">
            <summary>Gets whether the "on_error" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearOnError">
            <summary>Clears the value of the "on_error" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.DebugFieldNumber">
            <summary>Field number for the "debug" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasDebug">
            <summary>Gets whether the "debug" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearDebug">
            <summary>Clears the value of the "debug" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.NamespaceFieldNumber">
            <summary>Field number for the "namespace" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasNamespace">
            <summary>Gets whether the "namespace" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearNamespace">
            <summary>Clears the value of the "namespace" field</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryRequest.OrderFieldNumber">
            <summary>Field number for the "order" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewQueryRequest.HasOrder">
            <summary>Gets whether the "order" field is set</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewQueryRequest.ClearOrder">
            <summary>Clears the value of the "order" field</summary>
        </member>
        <member name="T:Couchbase.Protostellar.View.V1.ViewQueryRequest.Types">
            <summary>Container for nested types declared in the ViewQueryRequest message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryResponse.RowsFieldNumber">
            <summary>Field number for the "rows" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryResponse.MetaDataFieldNumber">
            <summary>Field number for the "meta_data" field.</summary>
        </member>
        <member name="T:Couchbase.Protostellar.View.V1.ViewQueryResponse.Types">
            <summary>Container for nested types declared in the ViewQueryResponse message type.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryResponse.Types.Row.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryResponse.Types.Row.KeyFieldNumber">
            <summary>Field number for the "key" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryResponse.Types.Row.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryResponse.Types.MetaData.TotalRowsFieldNumber">
            <summary>Field number for the "total_rows" field.</summary>
        </member>
        <member name="F:Couchbase.Protostellar.View.V1.ViewQueryResponse.Types.MetaData.DebugFieldNumber">
            <summary>Field number for the "debug" field.</summary>
        </member>
        <member name="P:Couchbase.Protostellar.View.V1.ViewService.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Couchbase.Protostellar.View.V1.ViewService.ViewServiceClient">
            <summary>Client for ViewService</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewService.ViewServiceClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for ViewService</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewService.ViewServiceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for ViewService that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewService.ViewServiceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewService.ViewServiceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Couchbase.Protostellar.View.V1.ViewService.ViewServiceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="T:Couchbase.Compression.Snappier.Internal.SnappierCompression">
            <summary>
            Snappy compression using Snappier.
            </summary>
        </member>
        <member name="P:Couchbase.Compression.Snappier.Internal.SnappierCompression.Algorithm">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Compression.Snappier.Internal.SnappierCompression.Compress(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Compression.Snappier.Internal.SnappierCompression.Decompress(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Compression.Snappier.SnappierClusterOptionsExtensions">
            <summary>
            Extensions for <see cref="T:Couchbase.ClusterOptions"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Compression.Snappier.SnappierClusterOptionsExtensions.WithSnappyCompression(Couchbase.ClusterOptions)">
            <summary>
            Register Snappier as the compression algorithm for key/value operations.
            </summary>
            <param name="options">The <see cref="T:Couchbase.ClusterOptions"/>.</param>
            <returns>The <see cref="T:Couchbase.ClusterOptions"/> for method chaining.</returns>
        </member>
        <member name="F:Couchbase.ConfigProfiles.PreDefined.Default">
            <summary>
            The default configuration values.
            </summary>
        </member>
        <member name="F:Couchbase.ConfigProfiles.PreDefined.NullProfile">
            <summary>
            An empty profile used as a basis for profiles that only set a few values.
            </summary>
        </member>
        <member name="F:Couchbase.ConfigProfiles.PreDefined.WanDevelopment">
            <summary>
            A profile for development (non-production) use over high-latency connections.
            </summary>
        </member>
        <member name="M:Couchbase.ConnectionString.IsValidDnsSrv">
            <summary>
            Identifies if this connection string is valid for use with DNS SRV lookup.
            </summary>
            <returns>True if valid for DNS SRV lookup.</returns>
            <seealso cref="M:Couchbase.ConnectionString.GetDnsBootStrapUri"/>.
        </member>
        <member name="F:Couchbase.Scheme.Http">
            <summary>
            Standard on-premise couchbase clusters.
            </summary>
        </member>
        <member name="F:Couchbase.Scheme.Couchbase">
            <summary>
            For on-premise clusters.
            </summary>
        </member>
        <member name="F:Couchbase.Scheme.Couchbases">
            <summary>
            For TLS/SSL on-premise and Capella clusters.
            </summary>
        </member>
        <member name="F:Couchbase.Scheme.Couchbase2">
            <summary>
            For Cloud Native Gateway (CNG).
            </summary>
        </member>
        <member name="T:Couchbase.Core.Bootstrapping.Bootstrapper">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.Bootstrapping.Bootstrapper.SleepDuration">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Bootstrapping.Bootstrapper.Start(Couchbase.Core.Bootstrapping.IBootstrappable)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.Bootstrapping.BootstrapperFactory">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Bootstrapping.BootstrapperFactory.Create(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.Bootstrapping.IBootstrappable">
            <summary>
            Flags a resource for monitoring it's bootstrapped state.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Bootstrapping.IBootstrappable.BootStrapAsync">
            <summary>
            Starts the bootstrapping process if <see cref="P:Couchbase.Core.Bootstrapping.IBootstrappable.IsBootstrapped"/> is false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Core.Bootstrapping.IBootstrappable.IsBootstrapped">
            <summary>
            True if bootstrapped; otherwise false.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Bootstrapping.IBootstrappable.DeferredExceptions">
            <summary>
            The last exception thrown by the bootstrapping process.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Bootstrapping.IBootstrapper">
            <summary>
            Monitors the client to see if its bootstrapped or not and initiates bootstrapping if its not bootstrapped
            </summary>
        </member>
        <member name="P:Couchbase.Core.Bootstrapping.IBootstrapper.SleepDuration">
            <summary>
            Interval between checking the bootstrapped state.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Bootstrapping.IBootstrapper.Start(Couchbase.Core.Bootstrapping.IBootstrappable)">
            <summary>
            Starts the monitoring process.
            </summary>
            <param name="subject"></param>
        </member>
        <member name="T:Couchbase.Core.Bootstrapping.IBootstrapperFactory">
            <summary>
            Factory for creating <see cref="T:Couchbase.Core.Bootstrapping.IBootstrapper"/> implementations.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Bootstrapping.IBootstrapperFactory.Create(System.TimeSpan)">
            <summary>
            The interval between checks to see if the subject is bootstrapped.
            </summary>
            <param name="sleepDuration">The <see cref="T:System.TimeSpan"/>duration</param> to wait between checks.
            <returns></returns>
        </member>
        <member name="P:Couchbase.Core.BucketBase.Cluster">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.BucketBase.ScopeAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.BucketBase.DefaultScope">
            <remarks>Volatile</remarks>
        </member>
        <member name="M:Couchbase.Core.BucketBase.DefaultScopeAsync">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.BucketBase.DefaultCollectionAsync">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.BucketBase.Collection(System.String)">
            <remarks>Volatile</remarks>
        </member>
        <member name="M:Couchbase.Core.BucketBase.CollectionAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.BucketBase.ViewQueryAsync``2(System.String,System.String,Couchbase.Views.ViewOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.BucketBase.WaitUntilReadyAsync(System.TimeSpan,Couchbase.Diagnostics.WaitUntilReadyOptions)">
            <summary>
            Waits until bootstrapping has completed and all services have been initialized.
            </summary>
            <param name="timeout">The amount of time to wait for the desired <see cref="T:Couchbase.Diagnostics.ClusterState"/>.</param>
            <param name="options">The optional arguments.</param>
        </member>
        <member name="P:Couchbase.Core.BucketBase.IsBootstrapped">
            <summary>
            Private implementation of <see cref="P:Couchbase.Core.Bootstrapping.IBootstrappable.IsBootstrapped"/> which supports
            inlining. The IBootstrappable implementation of IsBootstrapped cannot be inlined.
            </summary>
        </member>
        <member name="M:Couchbase.Core.BucketBase.ThrowIfBootStrapFailed">
            <summary>
            Throw an exception if the bucket is not bootstrapped successfully.
            </summary>
        </member>
        <member name="M:Couchbase.Core.BucketBase.ThrowBootStrapFailed">
            <summary>
            Throw am AggregateException with deferred bootstrap exceptions.
            </summary>
            <remarks>
            This is a separate method from <see cref="M:Couchbase.Core.BucketBase.ThrowIfBootStrapFailed"/> to allow that method to
            be inlined for the fast, common path where there the bucket is bootstrapped.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.BucketBase.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.CircuitBreakers.CircuitBreakerConfiguration.VolumeThreshold">
            <summary>
            The minimum amount of operations to measure before the threshold percentage kicks in.
            </summary>
        </member>
        <member name="P:Couchbase.Core.CircuitBreakers.CircuitBreakerConfiguration.ErrorThresholdPercentage">
            <summary>
            The percentage of operations that need to fail in a window until the circuit opens.
            </summary>
        </member>
        <member name="P:Couchbase.Core.CircuitBreakers.CircuitBreakerConfiguration.SleepWindow">
            <summary>
            The initial sleep time after which a canary is sent as a probe.
            </summary>
        </member>
        <member name="P:Couchbase.Core.CircuitBreakers.CircuitBreakerConfiguration.RollingWindow">
            <summary>
            The rolling time-frame which is used to calculate the error threshold percentage.
            </summary>
        </member>
        <member name="P:Couchbase.Core.CircuitBreakers.CircuitBreakerConfiguration.CanaryTimeout">
            <summary>
            The timeout for the canary request until it is deemed failed
            </summary>
        </member>
        <member name="P:Couchbase.Core.CircuitBreakers.CircuitBreakerConfiguration.CompletionCallback">
            <summary>
            Called on every response to determine if it is successful or not. The default
            implementation counts SocketException, TimeoutException and TaskCanceledExceptions, RequestCanceledException
            as failures.
            </summary>
        </member>
        <member name="F:Couchbase.Core.ClusterContext.GlobalTranscoder">
            <summary>
            Transcoder for use on internal key/value operations.
            </summary>
            <remarks>
            This transcoder will only function for serializing and deserializing types registered on
            <see cref="T:Couchbase.Core.InternalSerializationContext"/>. Trying to use any other type will throw an exception.
            </remarks>
        </member>
        <member name="P:Couchbase.Core.ClusterContext.Nodes">
            <summary>
            Nodes currently being managed.
            </summary>
        </member>
        <member name="P:Couchbase.Core.ClusterContext.ServiceProvider">
            <summary>
            <seealso cref="T:Couchbase.Core.DI.ICouchbaseServiceProvider"/> for dependency injection within the context of this cluster.
            </summary>
        </member>
        <member name="M:Couchbase.Core.ClusterContext.GetHostEndpointWithPorts(System.Nullable{System.Boolean})">
            <summary>
            This method tries to fetch the bootstrap list from the global GCCCP config
            and then falls back to using the connection string if the GCCCP config does
            not exist because its an older server version that does not support GCCCP.
            </summary>
            <param name="enableTls"></param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Core.ClusterNode.ConfigVersion">
            <summary>
            The current cluster map config revision.
            </summary>
        </member>
        <member name="P:Couchbase.Core.ClusterNode.EndPoint">
            <summary>
            The IP or Hostname of this cluster node.
            </summary>
        </member>
        <member name="P:Couchbase.Core.ClusterNode.KeyEndPoints">
            <inheritdoc />
        </member>
        <member name="E:Couchbase.Core.ClusterNode.KeyEndPointsChanged">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.ClusterNode.UpdateKeyEndPoints">
            <summary>
            Ensures that <see cref="P:Couchbase.Core.ClusterNode.KeyEndPoints"/> is correct, given the values of
            <see cref="P:Couchbase.Core.ClusterNode.EndPoint"/> and <see cref="P:Couchbase.Core.ClusterNode.NodesAdapter"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.ClusterNode.ExecuteInternalOperationAsync``3(``0,``1,System.Func{``0,``1,Couchbase.Core.IO.Operations.CancellationTokenPair,System.Threading.Tasks.Task{Couchbase.Core.IO.Operations.ResponseStatus}},System.Func{Couchbase.Core.IO.Operations.ResponseStatus,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Executes an operation internal to the ClusterNode, such as a Hello or GetManifest operation.
            Handles timeouts and metrics tracking, forwarding the actual execution to the provided executor.
            The provided projector may process the result and throw exceptions if necessary.
            </summary>
            <typeparam name="TConnection">Type of connection.</typeparam>
            <typeparam name="TOperation">Type of operation.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
            <param name="connection">The <see cref="T:Couchbase.Core.IO.Connections.IConnectionPool"/> or <see cref="T:Couchbase.Core.IO.Connections.IConnection"/> to use.</param>
            <param name="operation">The operation to execute.</param>
            <param name="executor">One of the ExecuteOp or ExecuteOpImmediatelyAsync delegates.</param>
            <param name="projector">Callback to perform projections on the result.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The result returned by the <paramref name="projector" />.</returns>
        </member>
        <member name="M:Couchbase.Core.ClusterNode.UpdateCircuitBreaker(Couchbase.Core.IO.Operations.IOperation,System.Exception)">
            <summary>
            Updates the circuit breaker status. Null exception indicates success.
            </summary>
        </member>
        <member name="M:Couchbase.Core.ClusterNode.ToString">
            <summary>
            Provides the string name of the node.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.ClusterNodeCollection">
            <summary>
            Thread-safe collection of <see cref="T:Couchbase.Core.IClusterNode"/> instances. Optimized to be low-lock
            for the common operation <see cref="M:Couchbase.Core.ClusterNodeCollection.TryGet(Couchbase.HostEndpointWithPort,Couchbase.Core.IClusterNode@)"/>, but uses locks for Add and Remove operations.
            Also monitors <see cref="E:Couchbase.Core.IClusterNode.KeyEndPointsChanged"/> to update the lookup dictionary.
            </summary>
        </member>
        <member name="F:Couchbase.Core.ClusterNodeCollection._lookupDictionary">
            <summary>
            Optimized dictionary of nodes for rapid, low-lock get operations.
            Allows nodes to be keyed by multiple keys.
            </summary>
        </member>
        <member name="F:Couchbase.Core.ClusterNodeCollection._nodes">
            <summary>
            Simple list of nodes, must be locked before using.
            </summary>
        </member>
        <member name="P:Couchbase.Core.ClusterNodeCollection.LookupDictionary">
            <summary>
            Seam for unit testing
            </summary>
        </member>
        <member name="P:Couchbase.Core.ClusterNodeCollection.Count">
            <summary>
            Number of nodes in the collection.
            </summary>
        </member>
        <member name="M:Couchbase.Core.ClusterNodeCollection.TryGet(Couchbase.HostEndpointWithPort,Couchbase.Core.IClusterNode@)">
            <summary>
            Gets a node from the collection by <see cref="T:System.Net.IPEndPoint"/>, if present.
            </summary>
            <param name="endPoint"><see cref="T:System.Net.IPEndPoint"/> to find.</param>
            <param name="node">Node found, if any.</param>
            <returns>True if the node was found.</returns>
            <remarks>
            Optimized to be low-lock.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.ClusterNodeCollection.Add(Couchbase.Core.IClusterNode)">
            <summary>
            Adds a node to the collection.
            </summary>
            <param name="node">Node to add.</param>
            <returns>True if added, false if already in the collection.</returns>
        </member>
        <member name="M:Couchbase.Core.ClusterNodeCollection.Remove(Couchbase.HostEndpointWithPort,System.String,Couchbase.Core.IClusterNode@)">
            <summary>
            Removes a node from the collection, if any.
            </summary>
            <param name="endPoint"><see cref="T:System.Net.IPEndPoint"/> of the node to remove.</param>
            <param name="bucketName">The name of the owner of the <see cref="T:Couchbase.Core.IClusterNode"/>."></param>
            <param name="removedNode">Node which was removed, if any.</param>
            <returns>True if the node was removed.</returns>
        </member>
        <member name="M:Couchbase.Core.ClusterNodeCollection.Clear">
            <summary>
            Removes all nodes from the collection.
            </summary>
            <returns>List of nodes that were removed.</returns>
        </member>
        <member name="M:Couchbase.Core.ClusterNodeCollection.GetEnumerator">
            <inheritdoc />
            <remarks>
            Thread-safe, takes a snapshot of the current state at the time it is executed.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.ClusterNodeCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="F:Couchbase.Core.ClusterNodeList._nodes">
            <summary>
            Simple list of nodes, must be locked before using.
            </summary>
        </member>
        <member name="P:Couchbase.Core.ClusterNodeList.Count">
            <summary>
            Number of nodes in the collection.
            </summary>
        </member>
        <member name="M:Couchbase.Core.ClusterNodeList.Add(Couchbase.Core.IClusterNode)">
            <summary>
            Adds a node to the collection.
            </summary>
            <param name="node">Node to add.</param>
            <returns>True if added, false if already in the collection.</returns>
        </member>
        <member name="M:Couchbase.Core.ClusterNodeList.Remove(Couchbase.Core.IClusterNode)">
            <summary>
            Removes a node from the collection, if any.
            </summary>
            <param name="nodeToRemove">Node which was removed, if any.</param>
            <returns>True if the node was removed.</returns>
        </member>
        <member name="M:Couchbase.Core.ClusterNodeList.Clear">
            <summary>
            Removes all nodes from the collection.
            </summary>
            <returns>List of nodes that were removed.</returns>
        </member>
        <member name="M:Couchbase.Core.ClusterNodeList.TryGet(Couchbase.HostEndpointWithPort,System.String,Couchbase.Core.IClusterNode@)">
            <summary>
            Gets a node from the collection by <see cref="T:System.Net.IPEndPoint"/>, if present.
            </summary>
            <param name="endPoint"><see cref="T:System.Net.IPEndPoint"/> to find.</param>
            <param name="bucketName">The bucketName that may be the owner.</param>
            <param name="node">Node found, if any.</param>
            <returns>True if the node was found.</returns>
            <remarks>
            Optimized to be low-lock.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.ClusterNodeList.GetEnumerator">
            <inheritdoc />
            <remarks>
            Thread-safe, takes a snapshot of the current state at the time it is executed.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.ClusterNodeList.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.Compatibility.InterfaceStabilityAttribute">
            <summary>
            Annotation for the interface stability of a given API. A stable interface is one that
            is guaranteed not to change between versions, meaning that you may use an API of a
            given SDK version and be assured that the given API will retain the same parameters
            and behavior in subsequent versions. An unstable interface is one which may appear to
            work or behave in a specific way within a given SDK version, but may change in its
            behavior or arguments in future SDK versions, causing odd application behavior or
            compiler/API usage errors.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Compatibility.InterfaceStabilityAttribute.Level">
            <summary>
            The interface stability of the API.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Compatibility.Level">
            <summary>
            Designates the interface stability of a given API; how likely the interface is to change or be removed entirely.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Compatibility.Level.Committed">
            <summary>
            This stability level is used to indicate the most stable interfaces that are guaranteed to be
            supported and remain stable between SDK versions.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Compatibility.Level.Uncommitted">
            <summary>
            This level is used to indicate APIs that are unlikely to change, but may still change as final
            consensus on their behavior has not yet been reached. Uncommitted APIs usually end up becoming
            stable APIs.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Compatibility.Level.Volatile">
            <summary>
            This level is used to indicate experimental APIs that are still in flux and may likely be changed.
            It may also be used to indicate inherently private APIs that may be exposed, but "YMMV"
            (your mileage may vary) principles apply. Volatile APIs typically end up being promoted to
            Uncommitted after undergoing some modifications.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Configuration.Server.BucketConfig.SetEffectiveNetworkResolution(Couchbase.ClusterOptions)">
            <summary>
            Sets the "effective" network resolution to be used for alternate addresses using the following heuristic:
            "internal": The SDK should be using the normal addresses/ports as specified in the config.
            "external": The SDK should be using the "external" alternate-address address/ports as specified in the config.
            "auto" (default): The SDK should be making a determination based on the heuristic that is in the RFC at bootstrap
            time only, and then once this determination has been made, the network resolution mode should be unambiguously
            set to "internal" or "external".
            </summary>
            <param name="options">THe <see cref="T:Couchbase.ClusterOptions"/> for configuration.</param>
        </member>
        <member name="P:Couchbase.Core.Configuration.Server.BucketConfig.IsGlobal">
            <summary>
            Set to true if a GCCCP config
            </summary>
        </member>
        <member name="P:Couchbase.Core.Configuration.Server.BucketConfig.IgnoreRev">
             <summary>
            When true, we want to ignore the config revision and just accept the
            config provided. This happens when a DNS SRV refresh is detected and
            we need to "rebootstrap".
             </summary>
        </member>
        <member name="M:Couchbase.Core.Configuration.Server.BucketConfigExtensions.GetBootstrapEndpoints(Couchbase.Core.Configuration.Server.BucketConfig,System.Nullable{System.Boolean})">
            <summary>
            This method generates a list of <see cref="T:Couchbase.HostEndpointWithPort"/>'s that can be used
            for bootstrapping buckets.
            </summary>
            <param name="bucketConfig">The <see cref="T:Couchbase.Core.Configuration.Server.BucketConfig"/> reference which was returned from the server.</param>
            <param name="enableTls">If true, use TLS ports.</param>
            <returns>A list of <see cref="T:Couchbase.HostEndpointWithPort"/> for bootstrapping.</returns>
        </member>
        <member name="M:Couchbase.Core.Configuration.Server.BucketConfigExtensions.ReplacePlaceholderWithBootstrapHost(Couchbase.Core.Configuration.Server.BucketConfig,System.String)">
            <summary>
            Replaces the $HOST placeholder with the Uri.Host used to bootstrap. This occurs in a single-node cluster.
            </summary>
            <param name="config">Configuration to update.</param>
            <param name="host">New host value for $HOST.</param>
        </member>
        <member name="T:Couchbase.Core.Configuration.Server.ConfigVersion">
            <summary>
            ConfigVersion represents the revision of a Cluster Map via it's Epoch and Revision fields if they exist.
            These values range from 1 to INT64_MAX, the higher the value the newer the configuration. If Epoch does
            exist for early server versions, the value will be 0 and only the revision compared. The Epoch should always
            be compared first and if equal the revision should be compared.
            <remarks>https://issues.couchbase.com/browse/CBD-4083</remarks>
            </summary>
        </member>
        <member name="P:Couchbase.Core.Configuration.Server.ConfigVersion.Epoch">
             <summary>
             The Epoch of the version.
             </summary>
            <remarks>
             Note that in all cases the comparision should be done using the
             ConfigVersion instance itself as all operators are overridden.
             </remarks>
        </member>
        <member name="P:Couchbase.Core.Configuration.Server.ConfigVersion.Revision">
             <summary>
             The Revision of the version.
             </summary>
            <remarks>
             Note that in all cases the comparision should be done using the
             ConfigVersion instance itself as all operators are overridden.
             </remarks>
        </member>
        <member name="M:Couchbase.Core.Configuration.Server.IConfigHandler.Start(System.Boolean)">
            <summary>
            Starts the config handler
            </summary>
            <param name="withPolling">Enable polling via CCCP.</param>
        </member>
        <member name="M:Couchbase.Core.Configuration.Server.IConfigHandler.Publish(Couchbase.Core.Configuration.Server.BucketConfig)">
            <summary>
            Publishes a config to the handler and any subscribers
            </summary>
            <param name="config">The <see cref="T:Couchbase.Core.Configuration.Server.BucketConfig"/> to publish.</param>
        </member>
        <member name="M:Couchbase.Core.Configuration.Server.IConfigHandler.Subscribe(Couchbase.Core.Configuration.Server.IConfigUpdateEventSink)">
            <summary>
            Subscribe to the config handler to receive cluster map updates.
            </summary>
            <param name="configSubscriber">The <see cref="T:Couchbase.Core.Configuration.Server.IConfigUpdateEventSink"/> subscriber.</param>
        </member>
        <member name="M:Couchbase.Core.Configuration.Server.IConfigHandler.Unsubscribe(Couchbase.Core.Configuration.Server.IConfigUpdateEventSink)">
            <summary>
            Unsubscribes the subscriber.
            </summary>
            <param name="configSubscriber"></param>
        </member>
        <member name="M:Couchbase.Core.Configuration.Server.IConfigHandler.Get(System.String)">
            <summary>
            Fetch a <see cref="T:Couchbase.Core.Configuration.Server.BucketConfig"/> from the listener if they are a subscriber.
            </summary>
            <param name="bucketName">The name of the bucket.</param>
            <returns>A <see cref="T:Couchbase.Core.Configuration.Server.BucketConfig"/> for a <see cref="T:Couchbase.IBucket"/> subscriber.</returns>
        </member>
        <member name="M:Couchbase.Core.Configuration.Server.IConfigHandler.Clear">
            <summary>
            Clears the subscribers.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Configuration.Server.NodeAdapter.IsViewNode">
            <summary>
            Gets a value indicating whether this instance is view node.
            </summary>
            <value>
                <c>true</c> if this instance is view node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Configuration.Server.NodeAdapter.IsKvNode">
            <summary>
            Gets a value indicating whether this instance is data node.
            </summary>
            <value>
                <c>true</c> if this instance is data node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Configuration.Server.NodeAdapter.IsIndexNode">
            <summary>
            Gets a value indicating whether this instance is index node.
            </summary>
            <value>
            	<c>true</c> if this instance is index node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Configuration.Server.NodeAdapter.IsQueryNode">
            <summary>
            Gets a value indicating whether this instance is query node.
            </summary>
            <value>
            	<c>true</c> if this instance is query node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Configuration.Server.NodeAdapter.IsSearchNode">
            <summary>
            Gets a value indicating whether this instance is search node.
            </summary>
            <value>
            <c>true</c> if this instance is search node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Configuration.Server.NodeAdapter.IsAnalyticsNode">
            <summary>
            Gets a value indicating whether this instance is an analytics node.
            </summary>
            <value>
            <c>true</c> if this instance is analytics node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Configuration.Server.NodeAdapter.IsEventingNode">
            <summary>
            Gets a value indicating if this instance is an Eventing Service node.
            </summary>
            <value>
            <c>true</c> if this instance is eventing node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Configuration.Server.NodeAdapter.IsManagementNode">
            <summary>
            Gets a value indicating if this instance is a Management service node.
            </summary>
            /// <value>
            <c>true</c> if this instance is management node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Couchbase.Core.Configuration.Server.Streaming.HttpClusterMapBase">
            <summary>
            For mocking/testing
            </summary>
        </member>
        <member name="T:Couchbase.Core.Configuration.Server.Streaming.HttpClusterMapFactory">
            <summary>
            The default implementation of <see cref="T:Couchbase.Core.Configuration.Server.Streaming.IHttpClusterMapFactory"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Configuration.Server.Streaming.HttpClusterMapFactory.#ctor(Couchbase.Core.IO.HTTP.ICouchbaseHttpClientFactory)">
            <summary>
            The default constructor for this factory.
            </summary>
            <param name="couchbaseHttpClientFactory">The <see cref="T:Couchbase.Core.IO.HTTP.ICouchbaseHttpClientFactory"/> instance for creating HTTP services.</param>
        </member>
        <member name="M:Couchbase.Core.Configuration.Server.Streaming.HttpClusterMapFactory.Create(Couchbase.Core.ClusterContext)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.Configuration.Server.Streaming.IHttpClusterMapFactory">
            <summary>
            An interface for creating <see cref="T:Couchbase.Core.Configuration.Server.Streaming.HttpClusterMap"/> instances.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Configuration.Server.Streaming.IHttpClusterMapFactory.Create(Couchbase.Core.ClusterContext)">
            <summary>
            Creates a new <see cref="T:Couchbase.Core.Configuration.Server.Streaming.HttpClusterMapBase"/> instance.
            </summary>
            <param name="context">The owning <see cref="T:Couchbase.Core.ClusterContext"/>.</param>
            <returns>A <see cref="T:Couchbase.Core.Configuration.Server.Streaming.HttpClusterMapBase"/> for fetching configs.</returns>
        </member>
        <member name="T:Couchbase.Core.DataMapping.IDataMapper">
            <summary>
            Provides and interface for mapping the results of a <see cref="T:Couchbase.Views.ViewQuery"/> to it's <see cref="T:Couchbase.Views.IViewResult`2"/>
            </summary>
        </member>
        <member name="M:Couchbase.Core.DataMapping.IDataMapper.Map``1(System.IO.Stream)">
            <summary>
            Maps the entire results
            </summary>
            <typeparam name="T">The <see cref="T:Couchbase.Views.IViewResult`2"/>'s Type parameter.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> results of the query.</param>
            <returns>An object deserialized to it's T type.</returns>
        </member>
        <member name="M:Couchbase.Core.DataMapping.IDataMapper.MapAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Maps the entire results
            </summary>
            <typeparam name="T">The <see cref="T:Couchbase.Views.IViewResult`2"/>'s Type parameter.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> results of the query.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>An object deserialized to it's T type.</returns>
        </member>
        <member name="T:Couchbase.Core.DataMapping.JsonDataMapper">
            <summary>
            A class for mapping an input stream of JSON to a Type T using a <see cref="T:Newtonsoft.Json.JsonTextReader"/> instance.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DataMapping.JsonDataMapper.Map``1(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.DataMapping.JsonDataMapper.MapAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Metrics.HistogramCollector.Tag">
            <summary>
            List of tags this collector is tracking.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.HistogramCollector.AddMeasurement(System.Double)">
            <summary>
            Add a measurement to the histogram.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.HistogramCollector.CollectMeasurements">
            <summary>
            Collect the measurements and reset the histogram.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Metrics.HistogramCollectorSet">
            <summary>
            A collection of histograms keyed by tags.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.HistogramCollectorSet.#ctor(System.String)">
            <summary>
            A collection of histograms keyed by tags.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Metrics.IMeter">
            <summary>
            An interface for developing classes for collecting and measuring metrics.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.IMeter.ValueRecorder(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates an <see cref="T:Couchbase.Core.Diagnostics.Metrics.IValueRecorder"/> implementation for collecting metrics.
            </summary>
            <param name="name">The name of the <see cref="T:Couchbase.Core.Diagnostics.Metrics.IValueRecorder"/> usually a service name or similar.</param>
            <param name="tags">Any tags that are to be associated with the metrics being captured.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Metrics.IValueRecorder">
            <summary>
            An interface for collecting metric data and associated with a <see cref="T:Couchbase.Core.Diagnostics.Metrics.IMeter"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.IValueRecorder.RecordValue(System.UInt32,System.Nullable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Collects metric data and forwards it to its <see cref="T:Couchbase.Core.Diagnostics.Metrics.IMeter"/> parent.
            </summary>
            <param name="value">The value to measure.</param>
            <param name="tag">An optional tag for the <see cref="T:Couchbase.Core.Diagnostics.Metrics.IValueRecorder"/>.</param>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Metrics.LoggingMeter">
            <summary>
            An <see cref="T:Couchbase.Core.Diagnostics.Metrics.IMeter"/> implementation for measuring latencies of the various Couchbase Services.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.LoggingMeter.ValueRecorder(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Metrics.LoggingMeterOptions">
            <summary>
            Options for <see cref="M:Couchbase.Core.Diagnostics.Metrics.LoggingMeterOptions.LoggingMeter(Couchbase.Core.Diagnostics.Metrics.IMeter)"/> instances.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.LoggingMeterOptions.EmitInterval(System.TimeSpan)">
            <summary>
            The interval after which the aggregated trace information is logged.
            </summary>
            <remarks>Defaults to 600 seconds.</remarks>
            <param name="emitInterval"></param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Metrics.LoggingMeterOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.LoggingMeterOptions.Enabled(System.Boolean)">
            <summary>
            Stops the meter from collecting data.
            </summary>
            <param name="enabled">A <see cref="T:System.Boolean"/> for stopping or starting collecting.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Metrics.LoggingMeterOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.LoggingMeterOptions.ReportingEnabled(System.Boolean)">
            <summary>
            Stops the meter from reporting on collected data.
            </summary>
            <param name="reportingEnabled">A <see cref="T:System.Boolean"/> for stopping or starting reporting.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Metrics.LoggingMeterOptions"/> instance for chaining.</returns>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.Double">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.LoggingMeterReport">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.Meta">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.Operation">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.Operations">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.PercentilesUs">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.DictionaryStringOperation">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.Int64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.UInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.LoggingMeterSerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Metrics.LoggingMeterValueRecorder">
            <summary>
            A <see cref="T:Couchbase.Core.Diagnostics.Metrics.IValueRecorder"/> implementation for collecting latency metrics for a
            Couchbase service and conjunction with <see cref="T:Couchbase.Core.Diagnostics.Metrics.LoggingMeter"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.LoggingMeterValueRecorder.#ctor(System.String)">
            <summary>
            A <see cref="T:Couchbase.Core.Diagnostics.Metrics.IValueRecorder"/> implementation for collecting latency metrics for a
            Couchbase service and conjunction with <see cref="T:Couchbase.Core.Diagnostics.Metrics.LoggingMeter"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.LoggingMeterValueRecorder.RecordValue(System.UInt32,System.Nullable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Metrics.MeterForwarder">
            <summary>
            When using a <see cref="T:Couchbase.Core.Diagnostics.Metrics.IMeter"/> other than the <see cref="T:Couchbase.Core.Diagnostics.Metrics.NoopMeter"/>, implements the logic to forward
            .NET metrics to the meter implementation. When using the <see cref="T:Couchbase.Core.Diagnostics.Metrics.NoopMeter"/> this class is not activated
            so that .NET doesn't spend CPU cycles collecting the metrics unnecessarily.
            </summary>
            <remarks>
            Note that the metrics may also be consumed without using <see cref="T:Couchbase.Core.Diagnostics.Metrics.IMeter"/> by using any standard .NET
            metric consumer. This may include OpenTelemetry, dotnet-counters, dotnet-monitor, and more.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Metrics.MetricTracker">
            <summary>
            Methods for easily tracking metrics via the .NET metrics system.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.MetricTracker.KeyValue.TrackOperation(Couchbase.Core.IO.Operations.OperationBase,System.TimeSpan,System.Type)">
            <summary>
            Tracks the first attempt of an operation.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.MetricTracker.KeyValue.TrackResponseStatus(Couchbase.Core.IO.Operations.OpCode,Couchbase.Core.IO.Operations.ResponseStatus)">
            <summary>
            Tracks the response status for each response from the server.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.MetricTracker.KeyValue.TrackRetry(Couchbase.Core.IO.Operations.OpCode)">
            <summary>
            Tracks an operation retry.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.MetricTracker.KeyValue.TrackOrphaned">
            <summary>
            Track an orphaned operation.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.MetricTracker.KeyValue.TrackSendQueueFull">
            <summary>
            Tracks an operation rejected due to a full connection pool send queue.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.MetricTracker.KeyValue.TrackTimeout(Couchbase.Core.IO.Operations.OpCode)">
            <summary>
            Tracks an operation which has failed due to a timeout.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.MetricTracker.N1Ql.TrackOperation(Couchbase.Core.Retry.Query.QueryRequest,System.TimeSpan,System.Type)">
            <summary>
            Tracks the first attempt of an operation.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.MetricTracker.Analytics.TrackOperation(Couchbase.Analytics.AnalyticsRequest,System.TimeSpan,System.Type)">
            <summary>
            Tracks the first attempt of an operation.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.MetricTracker.Search.TrackOperation(Couchbase.Core.Retry.Search.FtsSearchRequest,System.TimeSpan,System.Type)">
            <summary>
            Tracks the first attempt of an operation.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Metrics.MetricTracker.Views.TrackOperation(Couchbase.Views.ViewQuery,System.TimeSpan,System.Type)">
            <summary>
            Tracks the first attempt of an operation.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Metrics.NoopMeter">
            <summary>
            A NOOP meter that does nothing.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Metrics.NoopValueRecorder">
            <summary>
            A NOOP value recorder which records nothing.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.CompressionSpan">
            <summary>
            The span for request compression before dispatch
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.CompressionSpan.Attributes.System">
            <summary>
                This attribute is a standard OpenTelemetry attribute and should be placed on all spans to uniquely identify them
                for couchbase.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DecompressionSpan">
            <summary>
            The span for response decompression
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DecompressionSpan.Attributes.System">
            <summary>
                This attribute is a standard OpenTelemetry attribute and should be placed on all spans to uniquely identify them
                for couchbase.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.EncodingSpan">
            <summary>
            The span for request encoding before dispatch
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.EncodingSpan.Attributes.System">
            <summary>
                This attribute is a standard OpenTelemetry attribute and should be placed on all spans to uniquely identify them
                for couchbase.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DispatchSpan">
            <summary>
            The dispatch-span during which the operation is in-flight
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DispatchSpan.Name">
            <summary>
                The span name
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DispatchSpan.Attributes">
            <summary>
                Attributes of the dispatch-span.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DispatchSpan.Attributes.System">
            <summary>
                This attribute is a standard OpenTelemetry attribute and should be placed on all spans to uniquely identify them
                for couchbase.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DispatchSpan.Attributes.NetTransport">
            <summary>
                This attribute is a standard OpenTelemetry attribute and should be placed on every dispatch span.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DispatchSpan.Attributes.ServerDuration">
            <summary>
                When the execution duration is reported by the server as part of the response, it should be included in
                microseconds.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DispatchSpan.Attributes.LocalId">
            <summary>
                The local ID is the connection ID used when creating the connection against the cluster. Note that right now the ID
                is only populated for the KV service.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DispatchSpan.Attributes.LocalHostname">
            <summary>
                The hostname for the local side of the socket.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DispatchSpan.Attributes.LocalPort">
            <summary>
                The port for the local side of the socket.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DispatchSpan.Attributes.RemoteHostname">
            <summary>
                The hostname for the remote side of the socket.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DispatchSpan.Attributes.RemotePort">
            <summary>
                The port for the remote side of the socket.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DispatchSpan.Attributes.OperationId">
            <summary>
                The operation ID, together with the service type, allows to (likely) distinguish the request from others. The
                operation ID is a string and depends on the service used.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.InnerRequestSpans.DispatchSpan.Attributes.TimeoutMilliseconds">
            <summary>
            The operation timeout in milliseconds
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan">
            <summary>
            A wrapper interface for all spans flowing through the SDK.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.IRequestSpan.SetAttribute(System.String,System.Boolean)">
            <summary>
            Sets an attribute on the span which is translated to a corresponding implementation specific tag.
            </summary>
            <remarks>Depending upon the implementation the attribute might be ignored (NOOP) for example.</remarks>
            <param name="key">The key of attribute.</param>
            <param name="value">The boolean value of the attribute.</param>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.IRequestSpan.SetAttribute(System.String,System.String)">
            <summary>
            Sets an attribute on the span which is translated to a corresponding implementation specific tag.
            </summary>
            <remarks>Depending upon the implementation the attribute might be ignored (NOOP) for example.</remarks>
            <param name="key">The key of attribute.</param>
            <param name="value">The string value of the attribute.</param>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.IRequestSpan.SetAttribute(System.String,System.UInt32)">
            <summary>
            Sets an attribute on the span which is translated to a corresponding implementation specific tag.
            </summary>
            <remarks>Depending upon the implementation the attribute might be ignored (NOOP) for example.</remarks>
            <param name="key">The key of attribute.</param>
            <param name="value">The uint value of the attribute.</param>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.IRequestSpan.AddEvent(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Sets an event on the span which translates to the corresponding implementation.
            </summary>
            <remarks>Depending upon the implementation the event might be ignored (NOOP) for example.</remarks>
            <param name="name">The name of the event.</param>
            <param name="timestamp">The timestamp when it happened.</param>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.IRequestSpan.End">
            <summary>
            Completes the span.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.IRequestSpan.Parent">
            <summary>
            The optional parent span.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.IRequestSpan.ChildSpan(System.String)">
            <summary>
            Creates a child span from this span.
            </summary>
            <param name="name">The name of the span.</param>
            <returns>A child span with references to the parent span.</returns>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.IRequestSpan.CanWrite">
            <summary>
            If true <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/> attributes will be written for this tag. In cases such
            as the <see cref="T:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan"/> it should be false as no attributes/tags are collected.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.IRequestSpan.Id">
            <summary>
            The id, possibly from the underlying activity, of the span.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.IRequestSpan.Duration">
            <summary>
            The duration of the span set after Dispose() or <see cref="M:Couchbase.Core.Diagnostics.Tracing.IRequestSpan.End"/> is called.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.IRequestTracer">
            <summary>
            The abstraction for tracing in the SDK.
            </summary>
            <remarks>
            Multiple implementation exists, internal within the SDK and as packages for 3rd parties
            (OpenTelemetry, OpenTracing, etc.). It is recommended that one of these packages be used
            for writing your own implementation.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.IRequestTracer.RequestSpan(System.String,Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Creates a new request span with or without a parent span.
            </summary>
            <param name="name">The name of the top-level operation (i.e. "cb.get")</param>
            <param name="parentSpan">A parent span, otherwise null.</param>
            <returns>A request span that wraps the actual tracer implementation span.</returns>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.IRequestTracer.Start(Couchbase.Core.Diagnostics.Tracing.TraceListener)">
            <summary>
            Starts tracing given a <see cref="T:Couchbase.Core.Diagnostics.Tracing.TraceListener"/> implementation.
            </summary>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan">
            <summary>
            A NOOP implementation of <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/>. Calling any method will do nothing as it's a NOOP,
            except for constructing child spans. Tracers may opt to return a <see cref="T:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan"/> when disabled
            or when sampling excludes the span, but a tracer may still choose to create an active span for the child
            span of a NOOP span.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan.#ctor">
            <summary>
            Creates a new NoopRequestSpan.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan.#ctor(Couchbase.Core.Diagnostics.Tracing.IRequestTracer,Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Creates a new NoopRequestSpan.
            </summary>
            <param name="tracer">The <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestTracer"/> used constructing child spans.</param>
            <param name="parentSpan">The <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/> which is the parent of this span, if any.</param>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan.SetAttribute(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan.SetAttribute(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan.SetAttribute(System.String,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan.AddEvent(System.String,System.Nullable{System.DateTimeOffset})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan.End">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan.Parent">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan.ChildSpan(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan.Id">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.NoopRequestSpan.Duration">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.NoopRequestTracer">
            <summary>
            A NOOP implementation of <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestTracer"/> used when tracing is disabled.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions.EmitInterval">
            <summary>
            The interval after which the aggregated information is logged.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions.WithEmitInterval(System.TimeSpan)">
            <summary>
            The interval after which the aggregated information is logged.
            </summary>
            <param name="emitInterval">A <see cref="T:System.TimeSpan"/> which is the interval.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions"/> object for chaining.</returns>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions.SampleSize">
            <summary>
            How many entries to sample per service in each emit interval.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions.WithSampleSize(System.UInt32)">
            <summary>
            How many entries to sample per service in each emit interval.
            </summary>
            <param name="sampleSize">A <see cref="T:System.UInt32"/> which is the sample size to emit.</param>
            <returns></returns>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions"/> object for chaining.</returns>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions.Enabled">
            <summary>
            Enables orphaned response tracing. Defaults to enabled.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions.WithEnabled(System.Boolean)">
            <summary>
            Enables orphaned response tracing.
            </summary>
            <param name="enabled">A <see cref="T:System.Boolean"/> true if enabled.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions"/> object for chaining.</returns>
            <remarks>Default is true.</remarks>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions.OrphanListener">
            <summary>
            Provides the means of registering a custom <see cref="T:Couchbase.Core.Diagnostics.Tracing.TraceListener"/> implementation.
            </summary>
            <remarks>It is suggested that the default <see cref="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanOptions.OrphanListener"/> be used instead of a custom implementation.</remarks>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReporter.TotalCount">
            <summary>
            Internal total count of all pending operation contexts to have been recorded.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReportingSerializerContext.OrphanReport">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReportingSerializerContext.OrphanServiceReport">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReportingSerializerContext.OrphanSummary">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReportingSerializerContext.OrphanSummaryArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReportingSerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReportingSerializerContext.UInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReportingSerializerContext.UInt64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReportingSerializerContext.NullableUInt64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReportingSerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReportingSerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReportingSerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReportingSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanReportingSerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanSummary.total_duration_us">
            <summary>
            The duration of the outer request span.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanSummary.encode_duration_us">
            <summary>
            The duration of the encode span, if present.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanSummary.last_dispatch_duration_us">
            <summary>
            The duration of the last dispatch span if present.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanSummary.total_dispatch_duration_us">
            <summary>
            The duration of all dispatch spans, summed up.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanSummary.last_server_duration_us">
            <summary>
            The server duration attribute of the last dispatch span, if present.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanSummary.total_server_duration_us">
            <summary>
            The total duration of  all server duration spans, if present.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanSummary.operation_name">
            <summary>
            The name of the outer request span.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanSummary.last_local_id">
            <summary>
            The local_id from the last dispatch span, if present.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanSummary.operation_id">
            <summary>
            The operation_id from the outer request span, if present.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanSummary.last_local_socket">
            <summary>
            The local_address from the last dispatch span, if present. Should combine the host and port into a  “host:port” format.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanSummary.last_remote_socket">
            <summary>
            The remote_address from the last dispatch span, if present. Should combine the host and port into a  “host:port” format.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OrphanResponseReporting.OrphanSummary.timeout_ms">
            <summary>
            The operations configured timeout value.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.OuterRequestSpans.Attributes">
            <summary>
            Span attributes for the outer-request span
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.OuterRequestSpans.Attributes.System">
            <summary>
                This attribute is a standard OpenTelemetry attribute and should be placed on all spans to uniquely identify them
                for couchbase.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.OuterRequestSpans.Attributes.Service">
            <summary>
                Each outer request should set an attribute that classifies the service
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.OuterRequestSpans.Attributes.BucketName">
            <summary>
                This attribute is a standard OpenTelemetry attribute and should be placed on all operations which are at the bucket
                level or below.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.OuterRequestSpans.Attributes.ScopeName">
            <summary>
                Should be placed on all operations which are at the scope level or below and on manager operations that touch a
                single scope (especially on the CollectionManager).
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.OuterRequestSpans.Attributes.CollectionName">
            <summary>
                Should be placed on all operations which are at the collection level.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.OuterRequestSpans.Attributes.Statement">
            <summary>
                This attribute is a standard OpenTelemetry attribute and should be placed on N1QL and analytics operations.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.OuterRequestSpans.Attributes.Operation">
            <summary>
                This attribute is a standard OpenTelemetry attribute and should be placed on all operations which do NOT have the
                db.statement set.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.OuterRequestSpans.Attributes.ResponseStatus">
            <summary>
            The status code for an individual response from a couchbase node.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.OuterRequestSpans.Attributes.Outcome">
            <summary>
            The outcome of the operation.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.OuterRequestSpans.ServiceSpan">
            <summary>
            Public API Name for the outer-request span
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.OuterRequestSpans.ManagerSpan">
            <summary>
            Manager API outer-request spans
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.RequestSpan">
            <summary>
            An implementation of <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/> that measures the duration of a span and
            is used for providing data for the <see cref="T:Couchbase.Core.Diagnostics.Tracing.RequestTracer"/>.
            requests.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.RequestSpan.Parent">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.RequestSpan.ChildSpan(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.RequestSpan.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.RequestSpan.Id">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.RequestSpan.Duration">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.RequestSpan.SetAttribute(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.RequestSpan.SetAttribute(System.String,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.RequestSpan.SetAttribute(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.RequestSpan.AddEvent(System.String,System.Nullable{System.DateTimeOffset})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.RequestSpan.End">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.RequestSpan.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.RequestTracer">
            <summary>
            An implementation of <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestTracer"/> that measures the duration of child spans
            and the total duration of the parent span - it is used to generate a report of the nth slowest
            requests which is useful for identifying slow operations.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.RequestTracer.#ctor">
            <summary>
            Creates a new RequestTracer.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.RequestTracer.RequestSpan(System.String,Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.RequestTracer.Start(Couchbase.Core.Diagnostics.Tracing.TraceListener)">
            <inheritdoc />
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.ServiceIdentifier.Data">
            <summary>
            The data or "K/V" service.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.ServiceIdentifier.Query">
            <summary>
            The query or "N1QL" service.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.ServiceIdentifier.Search">
            <summary>
            The search or "FTS" service.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.ServiceIdentifier.Views">
            <summary>
            The views service.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.ServiceIdentifier.Analytics">
            <summary>
            The analytics service.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.ServiceIdentifier.Management">
            <summary>
            The management service (“ns_server” / 8091)
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions.WithEmitInterval(System.TimeSpan)">
            <summary>
            The interval after which the aggregated trace information is logged.
            </summary>
            <remarks>The default is 10 seconds.</remarks>
            <param name="emitInterval">A <see cref="T:System.TimeSpan"/> interval.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions.WithKvThreshold(System.TimeSpan)">
            <summary>
            The interval after which the aggregated trace information is logged.
            </summary>
            <remarks>The default is 500 Milliseconds.</remarks>
            <param name="kvThreshold">A <see cref="T:System.TimeSpan"/> interval.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions.WithQueryThreshold(System.TimeSpan)">
            <summary>
            The threshold over which the request is taken into account for the query service
            </summary>
            <remarks>The default is 1 second.</remarks>
            <param name="queryThreshold">A <see cref="T:System.TimeSpan"/> interval.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions.WithViewsThreshold(System.TimeSpan)">
            <summary>
            The threshold over which the request is taken into account for the views service
            </summary>
            <remarks>The default is 1 second.</remarks>
            <param name="viewsThreshold">A <see cref="T:System.TimeSpan"/> interval.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions.WithSearchThreshold(System.TimeSpan)">
            <summary>
            The threshold over which the request is taken into account for the search service
            </summary>
            <remarks>The default is 1 second.</remarks>
            <param name="searchThreshold">A <see cref="T:System.TimeSpan"/> interval.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions.WithAnalyticsThreshold(System.TimeSpan)">
            <summary>
            The threshold over which the request is taken into account for the search service
            </summary>
            <remarks>The default is 1 second.</remarks>
            <param name="analyticsThreshold">A <see cref="T:System.TimeSpan"/> interval.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions.WithSampleSize(System.UInt32)">
            <summary>
            How many entries to sample per service in each emit interval
            </summary>
            <remarks>The default is 10 samples.</remarks>
            <param name="sampleSize">A <see cref="T:System.UInt32"/> indicating the sample size.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions"/> for chaining.</returns>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions.ThresholdListener">
            <summary>
            Provides the means of registering a custom <see cref="T:Couchbase.Core.Diagnostics.Tracing.TraceListener"/> implementation.
            </summary>
            <remarks>It is suggested that the default <see cref="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions.ThresholdListener"/> be used instead of a custom implementation.</remarks>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions.Enabled">
            <summary>
            Enables threshold tracing. Defaults to enabled.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdSummary">
            <summary>
            Provides a summary for Threshold Request Logging for slow operations.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdSummary.total_duration_us">
            <summary>
            The duration of the outer request span.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdSummary.encode_duration_us">
            <summary>
            The duration of the encode span, if present.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdSummary.last_dispatch_duration_us">
            <summary>
            The duration of the last dispatch span if present.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdSummary.total_dispatch_duration_us">
            <summary>
            The duration of all dispatch spans, summed up.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdSummary.last_server_duration_us">
            <summary>
            The server duration attribute of the last dispatch span, if present.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdSummary.total_server_duration_us">
            <summary>
            The total duration of  all server duration spans, if present.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdSummary.operation_name">
            <summary>
            The name of the outer request span.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdSummary.last_local_id">
            <summary>
            The local_id from the last dispatch span, if present.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdSummary.operation_id">
            <summary>
            The operation_id from the outer request span, if present.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdSummary.last_local_socket">
            <summary>
            The local_address from the last dispatch span, if present. Should combine the host and port into a  “host:port” format.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdSummary.last_remote_socket">
            <summary>
            The remote_address from the last dispatch span, if present. Should combine the host and port into a  “host:port” format.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTags">
            <summary>
            The following properties must be collected for each trace (if available) and then logged as specified under JSON Output Format.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTags.TotalDurationTag">
            <summary>
            The duration of the outer request span
            </summary>
            <remarks>In Microseconds as a <see cref="T:System.UInt32"/></remarks>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTags.TotalDuration">
            <inheritdoc cref="F:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTags.TotalDurationTag"/>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTags.EncodeDurationTag">
            <summary>
            The duration of the encode span, if present
            </summary>
            <remarks>In Microseconds as a <see cref="T:System.UInt32"/></remarks>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTags.EncodeDuration">
            <inheritdoc cref="F:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTags.EncodeDurationTag"/>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTags.DispatchDurationTag">
            <summary>
            The duration of the last dispatch span if present
            </summary>
            <remarks>In Microseconds as a <see cref="T:System.UInt32"/></remarks>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTags.DispatchDuration">
            <inheritdoc cref="F:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTags.DispatchDurationTag"/>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTraceListener">
            <summary>
            A <see cref="T:Couchbase.Core.Diagnostics.Tracing.TraceListener"/> for <see cref="T:Couchbase.Core.Diagnostics.Tracing.RequestTracer"/>; listens for any span closings and
            generates a <see cref="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdSummary"/> if a span exceeds the threshold configured in <see cref="T:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdOptions"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTraceListener.Start">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTracingSerializerContext.ThresholdSummary">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTracingSerializerContext.ThresholdSummaryArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTracingSerializerContext.ThresholdSummaryReport">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTracingSerializerContext.IDictionaryStringThresholdSummaryReport">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTracingSerializerContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTracingSerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTracingSerializerContext.UInt64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTracingSerializerContext.NullableUInt64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTracingSerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTracingSerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTracingSerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTracingSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.ThresholdTracing.ThresholdTracingSerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.TraceListener">
            <summary>
            An abstract trace listener that raises trace start/stop trace events when implemented in a concrete class.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.TraceListener.Listener">
            <summary>
            The <see cref="T:System.Diagnostics.ActivityListener"/> used for listening to trace events.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.TraceListener.Start">
            <summary>
            Starts the underlying <see cref="T:System.Diagnostics.ActivityListener"/> so that trace events can be captured.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.TraceListener.Dispose">
            <summary>
            Disposes of the <see cref="T:System.Diagnostics.ActivityListener"/> instance.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Diagnostics.Tracing.TracingConfiguration">
            <summary>
            A configuration class for tracing.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.TracingConfiguration.WithEmitInterval(System.TimeSpan)">
            <summary>
            The interval after which the aggregated trace information is logged.
            </summary>
            <remarks>The default is 10 seconds.</remarks>
            <param name="emitInterval">A <see cref="T:System.TimeSpan"/> interval.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.TracingConfiguration"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.TracingConfiguration.WithSampleSize(System.UInt32)">
            <summary>
            How many entries to sample per service in each emit interval
            </summary>
            <remarks>The default is 10 samples.</remarks>
            <param name="sampleSize">A <see cref="T:System.UInt32"/> indicating the sample size.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.TracingConfiguration"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.TracingConfiguration.WithThreshold(System.TimeSpan)">
            <summary>
            The interval after which the aggregated trace information is logged.
            </summary>
            <remarks>The default is 500 Milliseconds.</remarks>
            <param name="threshold">A <see cref="T:System.TimeSpan"/> interval.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.TracingConfiguration"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.TracingConfiguration.WithService(System.String)">
            <summary>
            The service name
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.TracingOptions.Enabled">
            <summary>
            Enables request tracing. Defaults to enabled.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.TracingOptions.WithEnabled(System.Boolean)">
            <summary>
            Enables request tracing
            </summary>
            <param name="enabled">A <see cref="T:System.Boolean"/> true if enabled.</param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.TracingOptions"/> object for chaining.</returns>
            <remarks>Default is true.</remarks>
        </member>
        <member name="P:Couchbase.Core.Diagnostics.Tracing.TracingOptions.RequestTracer">
            <summary>
            A custom <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestTracer"/> implementation; the default is the <see cref="P:Couchbase.Core.Diagnostics.Tracing.TracingOptions.RequestTracer"/> class.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Diagnostics.Tracing.TracingOptions.WithTracer(Couchbase.Core.Diagnostics.Tracing.IRequestTracer)">
            <summary>
            A custom <see cref="P:Couchbase.Core.Diagnostics.Tracing.TracingOptions.RequestTracer"/> implementation.
            </summary>
            <remarks>In most all cases the default <see cref="P:Couchbase.Core.Diagnostics.Tracing.TracingOptions.RequestTracer"/> is sufficient and should be used.</remarks>
            <param name="requestTracer">The custom <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestTracer"/> to override the default <see cref="P:Couchbase.Core.Diagnostics.Tracing.TracingOptions.RequestTracer"/></param>
            <returns>A <see cref="T:Couchbase.Core.Diagnostics.Tracing.TracingOptions"/> object for chaining.</returns>
        </member>
        <member name="T:Couchbase.Core.DI.BucketFactory">
            <summary>
            Creates a BucketBase class based on <seealso cref="T:Couchbase.Management.Buckets.BucketType"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.BucketFactory.Create(System.String,Couchbase.Management.Buckets.BucketType,Couchbase.Core.Configuration.Server.BucketConfig)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.DI.ClusterNodeFactory">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.DI.IClusterNodeFactory"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.ClusterNodeFactory.CreateAndConnectAsync(Couchbase.HostEndpointWithPort,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.DI.ClusterNodeFactory.CreateAndConnectAsync(Couchbase.HostEndpointWithPort,Couchbase.Core.Configuration.Server.NodeAdapter,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.DI.CollectionFactory">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.DI.ICollectionFactory"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.CollectionFactory.Create(Couchbase.Core.BucketBase,Couchbase.KeyValue.IScope,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.DI.CouchbaseServiceProvider">
            <summary>
            Provides a lightweight <seealso cref="T:System.IServiceProvider"/> implementation for Couchbase.
            </summary>
            <remarks>
            Supports registering a factory against non-specific generics, i.e. typeof(ILogger&lt;&gt;).
            In this example, any request for ILogger&lt;T&gt; will hit that factory, regardless of
            the specific T requested, unless a more specific factory is also registered.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.DI.CouchbaseServiceProvider.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Type,Couchbase.Core.DI.IServiceFactory}})">
            <summary>
            Create a new CouchbaseServiceProvider.
            </summary>
            <param name="serviceFactories">Factories keyed by type being requested.</param>
        </member>
        <member name="M:Couchbase.Core.DI.CouchbaseServiceProvider.GetService(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.DI.CouchbaseServiceProvider.IsService(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.DI.CouchbaseServiceProviderExtensions">
            <summary>
            Extensions for <seealso cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.CouchbaseServiceProviderExtensions.GetRequiredService(System.IServiceProvider,System.Type)">
            <summary>
            Gets a service, throws an exception if not registered.
            </summary>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/>.</param>
            <param name="type">Service being requested.</param>
            <returns>The service.</returns>
        </member>
        <member name="M:Couchbase.Core.DI.CouchbaseServiceProviderExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            Gets a service.
            </summary>
            <typeparam name="T">Service being requested.</typeparam>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/>.</param>
            <returns>The service.</returns>
        </member>
        <member name="M:Couchbase.Core.DI.CouchbaseServiceProviderExtensions.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            Gets a service, throws an exception if not registered.
            </summary>
            <typeparam name="T">Service being requested.</typeparam>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/>.</param>
            <returns>The service.</returns>
        </member>
        <member name="M:Couchbase.Core.DI.CouchbaseServiceProviderExtensions.IsService``1(Couchbase.Core.DI.ICouchbaseServiceProvider)">
            <summary>
            Determines if the specified service type is available from the <see cref="T:Couchbase.Core.DI.ICouchbaseServiceProvider"/>.
            </summary>
            <typeparam name="T">Service being tested.</typeparam>
            <param name="serviceProvider">The <see cref="T:Couchbase.Core.DI.ICouchbaseServiceProvider"/>.</param>
            <returns>true if the specified service is a available, false if it is not.</returns>
        </member>
        <member name="M:Couchbase.Core.DI.DefaultServices.GetDefaultServices">
            <summary>
            Provides the default services for a new service provider.
            </summary>
            <returns>The default services. This collection can be safely modified without side effects.</returns>
        </member>
        <member name="T:Couchbase.Core.DI.HttpStreamingConfigListenerFactory">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.DI.IHttpStreamingConfigListenerFactory"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.HttpStreamingConfigListenerFactory.Create(Couchbase.Core.Configuration.Server.IConfigUpdateEventSink,Couchbase.Core.Configuration.Server.IConfigHandler)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.DI.IBucketFactory">
            <summary>
            Creates a <seealso cref="T:Couchbase.Core.BucketBase"/> based on <seealso cref="T:Couchbase.Management.Buckets.BucketType"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.IBucketFactory.Create(System.String,Couchbase.Management.Buckets.BucketType,Couchbase.Core.Configuration.Server.BucketConfig)">
            <summary>
            Creates a <seealso cref="T:Couchbase.Core.BucketBase"/> based on <seealso cref="T:Couchbase.Management.Buckets.BucketType"/>.
            </summary>
            <param name="name">Name of the bucket.</param>
            <param name="bucketType">Type of the bucket.</param>
            <param name="config">The initial bootstrap cluster map config.</param>
            <returns>Correct bucket implementation.</returns>
        </member>
        <member name="T:Couchbase.Core.DI.IClusterNodeFactory">
            <summary>
            Creates a <see cref="T:Couchbase.Core.IClusterNode"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.IClusterNodeFactory.CreateAndConnectAsync(Couchbase.HostEndpointWithPort,Couchbase.Core.Configuration.Server.NodeAdapter,System.Threading.CancellationToken)">
            <summary>
            Create and connect to a <see cref="T:Couchbase.Core.IClusterNode"/>.
            </summary>
            <param name="endPoint"><see cref="T:Couchbase.HostEndpointWithPort"/> of the node.</param>
            <param name="nodeAdapter"></param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The <seealso cref="T:Couchbase.Core.IClusterNode"/> type.</returns>
        </member>
        <member name="M:Couchbase.Core.DI.IClusterNodeFactory.CreateAndConnectAsync(Couchbase.HostEndpointWithPort,System.Threading.CancellationToken)">
            <summary>
            Create and connect to a <see cref="T:Couchbase.Core.IClusterNode"/>.
            </summary>
            <param name="endPoint"><see cref="T:Couchbase.HostEndpointWithPort"/> of the node.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The <seealso cref="T:Couchbase.Core.IClusterNode"/> type.</returns>
        </member>
        <member name="T:Couchbase.Core.DI.ICollectionFactory">
            <summary>
            Creates new <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> implementations.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.ICollectionFactory.Create(Couchbase.Core.BucketBase,Couchbase.KeyValue.IScope,System.String)">
            <summary>
            Create a new <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/>.
            </summary>
            <param name="bucket">The owning <seealso cref="T:Couchbase.Core.BucketBase"/>.</param>
            <param name="scope">The owning scope.</param>
            <param name="name">The collection name.</param>
            <returns>The new collection.</returns>
        </member>
        <member name="T:Couchbase.Core.DI.ICouchbaseServiceProvider">
            <summary>
            Extends <see cref="T:System.IServiceProvider"/> with a method to test for service registration.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.ICouchbaseServiceProvider.IsService(System.Type)">
            <summary>
            Determines if the specified service type is available from the <see cref="T:Couchbase.Core.DI.ICouchbaseServiceProvider"/>.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to test.</param>
            <returns>true if the specified service is a available, false if it is not.</returns>
        </member>
        <member name="T:Couchbase.Core.DI.IHttpStreamingConfigListenerFactory">
            <summary>
            Creates an <see cref="T:Couchbase.Core.Configuration.Server.Streaming.HttpStreamingConfigListener"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.IHttpStreamingConfigListenerFactory.Create(Couchbase.Core.Configuration.Server.IConfigUpdateEventSink,Couchbase.Core.Configuration.Server.IConfigHandler)">
            <summary>
            Creates an <see cref="T:Couchbase.Core.Configuration.Server.Streaming.HttpStreamingConfigListener"/>.
            </summary>
            <param name="configSubscriber"><see cref="T:Couchbase.Core.Configuration.Server.IConfigUpdateEventSink"/> to monitor.</param>
            <param name="configHandler"><see cref="T:Couchbase.Core.Configuration.Server.IConfigHandler"/> to receive events.</param>
            <returns>The <see cref="T:Couchbase.Core.Configuration.Server.Streaming.HttpStreamingConfigListener"/></returns>
        </member>
        <member name="T:Couchbase.Core.DI.IKetamaKeyMapperFactory">
            <summary>
            Creates a new <see cref="T:Couchbase.Core.Sharding.KetamaKeyMapper" />
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.IKetamaKeyMapperFactory.Create(Couchbase.Core.Configuration.Server.BucketConfig)">
            <summary>
            Creates a new <see cref="T:Couchbase.Core.Sharding.KetamaKeyMapper" />
            </summary>
            <param name="bucketConfig">The <see cref="T:Couchbase.Core.Configuration.Server.BucketConfig"/>.</param>
            <returns>The new <see cref="T:Couchbase.Core.Sharding.KetamaKeyMapper"/>.</returns>
            <exception cref="T:System.InvalidOperationException">IP endpoint lookup failed.</exception>
        </member>
        <member name="T:Couchbase.Core.DI.IScopeFactory">
            <summary>
            Creates new <see cref="T:Couchbase.KeyValue.IScope"/> implementations.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.IScopeFactory.CreateScope(System.String,Couchbase.Core.BucketBase)">
            <summary>
            Creates a <see cref="T:Couchbase.KeyValue.Scope"/> given a name and identifier.
            </summary>
            <param name="name">The name of the scope from the application.</param>
            <param name="bucket">The owning <see cref="T:Couchbase.Core.BucketBase"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.DI.IServiceFactory">
            <summary>
            A factory capable of returning a service.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.IServiceFactory.Initialize(System.IServiceProvider)">
            <summary>
            Initializes the factory, making it owned by the given <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="serviceProvider">The <seealso cref="T:System.IServiceProvider"/>.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Couchbase.Core.DI.IServiceFactory.CreateService(System.Type)">
            <summary>
            Creates or returns an existing service.
            </summary>
            <param name="requestedType">Type being requested.</param>
            <returns>The service.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Couchbase.Core.DI.IVBucketFactory">
            <summary>
            Creates a new <see cref="T:Couchbase.Core.Sharding.IVBucket"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.IVBucketFactory.Create(System.Collections.Generic.ICollection{Couchbase.HostEndpointWithPort},System.Int16,System.Int16,System.Int16[],System.UInt64,Couchbase.Core.Sharding.VBucketServerMap,System.String,Couchbase.Core.Configuration.Server.ConfigVersion)">
            <summary>
            Creates a new <see cref="T:Couchbase.Core.Sharding.IVBucket"/>.
            </summary>
            <returns>The new <see cref="T:Couchbase.Core.Sharding.IVBucket"/>.</returns>
        </member>
        <member name="T:Couchbase.Core.DI.IVBucketKeyMapperFactory">
            <summary>
            Creates an <see cref="T:Couchbase.Core.Sharding.IKeyMapper"/> for VBuckets.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.IVBucketKeyMapperFactory.Create(Couchbase.Core.Configuration.Server.BucketConfig,System.Threading.CancellationToken)">
            <summary>
            Creates an <see cref="T:Couchbase.Core.Sharding.IKeyMapper"/> for VBuckets.
            </summary>
            <param name="bucketConfig">Bucket configuration.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <remarks>The new <see cref="T:Couchbase.Core.Sharding.IKeyMapper"/>.</remarks>
        </member>
        <member name="T:Couchbase.Core.DI.KetamaKeyMapperFactory">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.DI.IKetamaKeyMapperFactory"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.KetamaKeyMapperFactory.Create(Couchbase.Core.Configuration.Server.BucketConfig)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.DI.LazyService`1">
            <summary>
            References a singleton of a service that isn't instantiated until required.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Couchbase.Core.DI.LazyService`1.GetValueOrThrow">
            <summary>
            Returns the services or throws if the service is not registered.
            </summary>
            <returns>The service.</returns>
            <exception cref="T:Couchbase.CouchbaseException">The service has not been registered.</exception>
        </member>
        <member name="T:Couchbase.Core.DI.ScopeFactory">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.DI.IScopeFactory"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.ScopeFactory.CreateScope(System.String,Couchbase.Core.BucketBase)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.DI.SingletonGenericServiceFactory">
            <summary>
            Implementation of <see cref="T:Couchbase.Core.DI.IServiceFactory"/> which constructs more specific types
            from a non-specific generic with the same number of type arguments. Keeps a singleton
            of each type to return on subsequent calls.
            </summary>
            <remarks>
            <para>
            For example, new SingletonGenericServiceFactory(typeof(Logger&lt;&gt;)) could be registered
            against ILogger&lt;&gt;. A request for ILogger&lt;SomeType&gt; would return a singleton
            of the more specific implementation Logger&lt;SomeType&gt;.
            </para>
            <para>
            This factory must be registered against a generic type with the same number of type arguments
            and the same or stricter type argument constraints.
            </para>
            <para>
            For trimming compatibility, it is imperative that the interface registered as the service in DI
            have DynamicallyAccessedMembers annotations on the type arguments that match the ones on the concrete
            implementation. For example, if <c>interface IMyInterface&lt;T&gt;</c> is the type being requested from DI and the concrete
            implementation passed to this factory is <c>class MyClass&lt;[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)] T&gt;</c>
            then <c>IMyInterface&lt;T&gt;</c> must have the same annotation on the type argument <c>T</c>.
            See https://github.com/dotnet/runtime/blob/7c00b17be1b2ffb6ed49ad68cf36e9a056323152/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteFactory.cs#L94-L98
            </para>
            </remarks>
        </member>
        <member name="M:Couchbase.Core.DI.SingletonGenericServiceFactory.#ctor(System.Type)">
            <summary>
            Creates a new SingletonGenericServiceFactory.
            </summary>
            <param name="genericType">Non-specific generic type, i.e. Logger&lt;&gt; to construct.</param>
            <exception cref="T:System.ArgumentException">Not a generic type definition.</exception>
        </member>
        <member name="M:Couchbase.Core.DI.SingletonGenericServiceFactory.Initialize(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.DI.SingletonGenericServiceFactory.CreateService(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.DI.SingletonServiceFactory">
            <summary>
            Implementation of <see cref="T:Couchbase.Core.DI.IServiceFactory"/> which always returns the same singleton.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.SingletonServiceFactory.#ctor(System.Object)">
            <summary>
            Creates a new SingletonServiceFactory with a preexisting object.
            </summary>
            <param name="singleton">Singleton to return on each call to <see cref="M:Couchbase.Core.DI.SingletonServiceFactory.CreateService(System.Type)"/>.</param>
        </member>
        <member name="M:Couchbase.Core.DI.SingletonServiceFactory.#ctor(System.Type)">
            <summary>
            Creates a new SingletonServiceFactory with an object of a specific type.
            </summary>
            <param name="implementationType">Implementation type.</param>
            <remarks>
            Delays construction until the first request for the type.
            Uses the constructor with the most parameters.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.DI.SingletonServiceFactory.#ctor(System.Func{System.IServiceProvider,System.Object})">
            <summary>
            Creates a new SingletonServiceFactory which uses a lambda to create the object on the first request.
            </summary>
            <param name="lambda">Lambda function which creates the object.</param>
        </member>
        <member name="M:Couchbase.Core.DI.SingletonServiceFactory.Initialize(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.DI.SingletonServiceFactory.CreateService(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.DI.TransientServiceFactory">
            <summary>
            Implementation of <see cref="T:Couchbase.Core.DI.IServiceFactory"/> which creates a transient
            service for each request.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.TransientServiceFactory.#ctor(System.Func{System.IServiceProvider,System.Object})">
            <summary>
            Creates a new TransientServiceFactory which uses a lambda to create the service.
            </summary>
            <param name="factory">Lambda to invoke on each call to <see cref="M:Couchbase.Core.DI.TransientServiceFactory.CreateService(System.Type)"/>.</param>
        </member>
        <member name="M:Couchbase.Core.DI.TransientServiceFactory.#ctor(System.Type)">
            <summary>
            Creates a new TransientServiceFactory which uses a type's constructor on each call to <see cref="M:Couchbase.Core.DI.TransientServiceFactory.CreateService(System.Type)"/>.
            </summary>
            <param name="type">Type to create on each call to <seealso cref="M:Couchbase.Core.DI.TransientServiceFactory.CreateService(System.Type)"/>.</param>
        </member>
        <member name="M:Couchbase.Core.DI.TransientServiceFactory.Initialize(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.DI.TransientServiceFactory.CreateService(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.DI.VBucketFactory">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.DI.IVBucketFactory"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.VBucketFactory.Create(System.Collections.Generic.ICollection{Couchbase.HostEndpointWithPort},System.Int16,System.Int16,System.Int16[],System.UInt64,Couchbase.Core.Sharding.VBucketServerMap,System.String,Couchbase.Core.Configuration.Server.ConfigVersion)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.DI.VBucketKeyMapperFactory">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.DI.IVBucketKeyMapperFactory"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.DI.VBucketKeyMapperFactory.Create(Couchbase.Core.Configuration.Server.BucketConfig,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.Exceptions.AmbiguousTimeoutException">
            <summary>
            A <see cref="T:Couchbase.Core.Exceptions.TimeoutException"/> where there may be a side effect on the server. A timeout
            happened while performing an non-idempotent operation.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Exceptions.Analytics.AnalyticsErrorContext">
            <remarks>Uncommitted</remarks>
        </member>
        <member name="T:Couchbase.Core.Exceptions.CasMismatchException">
            <summary>
            Raised when a comparison between a stored document's CAS does not match the CAS provided by the
            request indicating the document has been mutated. Each time the document changes its CAS changes.
            A form of optimistic concurrency.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Exceptions.CollectionNotFoundException">
            <summary>
            The collection in the key-space or scope is not found.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotLockedException">
            <summary>
             Thrown when the server reports the document is already locked - generally raised when an unlocking operation is being performed.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Exceptions.KeyValue.IKeyValueErrorContext">
            <remarks>Uncommitted</remarks>
        </member>
        <member name="T:Couchbase.Core.Exceptions.KeyValue.KeyValueErrorContext">
            <remarks>Uncommitted</remarks>
        </member>
        <member name="T:Couchbase.Core.Exceptions.KeyValue.SocketNotAvailableException">
            <summary>
            Thrown when a socket is temporarily unavailable. This exception is caught and will force a retry.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Exceptions.KeyValue.SubDocException">
            <summary>
            This exception handles unrecoverable Sub-Doc API errors. It resolves the naming issue with <see cref="T:Couchbase.Core.Exceptions.KeyValue.SubdocExceptionException"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Exceptions.Query.QueryContextMissingException">
            <summary>The server version requires that the query_context must be included in the query request.
            </summary>
            <remarks>Uncommitted</remarks>
        </member>
        <member name="T:Couchbase.Core.Exceptions.Query.QueryErrorContext">
            <remarks>Uncommitted</remarks>
        </member>
        <member name="T:Couchbase.Core.Exceptions.Search.SearchErrorContext">
            <remarks>Uncommitted</remarks>
        </member>
        <member name="T:Couchbase.Core.Exceptions.StreamAlreadyReadException">
            <summary>
            Thrown when an attempt is made to read a stream of results more than once.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Exceptions.TimeoutException">
            <summary>
            The parent timeout exception of <see cref="T:Couchbase.Core.Exceptions.AmbiguousTimeoutException"/> and <see cref="T:Couchbase.Core.Exceptions.UnambiguousTimeoutException"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Exceptions.UnambiguousTimeoutException">
            <summary>
            A <see cref="T:Couchbase.Core.Exceptions.TimeoutException"/> where we are sure there was no side effect on the server.
            For example an idempotent operation timeout.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Exceptions.View.ViewContextError">
            <remarks>Uncommitted</remarks>
        </member>
        <member name="P:Couchbase.Core.IClusterNode.KeyEndPoints">
            <summary>
            Endpoints by which this node may be referenced for key/value operations.
            </summary>
            <remarks>
            May change over time depending on bootstrap status.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IClusterNode.SelectBucketAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Selects the <see cref="T:Couchbase.IBucket"/> this <see cref="T:Couchbase.Core.ClusterNode" /> is associated to.
            </summary>
            <param name="bucketName">The bucket's name.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="E:Couchbase.Core.IClusterNode.KeyEndPointsChanged">
            <summary>
            Notifies when the <see cref="P:Couchbase.Core.IClusterNode.KeyEndPoints"/> collection is changed.
            </summary>
        </member>
        <member name="T:Couchbase.Core.InternalSerializationContext">
            <summary>
            <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> capable of serializing and deserializing various internal types
            used by the Couchbase SDK to communicate with Couchbase Server.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.AnalyticsMetricsData">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.AnalyticsWarningData">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.BucketConfig">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.CollectionDef">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ConfigVersion">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Ddocs">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ExternalAddressesConfig">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Manifest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Node">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.NodeArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.NodesExt">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Ports">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ScopeDef">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Services">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.AnalyticsErrorContext">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.KeyValueErrorContext">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.SearchErrorContext">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ViewContextError">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ErrorCode">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ErrorMapDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.RetrySpec">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.RetryStrategy">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.HelloKey">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.OpCode">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ResponseStatus">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.TypeSerializerWrapper">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.RetryReason">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.VBucketServerMapDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Pools">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Error">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Reason">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Severity">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.DictionaryStringExternalAddressesConfig">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.DictionaryStringErrorCode">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.DictionaryStringIEnumerableString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.IDictionaryStringObject">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.IEnumerableString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ListCollectionDef">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ListNode">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ListNodesExt">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ListScopeDef">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ListRetryReason">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ListError">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ListInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.ListString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.HttpStatusCode">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.NullableInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Int64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Object">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Int16">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Int16Array">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Int16ArrayArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.StringArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.UInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.UInt64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Couchbase.Core.InternalSerializationContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Couchbase.Core.InternalSerializationContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Core.InternalSerializationContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Core.InternalSerializationContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Couchbase.Core.IO.AsyncState">
            <summary>
            Represents an asynchronous Memcached request in flight.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.AsyncStateBase._response">
            <summary>
            Temporary storage for response data used by SendResponse. This avoids closure related heap allocations.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.AsyncStateBase.Complete(Couchbase.Utils.SlicedMemoryOwner{System.Byte}@)">
            <summary>
            Complete an operation.
            </summary>
            <param name="response">Operation response.</param>
            <returns>True if the operation was completed. False if further responses are expected.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.AsyncStateBase.SendResponseInternal(System.Object)">
            <summary>
            Used by SendResponse, using a static action reduces heap allocations.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Authentication.ISaslMechanism">
            <summary>
            Provides and interface for implementing a SASL authentication mechanism (CRAM MD5 or PLAIN).
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Authentication.ISaslMechanism.MechanismType">
            <summary>
            The type of SASL mechanism to use: PLAIN, CRAM MD5, etc.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Authentication.ISaslMechanism.AuthenticateAsync(Couchbase.Core.IO.Connections.IConnection,System.Threading.CancellationToken)">
            <summary>
            Authenticates a username and password.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.Core.IO.Connections.IConnection"/> which represents a TCP connection to a Couchbase Server.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Authentication.MechanismType">
            <summary>
            Supported SASL authentication types supported by Couchbase Server.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Authentication.MechanismType.ScramSha512">
            <summary>
            The username and password will be sent encrypted using salted Sha512 and will not be human-readable on the wire.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Authentication.MechanismType.ScramSha256">
            <summary>
            The username and password will be sent encrypted using salted Sha256 and will not be human-readable on the wire.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Authentication.MechanismType.ScramSha1">
            <summary>
            The username and password will be sent encrypted using salted Sha1 and will not be human-readable on the wire.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Authentication.MechanismType.CramMd5">
            <summary>
            The username and password will be sent encrypted using CramMD5 and will not be human-readable on the wire.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Authentication.MechanismType.Plain">
            <summary>
            The username and password will be sent using human-readable plain text.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Authentication.PlainSaslMechanism.AuthenticateAsync(Couchbase.Core.IO.Connections.IConnection,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Authentication.SaslMechanismBase">
            <summary>
            Base class for Simple Authentication and Security Layer (SASL) implementations.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Authentication.SaslMechanismBase.MechanismType">
            <summary>
            The type of SASL mechanism to use: SCRAM-SHA1.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Authentication.SaslMechanismBase.SaslOptions">
            <summary>
            Provides the transcoder override for SASL operations.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Authentication.ScramShaMechanism">
            <summary>
            Provides a SCRAM-SHA1 authentication implementation for Couchbase Server 4.5 and greater.
            </summary>
            <seealso cref="T:Couchbase.Core.IO.Authentication.ISaslMechanism" />
        </member>
        <member name="M:Couchbase.Core.IO.Authentication.ScramShaMechanism.#ctor(Couchbase.Core.IO.Authentication.MechanismType,System.String,System.String,Microsoft.Extensions.Logging.ILogger{Couchbase.Core.IO.Authentication.ScramShaMechanism},Couchbase.Core.Diagnostics.Tracing.IRequestTracer,Couchbase.Core.IO.Operations.IOperationConfigurator)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Core.IO.Authentication.ScramShaMechanism"/> class.
            </summary>
            <param name="mechanismType">Type of the mechanism.</param>
            <param name="password">The password for the user.</param>
            <param name="username">The user's name to authenticate.</param>
            <param name="logger">The configured logger.</param>
            <param name="tracer">The request tracer.</param>
            <param name="operationConfigurator">Operation configurator.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Couchbase.Core.IO.Authentication.ScramShaMechanism.ClientNonce">
            <summary>
            Gets or sets the client nonce.
            </summary>
            <value>
            The client nonce.
            </value>
        </member>
        <member name="M:Couchbase.Core.IO.Authentication.ScramShaMechanism.GetSaltedPassword(System.String,System.Byte[],System.Int32)">
            <summary>
            Gets the salted password using <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes"/> - SHA1 only!
            </summary>
            <param name="password">The password.</param>
            <param name="salt">The salt.</param>
            <param name="iterationCount">Number of times to iterate.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Authentication.ScramShaMechanism.DecodeResponse(System.String)">
            <summary>
            Splits the server response into a <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Authentication.ScramShaMechanism.ComputeHash(System.Byte[],System.String)">
            <summary>
            Generate the HMAC with the given SHA algorithm
            </summary>
            <param name="key">The key.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Authentication.ScramShaMechanism.ComputeDigest(System.Byte[])">
            <summary>
            Computes the digest using SHA1.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Authentication.ScramShaMechanism.GetClientProof(System.Byte[],System.String)">
            <summary>
            Gets the client proof so that the client and server can "prove" they have the same auth variable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Authentication.ScramShaMechanism.XorInPlace(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            XOR's the specified result with an operand, updating the result.
            </summary>
            <param name="result">The input and result.</param>
            <param name="other">The operand.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Authentication.ScramShaMechanism.GenerateClientNonce">
            <summary>
            Generates a random client nonce.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.IO.Authentication.X509.CertificateFactory">
            <summary>
            Factory class for creating <see cref="T:Couchbase.Core.IO.Authentication.X509.ICertificateFactory"/> instance that can be assigned to the <see cref="T:Couchbase.Core.IO.Authentication.X509.CertificateFactory"></see> property.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Authentication.X509.CertificateFactory.GetCertificatesByPathAndPassword(System.String,System.String)">
            <summary>
            Creates an <see cref="T:Couchbase.Core.IO.Authentication.X509.ICertificateFactory"/> given a path and password to a .pfx certificate.
            </summary>
            <param name="path"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Authentication.X509.CertificateFactory.GetCertificatesFromStore(Couchbase.Core.IO.Authentication.X509.CertificateStoreSearchCriteria)">
            <summary>
            Creates an <see cref="T:System.Func`1"/> given <see cref="T:Couchbase.Core.IO.Authentication.X509.CertificateStoreSearchCriteria"/> to find a .pfx
            certificate in the Windows Cert Store.
            </summary>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Authentication.X509.CertificateFactory.FromCertificates(System.Security.Cryptography.X509Certificates.X509Certificate2[])">
            <summary>
            Create Creates an <see cref="T:System.Func`1"/> from certificates you have predefined.
            </summary>
            <param name="certs">The pre-defined certificates you wish to use.</param>
            <returns>A certificate factory with predefined certificates.</returns>
        </member>
        <member name="F:Couchbase.Core.IO.Authentication.X509.CertificateFactory.CapellaCaCertPem">
            <summary>
            The certificate (in PEM format) to use by default for connecting to *.cloud.couchbase.com.
            </summary>
            <remarks>
            This in-memory certificate does not work on .NET Framework (legacy) clients.
            </remarks>
        </member>
        <member name="F:Couchbase.Core.IO.Authentication.X509.CertificateFactory.CapellaCaCert">
            <summary>
            The certificate to use by default for connecting to *.cloud.couchbase.com.
            </summary>
            <remarks>
            This in-memory certificate does not work on .NET Framework (legacy) clients.
            </remarks>
        </member>
        <member name="F:Couchbase.Core.IO.Authentication.X509.CertificateFactory.DefaultCertificates">
            <summary>
            Default CA Certificates included with the SDK.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Authentication.X509.CertificatePathFactory">
            <summary>
            A CertificateFactory that looks up an x509 given a directory path and password.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Authentication.X509.CertificateStoreFactory">
            <summary>
            A CertificateFactory that queries the X509Store for a certificate using the search criteria here:
            https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509store?view=netcore-3.1
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Authentication.X509.CertificateStoreSearchCriteria">
            <summary>
            An options class for locating a certification store and returning a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Authentication.X509.CertificateStoreSearchCriteria.StoreName">
            <summary>
            Specifies the name of the X.509 certificate store to open.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Authentication.X509.CertificateStoreSearchCriteria.StoreLocation">
            <summary>
            Specifies the location of the X.509 certificate store.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Authentication.X509.CertificateStoreSearchCriteria.X509FindType">
            <summary>
            Specifies the type of value that will be used to search for the x.509 certificate in the store.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Authentication.X509.CertificateStoreSearchCriteria.FindValue">
            <summary>
            The search criteria as an object.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Compression.CompressionAlgorithm">
            <summary>
            Indicates a compression algorithm, which must be supported by Couchbase Server.
            </summary>
            <remarks>
            This enumeration is for future-proofing, currently only Snappy is supported.
            </remarks>
        </member>
        <member name="F:Couchbase.Core.IO.Compression.CompressionAlgorithm.None">
            <summary>
            Placeholder for a no-op algorithm.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Compression.CompressionAlgorithm.Snappy">
            <summary>
            Snappy.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Compression.ICompressionAlgorithm">
            <summary>
            Interface for an implementation of a compression algorithm used to compress/decompress request and response bodies for key/value operations.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Compression.ICompressionAlgorithm.Algorithm">
            <summary>
            Compression algorithm implemented by this class.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Compression.ICompressionAlgorithm.Compress(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Compresses an input buffer.
            </summary>
            <param name="input">Buffer to compress.</param>
            <returns>
            A compressed buffer. Ownership of the buffer is passed to the caller.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Compression.ICompressionAlgorithm.Decompress(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Decompresses an input buffer.
            </summary>
            <param name="input">Buffer to compress.</param>
            <returns>A compressed buffer. Ownership of the buffer is passed to the caller.</returns>
            <remarks>
            May throw an exception if the input buffer is not valid.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.IO.Compression.IOperationCompressor">
            <summary>
            Compresses or decompresses the body of an operation.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Compression.IOperationCompressor.Compress(System.ReadOnlyMemory{System.Byte},Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Compresses the body of an operation.
            </summary>
            <param name="input">Buffer to compress.</param>
            <param name="parentSpan">If compression is attempted, the parent span for tracing.</param>
            <returns>
            A compressed buffer. Ownership of the buffer is passed to the caller.
            Should return null if compression doesn't meet the configured compression rules, such as minimum size or ratio.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Compression.IOperationCompressor.Decompress(System.ReadOnlyMemory{System.Byte},Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Decompresses the body of an operation.
            </summary>
            <param name="input">Buffer to compress.</param>
            <param name="parentSpan">The parent span for tracing.</param>
            <returns>A compressed buffer. Ownership of the buffer is passed to the caller.</returns>
            <remarks>
            May throw an exception if the input buffer is not valid.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.IO.Compression.NullCompressionAlgorithm">
            <summary>
            Compression algorithm which does not compress or decompress data.
            This is the default if no compression algorithm is registered.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Compression.NullCompressionAlgorithm.Algorithm">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Compression.NullCompressionAlgorithm.Compress(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">No compression algorithm registered.</exception>
        </member>
        <member name="M:Couchbase.Core.IO.Compression.NullCompressionAlgorithm.Decompress(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">No compression algorithm registered.</exception>
        </member>
        <member name="T:Couchbase.Core.IO.Compression.OperationCompressor">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.IO.Compression.IOperationCompressor"/>. Applies logic and logging around compression.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Compression.OperationCompressor.Compress(System.ReadOnlyMemory{System.Byte},Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Compression.OperationCompressor.Decompress(System.ReadOnlyMemory{System.Byte},Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool">
            <summary>
            Connection pool based on queuing operations via the TPL data flows library.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.Size">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.MinimumSize">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.MaximumSize">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.PendingSends">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.#ctor(Couchbase.Core.IO.Connections.IConnectionInitializer,Couchbase.Core.IO.Connections.IConnectionFactory,Couchbase.Core.IO.Connections.IConnectionPoolScaleController,Couchbase.Core.Logging.IRedactor,Microsoft.Extensions.Logging.ILogger{Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool},System.Int32)">
            <summary>
            Creates a new ChannelConnectionPool.
            </summary>
            <param name="connectionInitializer">Handler for initializing new connections.</param>
            <param name="connectionFactory">Factory for creating new connections.</param>
            <param name="scaleController">Scale controller.</param>
            <param name="redactor">Log redactor.</param>
            <param name="logger">Logger.</param>
            <param name="sendQueueCapacity">The maximum number of items the channel will store.
            Defaults to 1024 and is configurable via <see cref="P:Couchbase.ClusterOptions.KvSendQueueCapacity"/></param>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.#ctor(Couchbase.Core.IO.Connections.IConnectionInitializer,Couchbase.Core.IO.Connections.IConnectionFactory,Couchbase.Core.IO.Connections.IConnectionPoolScaleController,Couchbase.Core.Logging.IRedactor,Microsoft.Extensions.Logging.ILogger{Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool},System.Threading.Channels.Channel{Couchbase.Core.IO.Connections.Channels.ChannelQueueItem})">
            <summary>
            Creates a new ChannelConnectionPool.
            </summary>
            <param name="connectionInitializer">Handler for initializing new connections.</param>
            <param name="connectionFactory">Factory for creating new connections.</param>
            <param name="scaleController">Scale controller.</param>
            <param name="redactor">Log redactor.</param>
            <param name="logger">Logger.</param>
            <param name="channel">Channel queue.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.InitializeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.SendAsync(Couchbase.Core.IO.Operations.IOperation,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.TrySendImmediatelyAsync(Couchbase.Core.IO.Operations.IOperation,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.GetConnections">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.ScaleAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.FreezePoolAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool.AddConnectionsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Adds a certain number of connections to the pool. Assumes that the pool is already locked.
            </summary>
            <param name="count">Number of connections to add.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <remarks>
            This method will fail if the total number of requested connections could not be added.
            However, it may have partially succeeded, some connections may have been added.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPoolFactory">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.IO.Connections.IConnectionPoolFactory"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPoolFactory.Create(Couchbase.Core.ClusterNode)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Connections.Channels.ChannelConnectionProcessor">
            <summary>
            Reads the queue from a <see cref="T:Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool" /> for a specific connection,
            greedily processing any operations queued.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Connections.Channels.ChannelConnectionProcessor.CloseTimeout">
            <summary>
            Time to wait for a graceful shutdown of a connection.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.Channels.ChannelConnectionProcessor.Connection">
            <summary>
            Connection managed by this class.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.Channels.ChannelConnectionProcessor.Completion">
            <summary>
            Task which is completed when processing items for this connection is completed.
            </summary>
            <remarks>
            This indicates that the queue is no longer being read and new operations are no
            longer being sent to the connection. It does not necessarily indicate that al
            in-flight operations on the connection are complete.
            </remarks>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.Channels.ChannelConnectionProcessor.IsComplete">
            <summary>
            True when processing items for this connection is completed.
            </summary>
            <remarks>
            This indicates that the queue is no longer being read and new operations are no
            longer being sent to the connection. It does not necessarily indicate that al
            in-flight operations on the connection are complete.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionProcessor.#ctor(Couchbase.Core.IO.Connections.IConnection,Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool,System.Threading.Channels.ChannelReader{Couchbase.Core.IO.Connections.Channels.ChannelQueueItem},Microsoft.Extensions.Logging.ILogger{Couchbase.Core.IO.Connections.Channels.ChannelConnectionPool})">
            <summary>
            Creates a new ChannelConnectionProcessor.
            </summary>
            <param name="connection">Connection to be managed.</param>
            <param name="connectionPool">Connection pool this connection belongs to.</param>
            <param name="channelReader">Reader from which to dequeue operations to be sent.</param>
            <param name="logger">Logger.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionProcessor.Process">
            <summary>
            Long running task to process items from the queue.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.Channels.ChannelConnectionProcessor.CompleteAsync">
            <summary>
            Stop processing new operations from the queue.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Connections.ConnectionFactory">
            <summary>
                Default implementation for <see cref="T:Couchbase.Core.IO.Connections.IConnectionFactory" />.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionFactory.CreateAndConnectAsync(Couchbase.HostEndpointWithPort,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Connections.ConnectionIdProvider">
            <summary>
            Provides unique connection IDs for <see cref="T:Couchbase.Core.IO.Connections.IConnection"/> implementations.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionIdProvider.GetNextId">
            <summary>
            Provides unique connection IDs for <see cref="T:Couchbase.Core.IO.Connections.IConnection"/> implementations.
            </summary>
            <returns>A unique connection ID.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Connections.ConnectionPoolBase">
            <summary>
            Base class for implementations of <see cref="T:Couchbase.Core.IO.Connections.IConnectionPool"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionPoolBase.TrackConnectionPool(Couchbase.Core.IO.Connections.ConnectionPoolBase)">
            <summary>
            Add a connection pool to the list of active connection pools. We don't want to do this in the ConnectionPoolBase
            constructor because the constructor of the inherited class will not be complete yet. This will generally be the
            last method called by the inherited class constructor.
            </summary>
            <param name="connectionPool">Connection pool to track.</param>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.ConnectionPoolBase.EndPoint">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.ConnectionPoolBase.Size">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.ConnectionPoolBase.MinimumSize">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.ConnectionPoolBase.MaximumSize">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.ConnectionPoolBase.PendingSends">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.ConnectionPoolBase.BucketName">
            <summary>
            Current bucket name passed to <see cref="M:Couchbase.Core.IO.Connections.ConnectionPoolBase.SelectBucketAsync(System.String,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionPoolBase.#ctor(Couchbase.Core.IO.Connections.IConnectionInitializer,Couchbase.Core.IO.Connections.IConnectionFactory,Microsoft.Extensions.Logging.ILogger{Couchbase.Core.IO.Connections.IConnectionPool})">
            <summary>
            Creates a new ConnectionPoolBase.
            </summary>
            <param name="connectionInitializer">Handler for initializing new connections.</param>
            <param name="connectionFactory">Factory for creating new connections.</param>
            <param name="logger">The logger for logging.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionPoolBase.CreateConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Helper method which creates and initializes a new <see cref="T:Couchbase.Core.IO.Connections.IConnection"/> when needed by the pool.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The new connection.</returns>
            <remarks>
            The connection will be initialized. If <see cref="P:Couchbase.Core.IO.Connections.ConnectionPoolBase.BucketName"/> is not null the initial bucket will be selected automatically.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionPoolBase.SelectBucketAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionPoolBase.FreezePoolAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionPoolBase.InitializeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionPoolBase.SendAsync(Couchbase.Core.IO.Operations.IOperation,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionPoolBase.TrySendImmediatelyAsync(Couchbase.Core.IO.Operations.IOperation,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionPoolBase.GetConnections">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionPoolBase.ScaleAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionPoolBase.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Connections.ConnectionPoolFactory">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.IO.Connections.IConnectionPoolFactory"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionPoolFactory.Create(Couchbase.Core.ClusterNode)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Connections.ConnectionPoolScaleControllerFactory">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.IO.Connections.IConnectionPoolScaleControllerFactory"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.ConnectionPoolScaleControllerFactory.Create">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool">
            <summary>
            Connection pool based on queuing operations via the TPL data flows library.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.Size">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.MinimumSize">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.MaximumSize">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.PendingSends">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.#ctor(Couchbase.Core.IO.Connections.IConnectionInitializer,Couchbase.Core.IO.Connections.IConnectionFactory,Couchbase.Core.IO.Connections.IConnectionPoolScaleController,Couchbase.Core.Logging.IRedactor,Microsoft.Extensions.Logging.ILogger{Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool},System.UInt32)">
            <summary>
            Creates a new DataFlowConnectionPool.
            </summary>
            <param name="connectionInitializer">Handler for initializing new connections.</param>
            <param name="connectionFactory">Factory for creating new connections.</param>
            <param name="scaleController">Scale controller.</param>
            <param name="redactor">Log redactor.</param>
            <param name="logger">Logger.</param>
            <param name="kvSendQueueCapacity"></param>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.InitializeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.SendAsync(Couchbase.Core.IO.Operations.IOperation,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.GetConnections">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.ScaleAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.FreezePoolAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.CompleteSendQueue">
            <summary>
            For UNIT TESTING ONLY. Causes all future operations to fail with <see cref="T:Couchbase.Core.Exceptions.KeyValue.SendQueueFullException"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.AddConnectionsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Adds a certain number of connections to the pool. Assumes that the pool is already locked.
            </summary>
            <param name="count">Number of connections to add.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <remarks>
            This method will fail if the total number of requested connections could not be added.
            However, it may have partially succeeded, some connections may have been added.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.BuildHandler(Couchbase.Core.IO.Connections.IConnection)">
            <summary>
            Creates a SendOperationRequest handler for a specific connection.
            </summary>
            <param name="connection">The connection.</param>
            <returns>The handler.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.DataFlow.DataFlowConnectionPool.CleanupDeadConnectionsAsync">
            <summary>
            Locks the collection, removes any dead connections, and replaces them.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.IO.Connections.DefaultConnectionPoolScaleController">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.IO.Connections.IConnectionPoolScaleController"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.DefaultConnectionPoolScaleController.PollInterval">
            <summary>
            How often the scale controller should monitor the pool.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.DefaultConnectionPoolScaleController.IdleConnectionTimeout">
            <summary>
            Connections may be closed if they are idle for at least this length of time.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.DefaultConnectionPoolScaleController.BackPressureThreshold">
            <summary>
            Amount of back pressure in the send queue necessary before a scale up is initiated.
            </summary>
            <remarks>
            If the number of queued items in <see cref="P:Couchbase.Core.IO.Connections.IConnectionPool.PendingSends"/> exceeds
            this value, the scale controller will choose to increase the size of the pool.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.DefaultConnectionPoolScaleController.Start(Couchbase.Core.IO.Connections.IConnectionPool)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.DefaultConnectionPoolScaleController.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Connections.IConnection">
            <summary>
            Represents a TCP connection to a Couchbase Server instance.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnection.ContextId">
            <summary>
            Unique identifier for the connection.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnection.ConnectionId">
            <summary>
            Internal randomly generated connection ID.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnection.IsAuthenticated">
            <summary>
            True if the connection has been SASL authenticated.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnection.IsSecure">
            <summary>
            True if connection is using SSL
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnection.IsConnected">
            <summary>
            Gets a value indicating whether the underlying socket is connected to the remote host.
            </summary>
            <value>
            <c>true</c> if this socket is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnection.EndPoint">
            <summary>
            Gets the remote hosts <see cref="P:Couchbase.Core.IO.Connections.IConnection.EndPoint"/> that this <see cref="T:Couchbase.Core.IO.Connections.IConnection"/> is connected to.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnection.LocalEndPoint">
            <summary>
            Gets the local endpoint for the connected socket.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnection.EndpointState">
            <summary>
            State of the connection. Default is "Disconnected"
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnection.IsDead">
            <summary>
            Gets or sets a value indicating whether this instance is dead.
            </summary>
            <value>
              <c>true</c> if this instance is dead; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnection.IdleTime">
            <summary>
            Gets the amount of time this connection has been idle.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnection.ServerFeatures">
            <summary>
            Features supported by the connection.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnection.SendAsync(System.ReadOnlyMemory{System.Byte},Couchbase.Core.IO.Operations.IOperation,System.Threading.CancellationToken)">
            <summary>
            Sends a request packet as an asynchronous operation.
            </summary>
            <param name="buffer">A memcached request buffer.</param>
            <param name="operation">Operation being sent which will receive the completion notification.</param>
            <param name="cancellationToken">Cancellation token which cancels the send. The operation is unaffected if cancelled.</param>
            <remarks>
            Completion of the returned task indicates that the operation has been sent on the wire.
            The operation will be marked as complete when a response is received.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnection.CloseAsync(System.TimeSpan)">
            <summary>
            Closes the connection gracefully, waiting up to timeout for all in-flight operations
            to be completed, then disposes the connection.
            </summary>
            <param name="timeout">Time to wait for in-flight operations.</param>
            <returns>Task to observe for completion.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnection.AddTags(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Add tags related to this connection to a tracing span.
            </summary>
            <param name="span">The tracing span to update.</param>
        </member>
        <member name="T:Couchbase.Core.IO.Connections.IConnectionFactory">
            <summary>
            Creates and connects an <see cref="T:Couchbase.Core.IO.Connections.IConnection"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnectionFactory.CreateAndConnectAsync(Couchbase.HostEndpointWithPort,System.Threading.CancellationToken)">
            <summary>
            Creates and connects an <see cref="T:Couchbase.Core.IO.Connections.IConnection"/>.
            </summary>
            <param name="hostEndpoint">Endpoint to connect.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The new <see cref="T:Couchbase.Core.IO.Connections.IConnection"/>.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Connections.IConnectionInitializer">
            <summary>
            Interface for initializing a newly connected <see cref="T:Couchbase.Core.IO.Connections.IConnection"/>.
            Primarily used by <see cref="T:Couchbase.Core.IO.Connections.IConnectionPool"/> implementations to support
            creating new connections as needed.
            </summary>
            <seealso cref="T:Couchbase.Core.ClusterNode"/>.
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnectionInitializer.EndPoint">
            <summary>
            <see cref="T:Couchbase.HostEndpointWithPort"/> of the node being connected to.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnectionInitializer.InitializeConnectionAsync(Couchbase.Core.IO.Connections.IConnection,System.Threading.CancellationToken)">
            <summary>
            Initializes and authenticates a new <see cref="T:Couchbase.Core.IO.Connections.IConnection"/>.
            </summary>
            <param name="connection">A newly connected <see cref="T:Couchbase.Core.IO.Connections.IConnection"/>.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <remarks>Task to observe for completion.</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnectionInitializer.SelectBucketAsync(Couchbase.Core.IO.Connections.IConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Selects the active bucket on an <see cref="T:Couchbase.Core.IO.Connections.IConnection"/>.
            </summary>
            <param name="connection">An active and initialized <see cref="T:Couchbase.Core.IO.Connections.IConnection"/>.</param>
            <param name="name">Name of the bucket.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <remarks>Task to observe for completion.</remarks>
        </member>
        <member name="T:Couchbase.Core.IO.Connections.IConnectionPool">
            <summary>
            Represents a pool of TCP connections to a Couchbase Server node.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnectionPool.EndPoint">
            <summary>
            The <see cref="T:Couchbase.HostEndpointWithPort"/> of the server that the <see cref="T:Couchbase.Core.IO.Connections.IConnection"/>s are connected to.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnectionPool.Size">
            <summary>
            Current size of the pool.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnectionPool.MinimumSize">
            <summary>
            Minimum number of connections in the pool.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnectionPool.MaximumSize">
            <summary>
            Maximum number of connections in the pool.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.IConnectionPool.PendingSends">
            <summary>
            The number of pending sends on the connection pool.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnectionPool.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initialize the connection pool, opening initial connections and generally preparing the pool for use.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>\
            <remarks>Task to observe for completion.</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnectionPool.SendAsync(Couchbase.Core.IO.Operations.IOperation,System.Threading.CancellationToken)">
            <summary>
            Send an operation via a connection in the pool.
            </summary>
            <param name="op"><see cref="T:Couchbase.Core.IO.Operations.IOperation"/> to send.</param>
            <param name="cancellationToken">Cancellation token which cancels the send. The operation is unaffected if cancelled.</param>
            <returns>Task to observe for completion.</returns>
            <remarks>
            Completion of the returned task indicates that the operation has been either sent or queued to be sent.
            The operation will be marked as complete when a response is received.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnectionPool.TrySendImmediatelyAsync(Couchbase.Core.IO.Operations.IOperation,System.Threading.CancellationToken)">
            <summary>
            If supported, sends an operation immediately, bypassing any queueing or other delays.
            When the operation is not queued the task will block waiting for the send to complete.
            </summary>
            <param name="op"><see cref="T:Couchbase.Core.IO.Operations.IOperation"/> to send.</param>
            <param name="cancellationToken">Cancellation token which cancels the send. The operation is unaffected if cancelled.</param>
            <returns>True if sent immediately, or false if queued.</returns>
            <remarks>
            <para>
            Completion of the returned task indicates that the operation has been either sent or queued to be sent.
            The operation will be marked as complete when a response is received.
            </para>
            <para>
            This cannot jump an operation in line in front of an already-started write, it may block waiting for another
            write to complete before sending this operation. Also, if multiple operations are sent simultaneously via
            TrySendImmediatelyAsync they may block each other waiting for a connection to become available.
            </para>
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnectionPool.FreezePoolAsync(System.Threading.CancellationToken)">
            <summary>
            Requests that the connections in the pool be frozen, with no connections being added or removed.
            </summary>
            <returns>An <seealso cref="T:System.IAsyncDisposable"/> which releases the freeze when disposed.</returns>
            <remarks>
            Should be overriden by any derived class which supports rescaling connections.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnectionPool.SelectBucketAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Selects the bucket for all connections on the pool.
            </summary>
            <param name="name">The bucket name.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnectionPool.GetConnections">
            <summary>
            Returns a snapshot in time list of the current connections in the pool.
            </summary>
            <returns>The current connections in the pool.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnectionPool.ScaleAsync(System.Int32)">
            <summary>
            Scale the pool up or down by a certain amount.
            </summary>
            <param name="delta">Amount to scale the pool.</param>
            <returns>Task to observer for completion.</returns>
            <remarks>
            It is assumed that the caller has already frozen the pool before calling ScalePool.
            Not freezing first so will have unexpected results.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.IO.Connections.IConnectionPoolFactory">
            <summary>
            Creates a new <see cref="T:Couchbase.Core.IO.Connections.IConnectionPool"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnectionPoolFactory.Create(Couchbase.Core.ClusterNode)">
            <summary>
            Creates a new <see cref="T:Couchbase.Core.IO.Connections.IConnectionPool"/>.
            </summary>
            <param name="clusterNode"><see cref="T:Couchbase.Core.ClusterNode"/> which will own this <see cref="T:Couchbase.Core.IO.Connections.IConnectionPool"/>.</param>
        </member>
        <member name="T:Couchbase.Core.IO.Connections.IConnectionPoolScaleController">
            <summary>
            Monitors a <see cref="T:Couchbase.Core.IO.Connections.IConnectionPool"/> and adjusts its size based on load.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnectionPoolScaleController.Start(Couchbase.Core.IO.Connections.IConnectionPool)">
            <summary>
            Start the scale controller.
            </summary>
            <param name="connectionPool">The <see cref="T:Couchbase.Core.IO.Connections.IConnectionPool"/> to scale.</param>
        </member>
        <member name="T:Couchbase.Core.IO.Connections.IConnectionPoolScaleControllerFactory">
            <summary>
            Creates a new <see cref="T:Couchbase.Core.IO.Connections.IConnectionPoolScaleController"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.IConnectionPoolScaleControllerFactory.Create">
            <summary>
            Creates a new <see cref="T:Couchbase.Core.IO.Connections.IConnectionPoolScaleController"/>.
            </summary>
            <returns>A new <see cref="T:Couchbase.Core.IO.Connections.IConnectionPoolScaleController"/>.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Connections.InFlightOperationSet">
            <summary>
            Tracks a set of in-flight operations for <see cref="T:Couchbase.Core.IO.Connections.MultiplexingConnection"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.InFlightOperationSet.Count">
            <summary>
            Number of currently in-flight operations.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.InFlightOperationSet.MaximumOperations">
            <summary>
            Maximum number of operations which may be in-flight.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.InFlightOperationSet.Timeout">
            <summary>
            How long an orphaned operation is left in the in-flight list before being removed by the cleanup process.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.InFlightOperationSet.CleanupInterval">
            <summary>
            How frequently the cleanup process checks for operations past the <see cref="P:Couchbase.Core.IO.Connections.InFlightOperationSet.Timeout"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.InFlightOperationSet.#ctor(System.Int32,System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new InFlightOperationSet.
            </summary>
            <param name="maximumOperations">Maximum number of operations which may be in-flight.</param>
            <param name="timeout">Timeout after which an operation is canceled.</param>
            <param name="cleanupInterval">How frequently the in flight set is scanned for orphaned operations.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.InFlightOperationSet.AddAsync(Couchbase.Core.IO.AsyncStateBase,System.Threading.CancellationToken)">
            <summary>
            Adds a operation to the set once there is room available.
            </summary>
            <param name="state">Operation to add.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.InFlightOperationSet.TryRemove(System.UInt32,Couchbase.Core.IO.AsyncStateBase@)">
            <summary>
            Try to remove an operation from the set.
            </summary>
            <param name="opaque">Opaque identifier of the operation to remove.</param>
            <param name="state">The operation state, if found.</param>
            <returns>True if the operation was found.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.InFlightOperationSet.TryGet(System.UInt32,Couchbase.Core.IO.AsyncStateBase@)">
            <summary>
            Try to get an operation from the set.
            </summary>
            <param name="opaque">Opaque identifier of the operation to get.</param>
            <param name="state">The operation state, if found.</param>
            <returns>True if the operation was found.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.InFlightOperationSet.WaitForAllOperationsAsync(System.TimeSpan)">
            <summary>
            Wait for all currently in flight operations to complete.
            </summary>
            <param name="timeout">Timeout before the wait is canceled.</param>
            <returns>A task to observe for completion.</returns>
            <remarks>
            This method will not wait for any new operations added after it is run.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.InFlightOperationSet.CleanupLoop">
            <summary>
            Loop which runs until disposed to check for orphaned operations. Any found running
            more than the configured timeout are disposed and removed from the collection.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.MultiplexingConnection.ConnectionId">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.MultiplexingConnection.IsConnected">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.MultiplexingConnection.EndPoint">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.MultiplexingConnection.LocalEndPoint">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.MultiplexingConnection.EndpointState">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.MultiplexingConnection.IsAuthenticated">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.MultiplexingConnection.IsSecure">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.MultiplexingConnection.IsDead">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.MultiplexingConnection.ServerFeatures">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.MultiplexingConnection.SendAsync(System.ReadOnlyMemory{System.Byte},Couchbase.Core.IO.Operations.IOperation,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.MultiplexingConnection.ReceiveResponsesAsync">
            <summary>
            Continuously running task which constantly listens for responses
            coming back from the server and processes the responses once complete.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.MultiplexingConnection.TryReadOperation(System.Buffers.ReadOnlySequence{System.Byte}@,Couchbase.Utils.SlicedMemoryOwner{System.Byte}@)">
            <summary>
            Parses the received data checking the buffer to see if a completed response has arrived.
            If it has, the operation is copied to a new, complete buffer and true is returned.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.MultiplexingConnection.IdleTime">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.MultiplexingConnection.OnClusterMapChangeNotification">
            <summary>
            Publishes any ClusterMapConfigNotification responses from the server to the subscriber
            which in turn convert the response into a cluster map and possible publish to the ConfigHandler.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.MultiplexingConnection.CloseAsync(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.MultiplexingConnection.AddTags(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Connections.SingleConnectionPool">
            <summary>
            Legacy implementation of an <see cref="T:Couchbase.Core.IO.Connections.IConnectionPool"/> which only contains a single connection.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SingleConnectionPool.Size">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SingleConnectionPool.MinimumSize">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SingleConnectionPool.MaximumSize">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SingleConnectionPool.PendingSends">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.SingleConnectionPool.#ctor(Couchbase.Core.IO.Connections.IConnectionInitializer,Couchbase.Core.IO.Connections.IConnectionFactory,Microsoft.Extensions.Logging.ILogger{Couchbase.Core.IO.Connections.IConnectionPool})">
            <summary>
            Creates a new SingleConnectionPool.
            </summary>
            <param name="connectionInitializer">Handler for initializing new connections.</param>
            <param name="connectionFactory">Factory for creating new connections.</param>
            <param name="logger">The logger for logging.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Connections.SingleConnectionPool.InitializeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.SingleConnectionPool.SendAsync(Couchbase.Core.IO.Operations.IOperation,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.SingleConnectionPool.GetConnections">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.SingleConnectionPool.ScaleAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.SingleConnectionPool.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SslConnection.ConnectionId">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SslConnection.IsConnected">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SslConnection.EndPoint">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SslConnection.LocalEndPoint">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SslConnection.EndpointState">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SslConnection.IsAuthenticated">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SslConnection.IsSecure">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SslConnection.IsDead">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SslConnection.IdleTime">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Connections.SslConnection.ServerFeatures">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.SslConnection.SendAsync(System.ReadOnlyMemory{System.Byte},Couchbase.Core.IO.Operations.IOperation,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.SslConnection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.SslConnection.CloseAsync(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Connections.SslConnection.AddTags(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Converters.ByteConverter">
            <summary>
            Converts types and arrays before being sent or after being received across the network.
            Unless an overload is called  with useNbo = false, Network Byte Order will be used in the conversion.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Boolean"/> from a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">if set to <c>true</c> [use nbo].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToSingle(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Single"/> from a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">if set to <c>true</c> [use nbo].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToDateTime(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Reads a <see cref="T:System.DateTime"/> from a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">if set to <c>true</c> [use nbo].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToDouble(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            To the double.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">if set to <c>true</c> [use nbo].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToInt16(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int16" /> from a buffer starting.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToUInt16(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt16" /> from a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToInt32(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int32" /> from a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToUInt32(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt32" /> from a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToInt64(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int64" /> from a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToUInt64(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt64" /> from a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToString(System.ReadOnlySpan{System.Byte})">
            <summary>
            Returns a <see cref="T:System.String" /> from the buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.FromInt16(System.Int16,System.Span{System.Byte},System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int16" /> to a buffer.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.FromUInt16(System.UInt16,System.Span{System.Byte},System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> to a buffer.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.FromInt32(System.Int32,System.Span{System.Byte},System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int32" /> to a buffer.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.FromUInt32(System.UInt32,System.Span{System.Byte},System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> to a buffer.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.FromInt64(System.Int64,System.Span{System.Byte},System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int64" /> to a buffer.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.FromUInt64(System.UInt64,System.Span{System.Byte},System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> to a buffer.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.GetStringByteCount(System.String)">
            <summary>
            Gets the number of bytes required to convert a string.
            </summary>
            <param name="value">The value.</param>
            <returns>The number of bytes required to convert the string.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.FromString(System.String,System.Span{System.Byte})">
            <summary>
            Writes a <see cref="T:System.String"/> to a buffer.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <returns>Number of bytes written to the buffer.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToInt16(System.ReadOnlySpan{System.Byte})">
            <summary>
             Reads a <see cref="T:System.Int16"/> from a buffer, using network byte order.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToUInt16(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from a buffer, using network byte order.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToInt32(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a <see cref="T:System.Int32" /> from a buffer, using network byte order.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToUInt32(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from a buffer, using network byte order.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToInt64(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a <see cref="T:System.Int64"/> from a buffer, using network byte order.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.ToUInt64(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from a buffer, using network byte order.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.FromInt16(System.Int16,System.Span{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Int16"/> to a buffer, using network byte order.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.FromUInt16(System.UInt16,System.Span{System.Byte})">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to a buffer, using network byte order.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.FromInt32(System.Int32,System.Span{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Int32"/> to a buffer, using network byte order.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.FromUInt32(System.UInt32,System.Span{System.Byte})">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to a buffer, using network byte order.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.FromInt64(System.Int64,System.Span{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Int64"/> to a buffer, using network byte order.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Converters.ByteConverter.FromUInt64(System.UInt64,System.Span{System.Byte})">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer, using network byte order.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="T:Couchbase.Core.IO.HeaderOffsets">
            <remarks>
            See http://code.google.com/p/memcached/wiki/BinaryProtocolRevamped#Packet_Structure
            </remarks>
        </member>
        <member name="T:Couchbase.Core.IO.HTTP.CouchbaseHttpClientFactory">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.IO.HTTP.CouchbaseHttpClientFactory"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.HTTP.CouchbaseHttpClientFactory.DefaultCompletionOption">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.HTTP.CouchbaseHttpClientFactory.Create">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.HTTP.HttpServiceBase">
            <summary>
            Base class for HTTP services to inherit from to provide consistent access to clusterOptions,
            http client and data mapper.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.HTTP.HttpServiceBase.HttpClientFactory">
            <summary>
            Factory to get a one-time use <see cref="T:System.Net.Http.HttpClient"/> used to execute the HTTP request against the Couchbase server.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.HTTP.HttpServiceBase.LastActivity">
            <summary>
            Gets or sets the last activity.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.HTTP.HttpServiceBase.ConnectionId">
            <summary>
            Gets the connection identifier for this HTTP service instance.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.HTTP.HttpServiceBase.UpdateLastActivity">
            <summary>
            The clusterOptions context for this instance.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.HTTP.HttpServiceBase.CreateHttpClient(System.Nullable{System.TimeSpan})">
            <summary>
            Creates a one-time use <see cref="T:System.Net.Http.HttpClient"/>.
            </summary>
            <param name="timeout">Optional timeout override.</param>
            <remarks>
            It is safe to dispose this after every use. It reuses the inner HttpMessageHandler.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.IO.HTTP.ICouchbaseHttpClientFactory">
            <summary>
            Creates an <see cref="T:System.Net.Http.HttpClient"/> which may be safely configured and disposed, but while
            reusing inner handlers for connection pooling and HTTP keep-alives.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.HTTP.ICouchbaseHttpClientFactory.Create">
            <summary>
            Creates an <see cref="T:System.Net.Http.HttpClient"/> which may be safely configured and disposed, but while
            reusing inner handlers for connection pooling and HTTP keep-alives.
            </summary>
            <returns>
            An <see cref="T:System.Net.Http.HttpClient"/> intended to be short-lived.
            </returns>
            <remarks>
            It is safe to dispose this after every use. It reuses the inner HttpMessageHandler.
            </remarks>
        </member>
        <member name="P:Couchbase.Core.IO.HTTP.ICouchbaseHttpClientFactory.DefaultCompletionOption">
            <summary>
            Default response streaming behavior for HTTP requests. Controlled by <see cref="P:Couchbase.TuningOptions.StreamHttpResponseBodies"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.HTTP.UriExtensions.SetServicePointOptions(System.Uri,Couchbase.ClusterOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Sets in ServicePoint properties if using a pre-.NET3.1 runtime.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to set the property on that matches the <see cref="T:System.Net.ServicePointManager"/></param>
            <param name="options">The <see cref="T:Couchbase.ClusterOptions"/> with options for the <see cref="T:System.Net.ServicePointManager"/></param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for logging any exceptions.</param>
            <remarks>For .NET versions 3.1 this method is ignored; set on the SocketsHttpHandler directly.</remarks>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.Authentication.SaslList">
            <summary>
            Gets the supported SASL Mechanisms supported by the Couchbase Server.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.Authentication.SaslStart">
            <summary>
            Starts the SASL authentication process using a specified SASL mechanism type as a key.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.Authentication.SaslStep">
            <summary>
            Peforms the next step in the in SASL authentication process when required by a AuthenticationContinue message from a <see cref="T:Couchbase.Core.IO.Operations.Authentication.SaslStart"/> operation.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.BufferExtensions.ToOpCode(System.Byte)">
            <summary>
            Converts a <see cref="T:System.Byte"/> to an <see cref="T:Couchbase.Core.IO.Operations.OpCode"/>
            </summary>
            <param name="value"></param> enumeration value.
            <returns>A <see cref="T:Couchbase.Core.IO.Operations.OpCode"/> enumeration value.</returns>
            <remarks><see cref="T:Couchbase.Core.IO.Operations.OpCode"/> are the available operations supported by Couchbase.</remarks>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.CancellationTokenPair">
            <summary>
            Represents a pair of cancellation tokens for a K/V operation. One token is the token which
            is provided by the SDK consumer to request cancellation. The other is a token which
            represents internal cancellation reasons, such as timeouts.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPair.ExternalToken">
            <inheritdoc cref="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.ExternalToken"/>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPair.InternalToken">
            <inheritdoc cref="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.InternalToken"/>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPair.GlobalToken">
            <inheritdoc cref="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.GlobalToken"/>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPair.CanBeCanceled">
            <inheritdoc cref="P:System.Threading.CancellationToken.CanBeCanceled" />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPair.IsCancellationRequested">
            <inheritdoc cref="P:System.Threading.CancellationToken.IsCancellationRequested" />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPair.IsExternalCancellation">
            <inheritdoc cref="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.IsExternalCancellation"/>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPair.IsInternalCancellation">
            <inheritdoc cref="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.IsInternalCancellation"/>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPair.CanceledToken">
            <summary>
            Returns the <see cref="T:System.Threading.CancellationToken"/> which triggered cancellation, or <see cref="P:System.Threading.CancellationToken.None"/>
            if cancellation has not been requested.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPair.#ctor(Couchbase.Core.IO.Operations.CancellationTokenPairSource)">
            <summary>
            Constructs a CancellationTokenPair.
            </summary>
            <param name="source">The source of the cancellation token pair.</param>
            <remarks>
            Should be used by <see cref="T:Couchbase.Core.IO.Operations.CancellationTokenPairSource"/> only, do not call directly.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPair.ThrowIfCancellationRequested">
            <inheritdoc cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPair.Register(System.Action)">
            <inheritdoc cref="M:System.Threading.CancellationToken.Register(System.Action)" />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPair.Register(System.Action{System.Object},System.Object)">
            <inheritdoc cref="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)" />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPair.UnsafeRegister(System.Action{System.Object},System.Object)">
            <inheritdoc cref="M:System.Threading.CancellationToken.UnsafeRegister(System.Action{System.Object},System.Object)" />
        </member>
        <member name="T:Couchbase.Core.IO.Operations.CancellationTokenPairSource">
            <summary>
            Represents a pair of cancellation tokens for a K/V operation. One token is the token which
            is provided by the SDK consumer to request cancellation. The other is a token which
            represents internal cancellation reasons, such as timeouts.
            </summary>
            <remarks>
            It is important to <see cref="M:Couchbase.Core.IO.Operations.CancellationTokenPairSource.Dispose"/> this object in order to avoid memory leaks. Such leaks
            may occur if one of the supplied CancellationToken instances is long-lived or if <see cref="M:Couchbase.Core.IO.Operations.CancellationTokenPairSource.FromTimeout(System.TimeSpan,System.Threading.CancellationToken)"/>
            is used to apply a timeout.
            </remarks>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.ExternalToken">
            <summary>
            Token which is provided by the SDK consumer to request cancellation.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.InternalToken">
            <summary>
            Token which is created for internal cancellation reasons such as timeouts.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.GlobalToken">
            <summary>
            Token which combines the <see cref="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.ExternalToken"/> and <see cref="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.InternalToken"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.TokenPair">
            <summary>
            Gets a <see cref="T:Couchbase.Core.IO.Operations.CancellationTokenPair"/> triggered by this source.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.CanBeCanceled">
            <inheritdoc cref="P:System.Threading.CancellationToken.CanBeCanceled" />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.IsCancellationRequested">
            <inheritdoc cref="P:System.Threading.CancellationToken.IsCancellationRequested" />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.IsExternalCancellation">
            <summary>
            Indicates if the pair has been canceled by the <see cref="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.ExternalToken"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.IsInternalCancellation">
            <summary>
            Indicates if the pair has been canceled by the <see cref="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.InternalToken"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.CanceledToken">
            <summary>
            Returns the <see cref="T:System.Threading.CancellationToken"/> which triggered cancellation, or <see cref="P:System.Threading.CancellationToken.None"/>
            if cancellation has not been requested.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPairSource.#ctor(System.Threading.CancellationToken,System.Threading.CancellationToken)">
            <summary>
            Constructs a CancellationTokenPairSource.
            </summary>
            <param name="externalToken">Token which is provided by the SDK consumer to request cancellation.</param>
            <param name="internalToken">Token which combines the <see cref="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.ExternalToken"/> with additional cancellation reasons, such as timeouts.</param>
            <remarks>
            The global token must also be canceled any time the external token is canceled.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPairSource.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPairSource.ThrowIfCancellationRequested">
            <inheritdoc cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPairSource.Register(System.Action)">
            <inheritdoc cref="M:System.Threading.CancellationToken.Register(System.Action)" />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPairSource.Register(System.Action{System.Object},System.Object)">
            <inheritdoc cref="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)" />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPairSource.UnsafeRegister(System.Action{System.Object},System.Object)">
            <inheritdoc cref="M:System.Threading.CancellationToken.UnsafeRegister(System.Action{System.Object},System.Object)" />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPairSource.FromExternalToken(System.Threading.CancellationToken)">
            <summary>
            Creates a CancellationTokenPairSource using a single external token.
            </summary>
            <param name="externalToken">The external token.</param>
            <returns>The CancellationTokenPairSource.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPairSource.FromInternalToken(System.Threading.CancellationToken)">
            <summary>
            Creates a CancellationTokenPairSource using a single internal token.
            </summary>
            <param name="internalToken">The internal token.</param>
            <returns>The CancellationTokenPairSource.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.CancellationTokenPairSource.FromTimeout(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Creates a CancellationTokenPairSource with a timeout for the <see cref="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.InternalToken"/>.
            </summary>
            <param name="timeout">Timeout to trigger the <see cref="P:Couchbase.Core.IO.Operations.CancellationTokenPairSource.InternalToken"/>.</param>
            <param name="externalToken">Token which is provided by the SDK consumer to request cancellation.</param>
            <returns>The CancellationTokenPairSource.</returns>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Collections.GetCid.CoerceKey">
            <summary>
            Creates a key either by the Key property or the Content property.
            <remarks>Early server versions used the Key for the collection name; later versions use the Content property.</remarks>
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.Compression">
            <summary>
            Specifies the compression type the current operation is using.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Compression.None">
            <summary>
            No compression is being used.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.DataFormat">
            <summary>
            Specifies the formatting of data across all SDKs
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.DataFormat.Reserved">
            <summary>
            Reserved bit position to avoid zeroing out upper 8 bits
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.DataFormat.Private">
            <summary>
            Used for SDK specific encodings
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.DataFormat.Json">
            <summary>
            Encode as Json
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.DataFormat.Binary">
            <summary>
            Store as raw binary format
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.DataFormat.String">
            <summary>
            Store as a UTF8 string
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.ErrorAttribute.ItemOnly">
            <summary>
            This attribute means that the error is related to a constraint failure regarding the item itself,
            i.e. the item does not exist, already exists, or its current value makes the current operation impossible.
            Retrying the operation when the item's value or status has changed may succeed.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.ErrorAttribute.InvalidInput">
            <summary>
            This attribute means that a user's input was invalid because it violates the semantics of the operation,
            or exceeds some predefined limit.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.ErrorAttribute.FetchConfig">
            <summary>
            The client's cluster map may be outdated and requires updating. The client should obtain a newer
            configuration.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.ErrorAttribute.ConnStateInvalid">
            <summary>
            The current connection is no longer valid. The client must reconnect to the server. Note that the presence
            of other attributes may indicate an alternate remedy to fixing the connection without a disconnect, but
            without special remedial action a disconnect is needed.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.ErrorAttribute.Auth">
            <summary>
            The operation failed because the client failed to authenticate or is not authorized to perform this operation.
            Note that this error in itself does not mean the connection is invalid, unless conn-state-invalidated is also present.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.ErrorAttribute.SpecialHandling">
            <summary>
            This error code must be handled specially. If it is not handled, the connection must be dropped.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.ErrorAttribute.Support">
            <summary>
            The operation is not supported, possibly because the of server version, bucket type, or current user.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.ErrorAttribute.Temp">
            <summary>
            This error is transient. Note that this does not mean the error is retriable.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.ErrorAttribute.Internal">
            <summary>
            This is an internal error in the server.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.ErrorAttribute.RetryNow">
            <summary>
            The operation may be retried immediately.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.ErrorAttribute.RetryLater">
            <summary>
            The operation may be retried after some time.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.ErrorAttribute.SubDoc">
            <summary>
            The error is related to the subdocument subsystem.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.ErrorAttribute.DCP">
            <summary>
            The error is related to the DCP subsystem.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.Errors.ErrorCode">
            <summary>
            Describes an error received from the server including name, description and retry stratergy.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.ErrorCode.Name">
            <summary>
            Gets or sets the name of the error.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.ErrorCode.Desc">
            <summary>
            Gets or sets the description of the error.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.ErrorCode.Attrs">
            <summary>
            Gets or sets the list of attribures for the error.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.ErrorCode.Retry">
            <summary>
            Gets or sets the <see cref="T:Couchbase.Core.IO.Operations.Errors.RetrySpec"/> for the error.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.Errors.ErrorCode.HasTimedOut(System.Double)">
            <summary>
            Determines whether if the error has timed out based on it's retry strategy.
            </summary>
            <param name="duration">The amount of time already expired.</param>
            <returns>True if the retry strategy has timed out, otherwise false.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.Errors.ErrorCode.GetNextInterval(System.UInt32,System.Int32)">
            <summary>
            Gets the next interval.
            </summary>
            <param name="attempts">The number of attempts.</param>
            <param name="defaultTimeout">The default timeout.</param>
            <returns>The next interval in ms.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.Errors.ErrorMap">
            <summary>
            A map of errors provided by the server that can be used to lookup messages.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.ErrorMap.Version">
            <summary>
            Gets or sets the version of the error map.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.ErrorMap.Revision">
            <summary>
            Gets or sets the revision of the error map.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.ErrorMap.Errors">
            <summary>
            Gets or sets the dictionary of errors codes.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.Errors.ErrorMap.TryGetGetErrorCode(System.Int16,Couchbase.Core.IO.Operations.Errors.ErrorCode@)">
            <summary>
            Tries the get get error code.
            </summary>
            <param name="code">The code.</param>
            <param name="errorCode">The error code.</param>
            <returns>True if the provided error code was in the error code map, otherwise false.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.Errors.ErrorMapDto">
            <summary>
            A map of errors provided by the server that can be used to lookup messages.
            This is the version of <see cref="T:Couchbase.Core.IO.Operations.Errors.ErrorMap"/> designed for JSON deserialization.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.ErrorMapDto.Version">
            <summary>
            Gets or sets the version of the error map.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.ErrorMapDto.Revision">
            <summary>
            Gets or sets the revision of the error map.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.ErrorMapDto.Errors">
            <summary>
            Gets or sets the dictionary of errors codes.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.Errors.RetrySpec">
            <summary>
            A retry strategy to be used for a given <see cref="T:Couchbase.Core.IO.Operations.Errors.ErrorCode"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.RetrySpec.Strategy">
            <summary>
            Gets or sets the <see cref="T:Couchbase.Core.IO.Operations.Errors.RetryStrategy"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.RetrySpec.Interval">
            <summary>
            Gets or sets the base interval in ms.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.RetrySpec.Ceiling">
            <summary>
            Gets or sets the maximum retry interval.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.RetrySpec.FirstRetryDelay">
            <summary>
            Gets or sets the value to be added to the first interval.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Errors.RetrySpec.RetryTimeout">
            <summary>
            Gets or sets the maximum duration for retries or will timeout.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.Errors.RetrySpec.GetNextInterval(System.UInt32)">
            <summary>
            Gets the next interval using the retry strategy.
            </summary>
            <param name="attempts">The attempts.</param>
            <returns>The next interval to wait before the next</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.Errors.RetryStrategy">
            <summary>
            Thee type of retry strategy.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.RetryStrategy.None">
            <summary>
            No retry strategy. This is the default value.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.RetryStrategy.Constant">
            <summary>
            The retry interval is a constant value.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.RetryStrategy.Linear">
            <summary>
            The retry interval grows in a linear fashion.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.Errors.RetryStrategy.Exponential">
            <summary>
            The retry interval grows in an exponential fashion.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.Flags.Read(System.ReadOnlySpan{System.Byte})">
            <summary>
            Read flags from a buffer. The buffer must be at least 4 bytes long.
            </summary>
            <param name="buffer">Buffer to read.</param>
            <returns>Flags.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.Flags.Write(System.Span{System.Byte})">
            <summary>
            Write flags to a buffer. The buffer must be at least 4 bytes long.
            </summary>
            <param name="buffer">The buffer to receive the flags.</param>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.GetL`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.IOperation`1.GetValue">
            <summary>
            Parse the body and return the value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.PreferReturns">
            <summary>
            If true and the server returns KeyNotFound the DocumentNotFoundException will
            not be thrown; instead the ResponseStatus will be returned for an Exists check.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.OpCode">
            <summary>
            OpCode of the operation.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.BucketName">
            <summary>
            Bucket name, if applicable.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.SName">
            <summary>
            Scope name, if applicable.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.CName">
            <summary>
            Collection name, if applicable.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.Cid">
            <summary>
            Collection identifier, if applicable.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.Key">
            <summary>
            Document key, if applicable, or an empty string.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.EncodedKey">
            <summary>
            Encoded document Key, if applicable, or an empty string
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.RequiresVBucketId">
            <summary>
            True if the operation requires a VBucketId, otherwise false.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.VBucketId">
            <summary>
            vBucket identifier, if applicable.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.ReplicaIdx">
            <summary>
            Replica index for replica reads, null for all other operations.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.Opaque">
            <summary>
            Opaque operation identifier, unique for each operation.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.Cas">
            <summary>
            Compare-and-swap value.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.Header">
            <summary>
            Response operation header.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.Span">
            <summary>
            Tracing span.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.HasDurability">
            <summary>
            Indicates that a mutation operation has a durability requirement.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.IsReadOnly">
            <summary>
            Indicates if this operation is only performing a read operation and not changing state.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.IsSent">
            <summary>
            Indicates if this operation has been sent down the wire to the server.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.TokenPair">
            <summary>
            Cancellation token pair which can cancel the operation. Usually set by the <see cref="T:Couchbase.Core.IO.Operations.OperationCancellationRegistration"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.Completed">
             <summary>
             Task which indicates completion of the operation. Once this task is complete,
             the result has been received and, if successful, read.
             </summary>
             <remarks>
             It is important that rules about ValueTask be followed here. The task should only
             be awaited once, never more than once. Calling <see cref="M:Couchbase.Core.IO.Operations.IOperation.Reset"/> will reset the
             task, after which it may be awaited again.
            
             For more information, see https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/#valid-consumption-patterns-for-valuetasks
             </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.IOperation.Reset">
            <summary>
            Reset the operation so it may be retried.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.IOperation.SendAsync(Couchbase.Core.IO.Connections.IConnection,System.Threading.CancellationToken)">
            <summary>
            Serializes the operation body and sends it to a connection.
            </summary>
            <param name="connection">Connection on which to send the operation.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task which is completed when the operation is sent.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.IOperation.TrySetCanceled(System.Threading.CancellationToken)">
            <summary>
            Marks the operation as canceled with an optional reference to the cancellation token, if it isn't already completed.
            </summary>
            <param name="cancellationToken">Optional cancellation token which triggered the cancellation.</param>
            <returns>True if the operation was canceled.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.IOperation.TrySetException(System.Exception)">
            <summary>
            Marks the operation as completed with the given exception, if it isn't already completed.
            </summary>
            <param name="ex">Exception which occurred.</param>
            <returns>True if the operation was completed with the provided exception.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.IOperation.HandleOperationCompleted(Couchbase.Utils.SlicedMemoryOwner{System.Byte}@)">
            <summary>
            Called by the connection when a complete response packet is received.
            </summary>
            <param name="data">Data which was received.</param>
            <remarks>
            Ownership of the data buffer is passed to the caller, which is then responsible
            for disposing of the buffer. Failure to dispose may call memory leaks.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.IOperation.ExtractBody">
            <summary>
            Returns a block of memory containing the body of the operation response. May only be called once.
            Ownership of the block of memory is transferred to the caller, which is then responsible for disposing it.
            </summary>
            <returns>An owned block of memory containing the body of the operation response.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.IOperation.ReadConfig(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Reads <see cref="T:Couchbase.Core.Configuration.Server.BucketConfig"/> from the response body.
            </summary>
            <param name="transcoder">Transcoder to use while reading.</param>
            <returns>The bucket config if the response body contains a bucket config, otherwise null.</returns>
            <remarks>
            This method generally relates to <see cref="F:Couchbase.Core.IO.Operations.ResponseStatus.VBucketBelongsToAnotherServer"/> responses.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.IOperation.WasNmvb">
            <summary>
            Returns true if the previous attempt of the operation resulted in a Not My VBucket response from the server.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.LastErrorCode">
            <summary>
            Represents the last <see cref="T:Couchbase.Core.IO.Operations.Errors.ErrorCode"/> if it exists for an operation.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperation.ConfigVersion">
            <summary>
            The version of the cluster map config used for each send.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.IOperationConfigurator">
            <summary>
            Configures an operation with services it requires before sending.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.IOperationConfigurator.Configure(Couchbase.Core.IO.Operations.OperationBase,Couchbase.KeyValue.IKeyValueOptions)">
            <summary>
            Apply configuration to a key/value operation.
            </summary>
            <param name="operation">The operation to configure.</param>
            <param name="options">Options for the key/value operation.</param>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.IOperationResult`1">
            <summary>
            The primary return type for binary Memcached operations which return a value
            </summary>
            <typeparam name="T">The value returned by the operation.</typeparam>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperationResult`1.Content">
            <summary>
            The value returned by the operation.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.IOperationResult">
            <summary>
            The primary return type for binary Memcached operations
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperationResult.Token">
            <summary>
            Gets the mutation token for the operation if enhanced durability is enabled.
            </summary>
            <value>
            The mutation token.
            </value>
            <remarks>Note: this is used internally for enhanced durability if supported by
            the Couchbase server version and enabled by clusterOptions.</remarks>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperationResult.Cas">
            <summary>
            The 'Check and Set' or 'CAS' value for enforcing optimistic concurrency.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperationResult.Status">
            <summary>
            The server's response status for the operation.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperationResult.Durability">
            <summary>
            The level of durability that the operation achieved
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.IOperationResult.IsNmv">
            <summary>
            Checks if the server responded with a Not My Vbucket.
            </summary>
            <returns>Returns true if <see cref="T:Couchbase.Core.IO.Operations.ResponseStatus"/> is a VBucketBelongsToAnotherServer.</returns>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperationResult.Id">
            <summary>
            Gets the id or key for the document.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IOperationResult.OpCode">
            <summary>
            Gets the op code.
            </summary>
            <value>
            The op code.
            </value>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.IResult`1">
            <summary>
            Default interface for all operation return types.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IResult`1.Value">
            <summary>
            The value returned by the operation
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.IResult">
            <summary>
            Default interface for all operation return types.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IResult.Success">
            <summary>
            Returns true if the operation was succesful.
            </summary>
            <remarks>If Success is false, use the Message property to help determine the reason.</remarks>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IResult.Message">
            <summary>
            If the operation wasn't succesful, a message indicating why it was not succesful.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.IResult.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.IResult.ShouldRetry">
            <summary>
            If the response indicates the request is retryable, returns true.
            </summary>
            <returns></returns>
            <remarks>Intended for internal use only.</remarks>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.KeyState">
            <summary>
            In an Observe operation, indicates whether the key is persisted or not.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.KeyState.FoundNotPersisted">
            <summary>
            Found, not persisted. Indicates key is in RAM, but not persisted to disk
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.KeyState.FoundPersisted">
            <summary>
            Found, persisted. Indicates key is found in RAM, and is persisted to disk
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.KeyState.NotFound">
            <summary>
            Not found. Indicates the key is persisted, but not found in RAM. In this case,
            a key is not available in any view/index. Couchbase Server will return this keystate
            for any item that is not stored in the server. It indicates you will not expect to have
            the item in a view/index.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.KeyState.LogicalDeleted">
            <summary>
            Logically deleted. Indicates an item is in RAM, but is not yet deleted from disk.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.MemoryStreamFactory">
            <summary>
            Creates instances of MemoryStreams for use in writing/ reading bytes to/ from the network.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.MemoryStreamFactory.SetFactoryFunc(System.Func{System.IO.MemoryStream})">
            <summary>
            Provides a custom MemoryStream creation function that will override the default implementation.
            </summary>
            <param name="factoryFunc"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.MemoryStreamFactory.GetMemoryStream">
            <summary>
            Fetches a MemoryStream. The default implementation retuns a new MemoryStream instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.MutationOperationBase`1">
            <summary>
            Represents an abstract base class for mutation operations (PROTOCOL_BINARY_CMD_SET, DELETE,REPLACE, ADD,
            APPEND, PREPEND, INCR, DECR, SET_WITH_META, DEL_WITH_META) and supports <see cref="P:Couchbase.Core.IO.Operations.OperationBase.MutationToken"/>'s.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.MutationOperationBase`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.MutationOperationBase`1.ReadExtras(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads the VBucketUUID and Sequence Number from  the extras if the instance has a <see cref="T:Couchbase.Core.Sharding.VBucket"/> -
            only persistent Couchbase buckets that use VBucket Hashing support mutation tokens.
            </summary>
            <param name="buffer">The memcached response buffer.</param>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.MutationOperationBase">
            <summary>
            Represents an abstract base class for mutation operations (PROTOCOL_BINARY_CMD_SET, DELETE,REPLACE, ADD,
            APPEND, PREPEND, INCR, DECR, SET_WITH_META, DEL_WITH_META) and supports <see cref="P:Couchbase.Core.IO.Operations.OperationBase.MutationToken"/>'s.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.MutationOperationBase.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.MutationOperationBase.ReadExtras(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads the VBucketUUID and Sequence Number from the extras if the instance has a <see cref="P:Couchbase.Core.IO.Operations.OperationBase.VBucketId"/> -
            only persistent Couchbase buckets that use VBucket Hashing support mutation tokens.
            </summary>
            <param name="buffer">The memcached response buffer.</param>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.OpCode.Helo">
            <summary>
            You say goodbye and I say Hello. Hello, hello.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.OpCode.GetCidByName">
            <summary>
            Get the Collection Identifier (CID) by name
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.OpCode.GetSidByName">
            <summary>
            Gets the Scope Identifier (SID) by name.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.OpCode.RangeScanCreate">
            <summary>
            Requests that the server creates a new range scan for a collection in an active vbucket.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.OpCode.RangeScanContinue">
            <summary>
            Requests that the server continues an existing range scan, returning to the client a sequence of keys or documents.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.OpCode.RangeScanCancel">
            <summary>
            Requests that the server cancels an existing range scan.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.OpCode.ClusterMapChangeNotification">
            <summary>
            Allows for server push cluster map configurations.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase`1.GetValue">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Operations.OperationBase">
            <remarks>
            It is important for this object to be disposed. Failure to properly dispose this object may result
            in memory not being returned to the ArrayPool, which will increase GC impact across various parts of the framework.
            </remarks>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.OpCode">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.BucketName">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.SName">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.CName">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.Cid">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.Key">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.Opaque">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.Cas">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.VBucketId">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.ReplicaIdx">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.Header">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.Span">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.Recorder">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.HasDurability">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.IsSent">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.Completed">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.RequiresVBucketId">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.Expires">
            <summary>
            Expiration to apply for mutation operations, and returns the expiration after the operation is completed.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.Flags">
            <summary>
            Flags returned in the operation response.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.MutationToken">
            <summary>
            Mutation token returned by mutation operations, if any.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.Transcoder">
            <summary>
            Transcoder used for reading and writing the body of the operation.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.OperationCompressor">
            <summary>
            Service for compressing and decompressing operation bodies. Typically set by the <see cref="T:Couchbase.Core.IO.Operations.IOperationConfigurator"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.OperationBuilderPool">
            <summary>
            Service which providers <see cref="T:Couchbase.Core.IO.Operations.OperationBuilder"/> instances as needed.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.Exception">
            <summary>
            Exception encountered when parsing data, if any.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.Data">
            <summary>
            Response data.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.SupportsRequestCompression">
            <summary>
            Overriden in derived operation classes that support request body compression. If true is returned,
            and if compression has been negotiated with the server, the body will be compressed after the call
            to <see cref="M:Couchbase.Core.IO.Operations.OperationBase.WriteBody(Couchbase.Core.IO.Operations.OperationBuilder)"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBase.SupportsJsonDataType">
            <summary>
            Overriden in derived operation classes that support JSON datatype. If true is returned and JSON has
            been negotiated with the server, then the JSON datatype will be used after the call to <see cref="M:Couchbase.Core.IO.Operations.OperationBase.WriteBody(Couchbase.Core.IO.Operations.OperationBuilder)"/>.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.OperationBase._isCompleted">
            <summary>
            Allows us to add TryXXX completions on top of ManualResetValueTaskSourceCore by using Interlocked.Exchange
            on this value. 1 = completed (in any form), 0 = not completed.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.GetResult(System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.GetStatus(System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.Reset">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.ReadConfig(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.LogOrphaned">
            <summary>
            Set an attribute on the internal Span indicating that he operation
            has been orphaned and has no response if the op is in-flight and the
            Span is currently writable.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.ExtractBody">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.WriteKey(Couchbase.Core.IO.Operations.OperationBuilder)">
            <summary>
            Writes the key to an <see cref="T:Couchbase.Core.IO.Operations.OperationBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.WriteKey(System.Span{System.Byte})">
            <summary>
            Write the <see cref="P:Couchbase.Core.IO.Operations.OperationBase.Key"/>, with <see cref="P:Couchbase.Core.IO.Operations.OperationBase.Cid"/> if present, to a buffer.
            </summary>
            <param name="buffer">Target buffer.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.WriteExtras(Couchbase.Core.IO.Operations.OperationBuilder)">
            <summary>
            Writes the extras to an <see cref="T:Couchbase.Core.IO.Operations.OperationBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.WriteFramingExtras(Couchbase.Core.IO.Operations.OperationBuilder)">
            <summary>
            Writes the framing extras to an <see cref="T:Couchbase.Core.IO.Operations.OperationBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.WriteBody(Couchbase.Core.IO.Operations.OperationBuilder)">
            <summary>
            Writes the body to an <see cref="T:Couchbase.Core.IO.Operations.OperationBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.BeginSend">
            <summary>
            Prepares the operation to be sent.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.SendAsync(Couchbase.Core.IO.Connections.IConnection,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.TrySetCanceled(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.TrySetException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.HandleOperationCompleted(Couchbase.Utils.SlicedMemoryOwner{System.Byte}@)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.WasNmvb">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.StopRecording">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.StopRecording(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBase.Dispose">
            <inheritdoc />
            <remarks>
            It is important for this object to be disposed. Failure to properly dispose this object may result
            in memory not being returned to the ArrayPool, which will increase GC impact across various parts of the framework.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.OperationBuilder">
            <summary>
            Provides a forward-only stream for building operations which tracks the size of each segment
            as it's being built.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBuilder.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBuilder.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBuilder.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBuilder.Length">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBuilder.Position">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBuilder.Capacity">
            <summary>
            Capacity of the underlying stream.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBuilder.CurrentSegment">
            <summary>
            The current segment being written.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.#ctor">
            <summary>
            Creates a new OperationBuilder.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.AdvanceToSegment(Couchbase.Core.IO.Operations.OperationSegment)">
            <summary>
            Advance to another segment for writing. Segments may be skipped, but must be advanced in order.
            </summary>
            <param name="segment">New segment for subsequent writes.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="segment"/> is not a valid value.</exception>
            <exception cref="T:System.InvalidOperationException">Attempt to move the segment backwards, or the header has already been written.</exception>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.Flush">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.GetBuffer">
            <summary>
            Gets a block of memory containing the operation. <see cref="M:Couchbase.Core.IO.Operations.OperationBuilder.WriteHeader(Couchbase.Core.IO.Operations.OperationRequestHeader@)"/> must be called before this method.
            </summary>
            <returns>A block of memory containing the operation.</returns>
            <exception cref="T:System.InvalidOperationException">The header has not been written.</exception>
            <remarks>
            The memory block is only valid while the OperationBuilder exists. Once disposed, the memory
            should not be used.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
            <summary>
            Not supported on <see cref="T:Couchbase.Core.IO.Operations.OperationBuilder" />.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
            <summary>
            Not supported on <see cref="T:Couchbase.Core.IO.Operations.OperationBuilder" />.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.SetLength(System.Int64)">
            <inheritdoc />
            <summary>
            Not supported on <see cref="T:Couchbase.Core.IO.Operations.OperationBuilder" />.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.Write(System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.WriteHeader(Couchbase.Core.IO.Operations.OperationRequestHeader@)">
            <summary>
            Writes the header of the operation.
            </summary>
            <param name="header"></param>
            <remarks>
            After the header is written, the stream cannot receive any other write operations.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.BeginOperationSpec(System.Boolean)">
            <summary>
            Begin a sub-document operation spec within the operation body.
            </summary>
            <param name="isMutation">This is a mutation operation which should have a fragment length.</param>
            <remarks>
            Each call to BeginOperationSpec should be followed by a call to <see cref="M:Couchbase.Core.IO.Operations.OperationBuilder.CompleteOperationSpec(Couchbase.Core.IO.Operations.SubDocument.OperationSpec)"/>
            once the path and fragment are written. <see cref="M:Couchbase.Core.IO.Operations.OperationBuilder.AdvanceToSegment(Couchbase.Core.IO.Operations.OperationSegment)"/> can be used to to move from
            writing the path to writing the fragment.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.CompleteOperationSpec(Couchbase.Core.IO.Operations.SubDocument.OperationSpec)">
            <summary>
            Completes an in progress operation spec.
            </summary>
            <param name="spec">The spec which was written.</param>
            <remarks>
            This method should be called after the path and fragment for each operation have been written,
            and before the next call to <see cref="M:Couchbase.Core.IO.Operations.OperationBuilder.BeginOperationSpec(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.AttemptBodyCompression(Couchbase.Core.IO.Compression.IOperationCompressor,Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Replaces the body of the operation in the stream with a compressed body, if requirements are met.
            </summary>
            <param name="operationCompressor">The <see cref="T:Couchbase.Core.IO.Compression.IOperationCompressor"/>.</param>
            <param name="parentSpan">If compression is attempted, the parent span for tracing.</param>
            <returns>True if the body was compressed, otherwise false.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.Advance(System.Int32)">
            <summary>
            After writing to the stream, records the number of bytes written to the current segment.
            </summary>
            <param name="bytes">Number of bytes written.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilder.EnsureHeaderNotWritten">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> if the header has already been written.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.OperationBuilderPoolPolicy">
            <summary>
            Policy which handles creating and returning <see cref="T:Couchbase.Core.IO.Operations.OperationBuilder"/> instances to the
            <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationBuilderPoolPolicy.MaximumOperationBuilderCapacity">
            <summary>
            Returned operation builders with a capacity larger than this limit are disposed rather than retained.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilderPoolPolicy.Create">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationBuilderPoolPolicy.Return(Couchbase.Core.IO.Operations.OperationBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Operations.OperationCancellationRegistration">
            <summary>
            Upon construction, registers with a <see cref="T:Couchbase.Core.IO.Operations.CancellationTokenPair"/> to set the operation to canceled
            while following logic rules regarding external vs internal cancellation. Disposing will release the
            registration and prevent future cancellation of the operation.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationCancellationRegistration.#ctor(Couchbase.Core.IO.Operations.IOperation,Couchbase.Core.IO.Operations.CancellationTokenPair)">
            <summary>
            Creates a new OperationCancellationRegistration.
            </summary>
            <param name="operation">Operation to be cancelled.</param>
            <param name="tokenPair">Token pair which will cancel the operation.</param>
            <remarks>
            Only one <see cref="T:Couchbase.Core.IO.Operations.OperationCancellationRegistration"/> should be registered at a time on a given operation,
            the provided <see cref="T:Couchbase.Core.IO.Operations.CancellationTokenPair"/> is saved for tracking on <see cref="P:Couchbase.Core.IO.Operations.IOperation.TokenPair"/>.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationCancellationRegistration.HandleExternalCancellation(System.Object)">
            <summary>
            Static method for processing external cancellation. By using a static Action instance and passing the
            operation as state we reduce heap allocations.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationCancellationRegistration.HandleInternalCancellation(System.Object)">
            <summary>
            Static method for processing internal cancellation. By using a static Action instance and passing the
            operation as state we reduce heap allocations.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.OperationConfigurator">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.IO.Operations.IOperationConfigurator"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationConfigurator.Configure(Couchbase.Core.IO.Operations.OperationBase,Couchbase.KeyValue.IKeyValueOptions)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Operations.OperationResult`1">
            <summary>
            The primary return type for binary Memcached operations which return a value
            </summary>
            <typeparam name="T">The value returned by the operation.</typeparam>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationResult`1.Content">
            <summary>
            The value of the key retrieved from Couchbase Server.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.OperationResult">
            <summary>
            The result of an operation.
            </summary>
            <remarks>If Success is false, use the Message property to help determine the reason.</remarks>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationResult.Success">
            <summary>
            True if the operation succeeded.
            </summary>
            <remarks>If Success is false, use the Message property to help determine the reason.</remarks>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationResult.Message">
            <summary>
            If Success is false, the reason why the operation failed.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationResult.Token">
            <summary>
            Gets the mutation token for the operation if enhanced durability is enabled.
            </summary>
            <value>
            The mutation token.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationResult.Cas">
            <summary>
            The 'Check and Set' or 'CAS' value for enforcing optimistic concurrency.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationResult.Status">
            <summary>
            The status returned from the Couchbase Server after an operation.
            </summary>
            <remarks><see cref="F:Couchbase.Core.IO.Operations.ResponseStatus.Success"/> will be returned if <see cref="P:Couchbase.Core.IO.Operations.OperationResult.Success"/>
            is true, otherwise <see cref="P:Couchbase.Core.IO.Operations.OperationResult.Success"/> will be false. If <see cref="F:Couchbase.Core.IO.Operations.ResponseStatus.ClientFailure"/> is
            returned, then the operation failed before being sent to the Couchbase Server.</remarks>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationResult.Durability">
            <summary>
            The level of durability that the operation achieved
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationResult.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationResult.IsNmv">
            <summary>
            Checks if the server responded with a Not My Vbucket.
            </summary>
            <returns>Returns true if <see cref="T:Couchbase.Core.IO.Operations.ResponseStatus"/> is a VBucketBelongsToAnotherServer.</returns>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationResult.Id">
            <summary>
            Gets the id or key for the document.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.OperationResult.OpCode">
            <summary>
            Gets the <see cref="P:Couchbase.Core.IO.Operations.OperationResult.OpCode"/> for the operation.
            </summary>
            <value>
            The op code.
            </value>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.OperationResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.RangeScan.RangeScanContinue.ItemLimit">
            <summary>
            Maximum key/document count to return (when 0 there is no limit)
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.RangeScan.RangeScanContinue.IsSampling">
            <summary>
            Indicates whether this is a sampling scan or a full range scan.
            </summary>
            <remarks>
            Not serialized in the request.  Affects error handling.
            </remarks>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.RangeScan.RangeScanContinue.TimeLimit">
            <summary>
            Maximum time (ms) for the scan to keep returning key/documents (when 0 there is no time limit)
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.RangeScan.RangeScanContinue.ByteLimit">
            <summary>
            Bytes to return (when 0 there is no limit).
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.Replace`1">
            <summary>
            Replace a key in the database, failing if the key does not exist.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.ResponseStatus">
            <summary>
            The response status for binary Memcached and Couchbase operations.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.None">
            <summary>
             Indicates that the enum has not been set.
            </summary>
            <remarks>0 has already been taken by the Memcached protocol for success.</remarks>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.UnknownError">
            <summary>
            An unknown error occured. Please check logs for more details.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.Failure">
            <summary>
            An Error occured and more details can be found in the operation message.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.CircuitBreakerOpen">
            <summary>
            The circuit breaker has been tripped and the operation will retry until timeout. Used internally.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.Success">
            <summary>
            The operation was successful
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.KeyNotFound">
            <summary>
            The key does not exist in the database
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.KeyExists">
            <summary>
            The key exists in the database.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.ValueTooLarge">
            <summary>
            The value of the object stored was too large.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.InvalidArguments">
            <summary>
            The arguments of the operation were invalid.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.ItemNotStored">
            <summary>
            The item could not be stored in the database
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.IncrDecrOnNonNumericValue">
            <summary>
            The increment operation was called on a non-numeric value
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.VBucketBelongsToAnotherServer">
            <summary>
            The VBucket the operation was attempted on, no longer belongs to the server.
            <remarks>This is a common during rebalancing after adding or removing a node or during a failover.</remarks>
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.BucketNotConnected">
            <summary>
            Not connected to a bucket.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.Locked">
            <summary>
            The requested resource is locked.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.AuthStale">
            <summary>
            The authentication context is stale. You should reauthenticate
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.AuthenticationError">
            <summary>
            The connection to Couchbase could not be authenticated.
            </summary>
            <remarks>Check the bucket name and/or password being used.</remarks>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.AuthenticationContinue">
            <summary>
            During SASL authentication, another step (or more) must be made before authentication is complete.
            <remarks>This is a system-level response status.</remarks>
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.InvalidRange">
            <summary>
            The value was outside of supported range.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.Rollback">
            <summary>
             Roll back to an earlier version of the vbucket UUID (_currently_ only used by DCP for agreeing on selecting a starting point)
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.Eaccess">
            <summary>
             No access (could be opcode, value, bucket etc)
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.NotInitialized">
            <summary>
            The Couchbase cluster is currently initializing this node, and the Cluster manager has not yet granted all users access to the cluster.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.UnknownCommand">
            <summary>
            The server received an unknown command from a client.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.OutOfMemory">
            <summary>
            The server is temporarily out of memory.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.NotSupported">
            <summary>
            The operation is not supported.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.InternalError">
            <summary>
            An internal error has occured.
            </summary>
            <remarks>See logs for more details.</remarks>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.Busy">
            <summary>
            The server was too busy to complete the operation.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.TemporaryFailure">
            <summary>
            A temporary error has occured in the server.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.ClientFailure">
            <summary>
            A client error has occured before the operation could be sent to the server.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.OperationTimeout">
            <summary>
            The operation exceeded the specified OperationTimeout configured for the client instance.
            </summary>
            <remarks>The default is 2500ms.</remarks>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.NoReplicasFound">
            <summary>
             Returned when the client cannot locate a replica within the cluster map config for a replica read.
             This would happen if a bucket was not configured to have replicas; if you encounter this error check
             to make sure you have indeed configured replicas on your bucket.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.NodeUnavailable">
            <summary>
            The node or service that the key has been mapped to is offline or cannot be reached.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.TransportFailure">
            <summary>
            Indicates that a transport layer failure occured while the client was sending or receiving data.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.DocumentMutationLost">
            <summary>
            Document Mutation lost during a hard failover.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.DocumentMutationDetected">
            <summary>
            A document mutation was detected on the document being observed.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocPathNotFound">
            <summary>
            Subdocument error indicating the path inside the JSON is invalid.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocPathMismatch">
            <summary>
            Subdocument error indicating one of the path components was denoting a wrong type (eg. trying to access
            an array index in an entry that isn't an array). Also for arithmetic operations when the value of the
            path is not a number.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocPathInvalid">
            <summary>
            Subdocument error indicating that the path provided is invalid. For operations requiring an array index, this
            is returned if the last component of that path isn't an array. Similarly for operations requiring a dictionary,
            if the last component isn't a dictionary but eg. an array index.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocPathTooBig">
            <summary>
             Subdocument error indicating that the path is too large (ie. the string is too long) or too deep (more that 32 components).
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocDocTooDeep">
            <summary>
            Subdocument error indicating that the target document's level of JSON nesting is too deep to be processed by the subdoc service.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocCannotInsert">
            <summary>
            Subdocument error indicating that the target document is not flagged or recognized as JSON.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocDocNotJson">
            <summary>
            Subdocument error indicating that, for arithmetic subdoc operations, the existing number is already too large.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocNumRange">
            <summary>
            Subdocument error indicating that for arithmetic subdoc operations, the operation will make the value too large.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocDeltaRange">
            <summary>
            Subdocument error indicating that for arithmetic subdoc operations, the operation will make the value too large.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocPathExists">
            <summary>
            Subdocument error indicating that the last component of the path already exist despite the mutation operation
            expecting it not to exist (the mutation was expecting to create only the last part of the path and store the
            fragment there).
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocValueTooDeep">
            <summary>
            Subdocument error indicating that, in a multi-specification, an invalid combination of commands were specified,
            including the case where too many paths were specified.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocInvalidCombo">
             <summary>
            Subdocument error indicating that, in a multi-specification, an invalid combination of commands were specified,
            including the case where too many paths were specified.
             </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocMultiPathFailure">
            <summary>
            Subdocument error indicating that, in a multi-specification, one or more commands failed to execute on a document
            which exists (ie. the key was valid).
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocSuccessDeletedDocument">
            <summary>
            SubDocument status indicating that the subdoc operation completed successfully on the deleted document.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocXattrInvalidFlagCombo">
            <summary>
            Subdocument error indicating the flag combination for an XATTR operation was invalid.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubDocXattrInvalidKeyCombo">
            <summary>
            Subdocument error indicating the key combination for an XATTR opeation was invalid.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubdocXattrUnknownMacro">
            <summary>
            The server has no knowledge of the requested macro
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubdocXattrUnknownVattr">
            <summary>
            The server has no knowledge of the requested virtual xattr
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubdocXattrCantModifyVattr">
            <summary>
            Virtual xattrs can't be modified
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubdocMultiPathFailureDeleted">
            <summary>
            [For multi-path commands only] Specified key was found as a Deleted document, but one or more path operations
            failed. Examine the individual lookup_result (MULTI_LOOKUP) mutation_result (MULTI_MUTATION) structures for details.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SubdocInvalidXattrOrder">
            <summary>
            According to the spec all xattr commands should come first,
            followed by the commands for the document body
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.UnknownCollection">
            <summary>
            Collection does not exist/Collection Outdated
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.UnknownScope">
            <summary>
            The Scope does not exist/Collection Outdated
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.DurabilityInvalidLevel">
            <summary>
            Invalid request. Returned if an invalid durability level is specified.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.DurabilityImpossible">
            <summary>
            Valid request, but given durability requirements are impossible to achieve -
            because insufficient configured replicas are connected. Assuming level=majority
            and C=number of configured nodes, durability becomes impossible if floor((C + 1) / 2)
            nodes or greater are offline.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SyncWriteInProgress">
            <summary>
            Returned if an attempt is made to mutate a key which already has a SyncWrite pending.
            Transient, the client would typically retry (possibly with backoff). Similar to ELOCKED.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SyncWriteAmbiguous">
            <summary>
            The SyncWrite request has not completed in the specified time and has ambiguous result -
            it may Succeed or Fail; but the final value is not yet known.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.SyncWriteReCommitInProgress">
            <summary>
            A SyncWrite request re-commit is in progress.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.RangeScanCanceled">
             <summary>
            The RangeScan (or PrefixScan) operation was canceled.
             </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.NoCollectionsManifest">
            <summary>
            No collections manifest has been set. The server does not support scopes or collections.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.RateLimitedNetworkIngress">
            <summary>
            Rate limited: Network Ingress
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.RateLimitedNetworkEgress">
            <summary>
            Rate limited: Network Egress
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.RateLimitedMaxConnections">
            <summary>
            Rate limited: Max Connections
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.RateLimitedMaxCommands">
            <summary>
            Rate limited: Max Commands
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.ScopeSizeLimitExceeded">
            <summary>
            Quota limited: Max number of scopes has been exceeded
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.RangeScanMore">
            <summary>
            Scan has reached a limit and has not reached the end key, more data maybe
            available and the client must issue another continue.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.RangeScanComplete">
            <summary>
            Scan has reached the end of the range.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.EConfigOnly">
            <summary>
            Command can't be executed in a config-only bucket.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.DocumentNotLocked">
            <summary>
            Raised when a document is not locked.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ResponseStatus.Cancelled">
            <summary>
            The request was cancelled, no state changed.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.ServerFeatures">
            <summary>
            Features that they client negotiate on a per connection basis.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.Datatype">
            <summary>
            For custom data types
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.TcpNoDelay">
            <summary>
            Enable TCP nodelay
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.MutationSeqno">
            <summary>
            Return the sequence number with every mutation
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.TcpDelay">
            <summary>
            Disable TCP nodelay
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.SubdocXAttributes">
            <summary>
            Perform subdocument operations on document attributes
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.XError">
            <summary>
            Return extended error information for the client to use in K/V Error Mapping. Implies the client
            will request that information from the server to use in mapping error attributes and classes.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.SelectBucket">
            <summary>
            Indicates if the cluster supports RBAC and if a Select_Bucket operation should
            be executed when opening a bucket.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.SnappyCompression">
            <summary>
            Requests that the connection use Snappy compression on request, and indicates if the server supports
            Snappy compression on response.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.ServerDuration">
            <summary>
            Retrieve the Server Duration of the operation. This enables the server to return responds
            with magic <see cref="F:Couchbase.Core.IO.Operations.Magic.AltResponse"/>.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.AlternateRequestSupport">
            <summary>
            Indicates if the client can send requests that include Framing Extras encoded into the request packet.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.SynchronousReplication">
            <summary>
            Indicates if requests can include synchronous replication requirements into framing extras.
            NOTE: Requires <see cref="F:Couchbase.Core.IO.Operations.ServerFeatures.AlternateRequestSupport"/> be enabled too.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.Collections">
            <summary>
            Indicates if the server supports scoped collections.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.UnorderedExecution">
            <summary>
            Support unordered execution of operations.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.CreateAsDeleted">
            <summary>
            Enables the "create as deleted" flag, allowing a document to be created in a tombstoned state.
            </summary>
            <remarks>Requires Couchbase Server 6.6 or greater.</remarks>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.PreserveTtl">
            <summary>
            Enables preserving expiry when updating document.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.JSON">
            <summary>
            Enables JSON as a data type for KV range scans.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.SubDocReplicaRead">
            <summary>
            Enables support for SubDoc Replica Read.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.ClustermapChangeNotificationBrief">
            <summary>
            Tells the server we want it to send a brief "ClusterMap Change Notification" Server Command
            whenever the cluster/bucket config changes. The server requests is "brief" because it includes
            only the config epoch and revision, and not the config JSON itself. Requires the "Duplex" feature.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.Duplex">
            <summary>
            When running in a duplex mode the server may send commands to the client at any time. The client must
            reply to the command, just like a normal command being sent from the client to the server.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.GetClusterConfigWithKnownVersion">
            <summary>
            This flag does not change the behavior of the server but allows determining if the node supports epoch-revision
            fields for the GetClusterConfig (0xb5) operation. If the node acknowledges GetClusterConfigWithKnownVersion,
            then the SDK can use the new version of the command.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.SnappyEverywhere">
            <summary>
            Once this flag is negotiated, the node will always use the compressed version of the cluster configuration
            and data type flags will be set to JSON | SNAPPY (0x03).
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.ClustermapChangeNotification">
            <summary>
            If ClustermapChangeNotification and Duplex flags are negotiated, the server will send unsolicited
            configuration updates to the SDK without expecting any acknowledgement mechanism. While this
            approach proves to have better
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.ServerFeatures.DedupeNotMyVbucketClustermap">
            <summary>
            Once this flag is negotiated, the node might send an empty body with NotMyVbucket (0x07)
            status codes. The KV engine tracks the revision that has been sent to the SDK over the
            socket connection, so a response with a NotMyVbucket status will only have a body if the
            pushed version is older than the active configuration.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.Set`1">
            <summary>
            Add a key to the database, replacing the key if it already exists.
            </summary>
            <typeparam name="T">The value to insert.</typeparam>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.SubDocument.DocumentFragment`1">
            <summary>
            Represents one more fragments of a document that is returned by the sub-document API.
            </summary>
            <typeparam name="TDocument">The document</typeparam>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.DocumentFragment`1.Expiry">
            <summary>
            The time-to-live or TTL for the document before it's evicted from disk in milliseconds.
            </summary>
            <remarks>Setting this to zero or less will give the document infinite lifetime</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.DocumentFragment`1.Content``1(System.String)">
            <summary>
            The value if it exists for a specific path.
            </summary>
            <typeparam name="TContent">The <see cref="T:System.Type"/> to cast the value to.</typeparam>
            <param name="path">The path of the operation to retrieve the value from.</param>
            <returns>An object of type <see cref="T:System.Type"/> representing the value of the operation.</returns>
            <remarks>If no value exists, the default value for the <see cref="T:System.Type"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.DocumentFragment`1.Content``1(System.Int32)">
            <summary>
            The value if it exists for a specific index.
            </summary>
            <typeparam name="TContent">The <see cref="T:System.Type"/> to cast the value to.</typeparam>
            <param name="index">The ordinal of the operation to retrieve the value from.</param>
            <returns>An object of type <see cref="T:System.Type"/> representing the value of the operation.</returns>
            <remarks>If no value exists, the default value for the <see cref="T:System.Type"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.DocumentFragment`1.Content(System.String)">
            <summary>
            The value if it exists for a specific path.
            </summary>
            <param name="path">The path of the operation to retrieve the value from.</param>
            <returns>An <see cref="T:System.Object"/> representing the result of a operation.</returns>
            <remarks>If no value exists, the default value (null) for the <see cref="T:System.Object"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.DocumentFragment`1.Content(System.Int32)">
            <summary>
            The value if it exists for a specific index.
            </summary>
            <param name="index">The ordinal of the operation to retrieve the value from.</param>
            <returns>An <see cref="T:System.Object"/> representing the result of a operation.</returns>
            <remarks>If no value exists, the default value for the <see cref="T:System.Type"/> will be returned.</remarks>
            <remarks>If no value exists, the default value (null) for the <see cref="T:System.Object"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.DocumentFragment`1.Exists(System.String)">
            <summary>
            Checks whether the given path is part of this result set, eg. an operation targeted it, and the operation executed successfully.
            </summary>
            <param name="path">The path for the sub-document operation.</param>
            <returns><s>true</s> if that path is part of the successful result set, <s>false</s> in any other case.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.DocumentFragment`1.Count">
            <summary>
            The count of the sub-document operations chained togather.
            </summary>
            <returns>An <see cref="T:System.Int32"/> that is the count of the total operations chained togather.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.DocumentFragment`1.OpStatus(System.String)">
            <summary>
            Gets the <see cref="T:Couchbase.Core.IO.Operations.ResponseStatus"/> for a specific operation at it's path.
            </summary>
            <param name="path">The path of the operation.</param>
            <returns>The <see cref="T:Couchbase.Core.IO.Operations.ResponseStatus"/> that the server returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.DocumentFragment`1.OpStatus(System.Int32)">
            <summary>
            Gets the <see cref="T:Couchbase.Core.IO.Operations.ResponseStatus"/> for a specific operation at it's index.
            </summary>
            <param name="index">The ordinal of the operation.</param>
            <returns>The <see cref="T:Couchbase.Core.IO.Operations.ResponseStatus"/> that the server returned.</returns>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.DocumentFragment`1.Value">
            <summary>
            An adapter between <see cref="T:Couchbase.Core.IO.Operations.IOperationResult`1"/> and the sub document API.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IDocumentFragment.Content``1(System.String)">
            <summary>
            The value if it exists for a specific path.
            </summary>
            <typeparam name="TContent">The <see cref="T:System.Type"/> to cast the value to.</typeparam>
            <param name="path">The path of the operation to retrieve the value from.</param>
            <returns>An object of type <see cref="T:System.Type"/> representing the value of the operation.</returns>
            <remarks>If no value exists, the default value for the <see cref="T:System.Type"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IDocumentFragment.Content``1(System.Int32)">
            <summary>
            The value if it exists for a specific index.
            </summary>
            <typeparam name="TContent">The <see cref="T:System.Type"/> to cast the value to.</typeparam>
            <param name="index">The ordinal of the operation to retrieve the value from.</param>
            <returns>An object of type <see cref="T:System.Type"/> representing the value of the operation.</returns>
            <remarks>If no value exists, the default value for the <see cref="T:System.Type"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IDocumentFragment.Content(System.String)">
            <summary>
            The value if it exists for a specific path.
            </summary>
            <param name="path">The path of the operation to retrieve the value from.</param>
            <returns>An <see cref="T:System.Object"/> representing the result of a operation.</returns>
            <remarks>If no value exists, the default value (null) for the <see cref="T:System.Object"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IDocumentFragment.Content(System.Int32)">
            <summary>
            The value if it exists for a specific index.
            </summary>
            <param name="index">The ordinal of the operation to retrieve the value from.</param>
            <returns>An <see cref="T:System.Object"/> representing the result of a operation.</returns>
            <remarks>If no value exists, the default value for the <see cref="T:System.Type"/> will be returned.</remarks>
            <remarks>If no value exists, the default value (null) for the <see cref="T:System.Object"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IDocumentFragment.Exists(System.String)">
            <summary>
            Checks whether the given path is part of this result set, eg. an operation targeted it, and the operation executed successfully.
            </summary>
            <param name="path">The path for the sub-document operation.</param>
            <returns><s>true</s> if that path is part of the successful result set, <s>false</s> in any other case.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IDocumentFragment.Count">
            <summary>
            The count of the sub-document operations chained togather.
            </summary>
            <returns>An <see cref="T:System.Int32"/> that is the count of the total operations chained togather.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IDocumentFragment.OpStatus(System.String)">
            <summary>
            Gets the <see cref="T:Couchbase.Core.IO.Operations.ResponseStatus"/> for a specific operation at it's path.
            </summary>
            <param name="path">The path of the operation.</param>
            <returns>The <see cref="T:Couchbase.Core.IO.Operations.ResponseStatus"/> that the server returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IDocumentFragment.OpStatus(System.Int32)">
            <summary>
            Gets the <see cref="T:Couchbase.Core.IO.Operations.ResponseStatus"/> for a specific operation at it's index.
            </summary>
            <param name="index">The ordinal of the operation.</param>
            <returns>The <see cref="T:Couchbase.Core.IO.Operations.ResponseStatus"/> that the server returned.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.SubDocument.IDocumentFragment`1">
            <summary>
            Represents one more fragments of a document that is returned by the sub-document API.
            </summary>
            <typeparam name="TDocument">The document</typeparam>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.IDocumentFragment`1.Expiry">
            <summary>
            The time-to-live or TTL for the document before it's evicted from disk in milliseconds.
            </summary>
            <remarks>Setting this to zero or less will give the document infinite lifetime</remarks>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1">
            <summary>
            Exposes a "builder" API for constructing a chain of read commands on a document within Couchbase.
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1.Get(System.String)">
            <summary>
            Gets the value at a specified N1QL path.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1"/> implementation reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1.Get(System.String,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Gets the value at a specified N1QL path.
            </summary>
            <param name="path">The path.</param>
            <param name="pathFlags">The path flags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>A <see cref="T:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1"/> implementation reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1.Exists(System.String)">
            <summary>
            Checks for the existence of a given N1QL path.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1"/> implementation reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1.Exists(System.String,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Checks for the existence of a given N1QL path.
            </summary>
            <param name="path">The path.</param>
            <param name="pathFlags">The lookup flags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>A <see cref="T:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1"/> implementation reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1.GetCount(System.String)">
            <summary>
            Gets the number of items in a collection or dictionary at a specified N1QL path.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1"/> implementation reference for chaining operations.</returns>
            <remarks>Requires Couchbase Server 5.0 or higher</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1.GetCount(System.String,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Gets the number of items in a collection or dictionary at a specified N1QL path.
            </summary>
            <param name="path">The path.</param>
            <param name="pathFlags">The subdocument lookup flags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>A <see cref="T:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1"/> implementation reference for chaining operations.</returns>
            <remarks>Requires Couchbase Server 5.0 or higher</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1.WithTimeout(System.TimeSpan)">
            <summary>
            The maximum time allowed for an operation to live before timing out.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1">
            <summary>
             Exposes the creation of a set of mutation operations to be performed.
            </summary>
            <typeparam name="TDocument">The strong typed document (POCO) reflecting the structure of the paths.</typeparam>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.Cas">
            <summary>
            A "check-and-set" value for ensuring that a document has not been modified by another thread.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.Expiry">
            <summary>
            The "time-to-live" or "TTL" that specifies the document's lifetime.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.PersistTo">
            <summary>
            A durability constraint ensuring that a document has been persisted to the n^th node.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ReplicateTo">
            <summary>
            A durability constraint for ensuring that the document has been replicated to the n^th node.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.Insert(System.String,System.Object,System.Boolean)">
            <summary>
            Inserts an element into a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is true.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.Insert(System.String,System.Object,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Inserts an element into a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="pathFlags">The lookup flags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.Upsert(System.String,System.Object,System.Boolean)">
            <summary>
            Inserts or updates an element within or into a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is true.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.Upsert(System.String,System.Object,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Inserts or updates an element within or into a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="pathFlags">The path flags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.Replace(System.String,System.Object)">
            <summary>
            Replaces an element or value within a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.Replace(System.String,System.Object,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Replaces an element or value within a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="pathFlags">The path flags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.Remove(System.String)">
            <summary>
            Removes an element or value from a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.Remove(System.String,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Removes an element or value from a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="pathFlags">The path flags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayAppend(System.Object,System.Boolean)">
            <summary>
            Inserts an array value at the end of an array that is the root of a JSON document.
            </summary>
            <param name="value">An array value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is true.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayAppend(System.Boolean,System.Object[])">
            <summary>
            Inserts one or more values at the end of an array that is the root of a JSON document.
            </summary>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayAppend(System.String,System.Object,System.Boolean)">
            <summary>
            Inserts a value to the end of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An aray value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is true.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayAppend(System.String,System.Object,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Inserts a value to the end of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An aray value.</param>
            <param name="pathFlags">The path flags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayAppend(System.String,System.Boolean,System.Object[])">
            <summary>
            Inserts one or more values to the end of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayAppend(System.String,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags,System.Object[])">
            <summary>
            Inserts one or more values to the end of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="pathFlags">The path flags.</param>
            <param name="docFlags">The document flags.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayPrepend(System.Object,System.Boolean)">
            <summary>
            Inserts a value to the beginning of an array that is the root of a JSON document.
            </summary>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is true.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayPrepend(System.Boolean,System.Object[])">
            <summary>
            Inserts one or more values to the beginning of an array that is the root of a JSON document.
            </summary>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayPrepend(System.String,System.Object,System.Boolean)">
            <summary>
            Inserts a value to the beginning of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is true.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayPrepend(System.String,System.Object,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Inserts a value to the beginning of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value.</param>
            <param name="pathFlags">The path flags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayPrepend(System.String,System.Boolean,System.Object[])">
            <summary>
            Inserts one or more values to the beginning of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayPrepend(System.String,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags,System.Object[])">
            <summary>
            Inserts one or more values to the beginning of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="pathFlags">The path flags.</param>
            <param name="docFlags">The document flags.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayInsert(System.String,System.Object)">
            <summary>
            Inserts a value at a given position within an array. The position is indicated as part of the path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayInsert(System.String,System.Object,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Inserts a value at a given position within an array. The position is indicated as part of the path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">A value.</param>
            <param name="pathFlags">The path flags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayInsert(System.String,System.Object[])">
            <summary>
            Inserts one or more values at a given position within an array. The position is indicated as part of the path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayInsert(System.String,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags,System.Object[])">
            <summary>
            Inserts one or more values at a given position within an array. The position is indicated as part of the path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="pathFlags">The path flags.</param>
            <param name="docFlags">The document flags.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayAddUnique(System.Object,System.Boolean)">
            <summary>
            Adds a value to an array if the value does not already exist in the array at the root of the JSON document.
            </summary>
            <param name="value">A unique value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is true.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayAddUnique(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a value to an array if the value does not already exist in the array.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">A unique value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is true.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ArrayAddUnique(System.String,System.Object,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Adds a value to an array if the value does not already exist in the array.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">A unique value.</param>
            <param name="pathFlags">The path flags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.Counter(System.String,System.Int64,System.Boolean)">
            <summary>
            Performs an arithmetic increment or decrement operation on a numeric value in a document.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="delta">The value to increment or decrement the original value by.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is true.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.Counter(System.String,System.Int64,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Performs an arithmetic increment or decrement operation on a numeric value in a document.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="delta">The value to increment or decrement the original value by.</param>
            <param name="pathFlags">The path flags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.WithExpiry(System.TimeSpan)">
            <summary>
            Applies an expiration to a document.
            </summary>
            <param name="expiry">The "time-to-live" or TTL of the document.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.WithCas(System.Int64)">
            <summary>
            A "check-and-set" value for ensuring that a document has not been modified by another thread.
            </summary>
            <param name="cas">The CAS value.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.WithCas(System.UInt64)">
            <summary>
            A "check-and-set" value for ensuring that a document has not been modified by another thread.
            </summary>
            <param name="cas">The CAS value.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.WithDurability(Couchbase.KeyValue.PersistTo)">
            <summary>
            A durability constraint ensuring that a document has been persisted to the n^th node.
            </summary>
            <param name="persistTo">The <see cref="P:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.PersistTo"/> value.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.WithDurability(Couchbase.KeyValue.ReplicateTo)">
            <summary>
            A durability constraint ensuring that a document has been persisted to the n^th node.
            </summary>
            <param name="replicateTo">The <see cref="P:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ReplicateTo"/> value.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.WithDurability(Couchbase.KeyValue.PersistTo,Couchbase.KeyValue.ReplicateTo)">
            <summary>
            Sets the <see cref="P:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ReplicateTo"/> and <see cref="P:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.PersistTo"/> values for a document.
            </summary>
            <param name="persistTo">The <see cref="P:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.PersistTo"/> value.</param>
            <param name="replicateTo">The <see cref="P:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.ReplicateTo"/> value.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1.WithTimeout(System.TimeSpan)">
            <summary>
            The maximum time allowed for an operation to live before timing out.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.ISubDocBuilder`1.Execute">
            <summary>
            Executes the chained operations.
            </summary>
            <returns>
            A <see cref="T:Couchbase.IDocumentFragment`1" /> representing the results of the chained operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.ISubDocBuilder`1.ExecuteAsync">
            <summary>
            Executes the chained operations.
            </summary>
            <returns>
            A <see cref="T:Couchbase.IDocumentFragment`1" /> representing the results of the chained operations.
            </returns>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.ISubDocBuilder`1.Key">
            <summary>
            Gets or sets the unique identifier for the document.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.ISubDocBuilder`1.Count">
            <summary>
            Returns a count of the currently chained operations.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.ISubDocBuilder`1.Timeout">
            <summary>
            The maximum time allowed for an operation to live before timing out.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1">
            <summary>
            An implementation of <see cref="T:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1"/> that exposes a "builder" API for constructing a chain of read commands on a document within Couchbase.
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <seealso cref="T:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1" />
            <seealso cref="T:Couchbase.Core.IO.Serializers.ITypeSerializerProvider" />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.#ctor(System.Func{Couchbase.Core.IO.Serializers.ITypeSerializer},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1"/> class.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException"> invoker or serializer or key.
            </exception>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.Serializer">
            <summary>
            Gets the <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer" /> related to the object.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.Key">
            <summary>
            Gets or sets the unique identifier for the document.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.Count">
            <summary>
            Returns a count of the currently chained operations.
            </summary>
            <returns>A <see cref="T:System.Int32"/> representing the number of chained commands.</returns>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.Timeout">
            <summary>
            The maximum time allowed for an operation to live before timing out.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.Get(System.String)">
            <summary>
            Gets the value at a specified N1QL path.
            </summary>
            <param name="path">The path.</param>
            <returns>
            A <see cref="T:Couchbase.Core.ILookupInBuilder`1" /> implementation reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.Get(System.String,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Gets the value at a specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="pathFlags">The Subdoc pathFlags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>
            A <see cref="T:Couchbase.Core.ILookupInBuilder`1" /> implementation reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.Exists(System.String)">
            <summary>
            Checks for the existence of a given N1QL path.
            </summary>
            <param name="path">The path.</param>
            <returns>
            A <see cref="T:Couchbase.Core.ILookupInBuilder`1" /> implementation reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.Exists(System.String,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Checks for the existence of a given N1QL path.
            </summary>
            <param name="path">The path.</param>
            <param name="pathFlags">The Subdoc pathFlags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>
            A <see cref="T:Couchbase.Core.ILookupInBuilder`1" /> implementation reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.GetCount(System.String)">
            <summary>
            Gets the number of items in a collection or dictionary at a specified N1QL path.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1"/> implementation reference for chaining operations.</returns>
            <remarks>Requires Couchbase Server 5.0 or higher</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.GetCount(System.String,Couchbase.KeyValue.SubdocPathFlags,Couchbase.KeyValue.SubdocDocFlags)">
            <summary>
            Gets the number of items in a collection or dictionary at a specified N1QL path.
            </summary>
            <param name="path">The path.</param>
            <param name="pathFlags">The subdocument lookup pathFlags.</param>
            <param name="docFlags">The document flags.</param>
            <returns>A <see cref="T:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1"/> implementation reference for chaining operations.</returns>
            <remarks>Requires Couchbase Server 5.0 or higher</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.Execute">
            <summary>
            Executes the chained operations.
            </summary>
            <returns>
            A <see cref="T:Couchbase.IDocumentFragment`1" /> representing the results of the chained operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.ExecuteAsync">
            <summary>
            Executes the chained operations.
            </summary>
            <returns>
            A <see cref="T:Couchbase.IDocumentFragment`1" /> representing the results of the chained operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.System#Collections#Generic#IEnumerable{Couchbase#Core#IO#Operations#SubDocument#OperationSpec}#GetEnumerator">
            <summary>
            Gets the enumerator for enumerating the list of <see cref="T:Couchbase.Core.IO.Operations.SubDocument.OperationSpec"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.Equals(Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.LookupInBuilder`1.WithTimeout(System.TimeSpan)">
            <summary>
            The maximum time allowed for an operation to live before timing out.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Operations.SubDocument.ILookupInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.MultiLookup`1.ParseCommandValues">
            <summary>
            Parses the response data into <see cref="P:Couchbase.Core.IO.Operations.SubDocument.MultiLookup`1.LookupCommands"/>.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> to cleanup any data buffers.</returns>
            <remarks>
            The parsed <see cref="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.Bytes"/> is a reference to the memory in the response data.
            It is no longer valid once the response data is disposed via the returned <see cref="T:System.IDisposable"/>.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.MultiLookup`1.Equals(Couchbase.Core.IO.Operations.SubDocument.MultiLookup{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.MultiMutation`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.MultiMutation`1.ParseCommandValues">
            <summary>
            Parses the response data into <see cref="P:Couchbase.Core.IO.Operations.SubDocument.MultiMutation`1.MutateCommands"/>.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> to cleanup any data buffers.</returns>
            <remarks>
            The parsed <see cref="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.Bytes"/> is a reference to the memory in the response data.
            It is no longer valid once the response data is disposed via the returned <see cref="T:System.IDisposable"/>.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.MultiMutation`1.Equals(Couchbase.Core.IO.Operations.SubDocument.MultiMutation{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:Couchbase.Core.IO.Operations.SubDocument.OperationSpec">
            <summary>
            Represents a single operation within a multi-operation against a document using the SubDocument API.
            </summary>
        </member>
        <member name="F:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.MaxPathLength">
            <summary>
            Maximum length of the path, in bytes.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.Path">
            <summary>
            Gets or sets the N1QL path within the document.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.OriginalIndex">
            <summary>
            Gets the original index in the spec list.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.OpCode">
            <summary>
            Gets or sets the <see cref="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.OpCode"/> for the SubDocument operation.
            </summary>
            <value>
            The op code.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.Value">
            <summary>
            Gets or sets the value that will be written or received. This can be a JSON fragment or a scalar.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.Bytes">
            <summary>
            Gets or sets the bytes.
            </summary>
            <value>
            The bytes.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.PathFlags">
            <summary>
            Gets or sets the path flags for the operation.
            </summary>
            <value>
            The flags.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.DocFlags">
            <summary>
            Gets or sets the document flags for the operation.
            </summary>
            <value>
            The flags.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.Status">
            <summary>
            Gets or sets the <see cref="T:Couchbase.Core.IO.Operations.ResponseStatus"/> returned by the server indicating the status of the operation - i.e. failed, succeeded, etc.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.RemoveBrackets">
            <summary>
            Gets or sets a value indicating whether or not to remove array brackets.
            </summary>
            <value>
              <c>true</c> if array brackets will be removed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.ValueIsJson">
            <summary>
            Gets or sets a value indicating whether the value is valid JSON and not just an element's value.
            </summary>
            <value>
              <c>true</c> if value is JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Couchbase.Core.IO.Operations.SubDocument.OperationSpec" />, is equal to this instance. Only compares Path and OpCode!
            </summary>
            <param name="obj">The <see cref="T:Couchbase.Core.IO.Operations.SubDocument.OperationSpec" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Couchbase.Core.IO.Operations.SubDocument.OperationSpec" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Couchbase.Core.IO.Operations.SubDocument.OperationSpec" />, is equal to this instance. Only compares Path and OpCode!
            </summary>
            <param name="x">The <see cref="T:Couchbase.Core.IO.Operations.SubDocument.OperationSpec" /> to compare with this instance.</param>
            <param name="y">The y.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Couchbase.Core.IO.Operations.SubDocument.OperationSpec" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Couchbase.Core.IO.Operations.Unlock.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.DefaultFallbackTypeSerializerProvider">
            <summary>
            Implementation of <see cref="T:Couchbase.Core.IO.Serializers.IFallbackTypeSerializerProvider"/> which provides a <see cref="T:Couchbase.Core.IO.Serializers.DefaultSerializer"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.DefaultFallbackTypeSerializerProvider.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.DefaultFallbackTypeSerializerProvider.Serializer">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.DefaultJsonStreamReader">
            <summary>
            Newtonsoft.Json based implementation of <see cref="T:Couchbase.Core.IO.Serializers.IJsonStreamReader"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.DefaultJsonStreamReader.Deserializer">
            <summary>
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> to use for deserializing objects.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.DefaultJsonStreamReader.ValueType">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.DefaultJsonStreamReader.Value">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.DefaultJsonStreamReader.Depth">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultJsonStreamReader.#ctor(System.IO.Stream,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a new DefaultJsonStreamReader.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="deserializer">The <see cref="T:Newtonsoft.Json.JsonSerializer"/> to use for deserializing objects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> or <paramref name="deserializer"/> is null.</exception>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultJsonStreamReader.InitializeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultJsonStreamReader.ReadToNextAttributeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultJsonStreamReader.ReadObjectAsync``1(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultJsonStreamReader.ReadArrayAsync``1(System.Func{Couchbase.Core.IO.Serializers.IJsonStreamReader,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultJsonStreamReader.ReadTokenAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultJsonStreamReader.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.DefaultSerializer">
            <summary>
            The default serializer for the Couchbase.NET SDK. Uses Newtonsoft.JSON as the the serializer.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.DefaultSerializer.SupportedDeserializationOptions">
            <summary>
            Informs consumers what deserialization options this <see cref="T:Couchbase.Core.IO.Serializers.IExtendedTypeSerializer"/> supports.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.DefaultSerializer.SerializerSettings">
            <summary>
            Gets the outgoing serializer settings; controls the format of the JSON you are storing in Couchbase.
            </summary>
            <value>
            The outgoing serializer settings; controls the format of the JSON you are storing in Couchbase.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.DefaultSerializer.DeserializationSettings">
            <summary>
            Gets the incoming de-serializer settings; controls the format of the incoming JSON for de-serialization into POCOs.
            </summary>
            <value>
            The incoming serializer settings.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.DefaultSerializer.DeserializationOptions">
            <summary>
            Provides custom deserialization options.  Options not listed in <see cref="P:Couchbase.Core.IO.Serializers.IExtendedTypeSerializer.SupportedDeserializationOptions"/>
            will be ignored.  If null, then defaults will be used.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultSerializer.Deserialize``1(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultSerializer.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultSerializer.Serialize(System.IO.Stream,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultSerializer.Deserialize``1(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultSerializer.GetMemberName(System.Reflection.MemberInfo)">
            <inheritdoc />
            <remarks>
            DefaultSerializer uses <see cref="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver"/> from <see cref="P:Couchbase.Core.IO.Serializers.DefaultSerializer.SerializerSettings"/>
            to determine the member name.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultSerializer.CreateJsonStreamReader(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.DefaultSerializer.CreateProjectionBuilder(Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.DeserializationOptions">
            <summary>
            Options to control deserialization process in an <see cref="T:Couchbase.Core.IO.Serializers.IExtendedTypeSerializer"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.DeserializationOptions.HasSettings">
            <summary>
            Returns true if any custom options are set
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.DeserializationOptions.CustomObjectCreator">
            <summary>
            <see cref="T:Couchbase.Core.IO.Serializers.ICustomObjectCreator"/> to use when creating objects during deserialization.
            Null will uses the <see cref="T:Couchbase.Core.IO.Serializers.IExtendedTypeSerializer"/> defaults for type creation.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.ICustomObjectCreator">
            <summary>
            Used to control type creation during deserialization.  For example, it can be used to create object proxies.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.ICustomObjectCreator.CanCreateObject(System.Type)">
            <summary>
            Determine if this creator can create a particular type.
            </summary>
            <param name="type">Type to test.</param>
            <returns>True if this creator can create a particular type.</returns>
            <remarks>Results of this method should be consistent for every call so that they can be cached.</remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.ICustomObjectCreator.CreateObject(System.Type)">
            <summary>
            Create an instance of a particular type with default values, ready to be populated by the deserializer.
            </summary>
            <param name="type">Type to create.</param>
            <returns>New instance of the type with default values, ready to be populated by the deserializer.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.IExtendedTypeSerializer">
            <summary>
            Provides an interface for serialization and deserialization of K/V pairs, with support for more
            advanced deserialization features.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.IExtendedTypeSerializer.SupportedDeserializationOptions">
            <summary>
            Informs consumers what deserialization options this <see cref="T:Couchbase.Core.IO.Serializers.IExtendedTypeSerializer"/> supports.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.IExtendedTypeSerializer.DeserializationOptions">
            <summary>
            Provides custom deserialization options.  Options not listed in <see cref="P:Couchbase.Core.IO.Serializers.IExtendedTypeSerializer.SupportedDeserializationOptions"/>
            will be ignored.  If null, then defaults will be used.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IExtendedTypeSerializer.GetMemberName(System.Reflection.MemberInfo)">
            <summary>
            Get the name which will be used for a given member during serialization/deserialization.
            </summary>
            <param name="member">Returns the name of this member.</param>
            <returns>
            The name which will be used for a given member during serialization/deserialization,
            or null if if will not be serialized.
            </returns>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.IFallbackTypeSerializerProvider">
            <summary>
            Service which provides a fallback serializer for special cases. The typical implementation is the
            <see cref="T:Couchbase.Core.IO.Serializers.DefaultFallbackTypeSerializerProvider"/> which provides a <see cref="T:Couchbase.Core.IO.Serializers.DefaultSerializer"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.IFallbackTypeSerializerProvider.Serializer">
            <summary>
            The fallback serializer, or null if none is available.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.IJsonStreamReader">
            <summary>
            Reads values and objects from a JSON stream asynchronously.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.IJsonStreamReader.ValueType">
            <summary>
            If the reader is stopped on a simple value attribute, returns
            the .NET type of the value. Otherwise, returns null.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.IJsonStreamReader.Value">
            <summary>
            If the reader is stopped on a simple value attribute, returns
            the value.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.IJsonStreamReader.Depth">
            <summary>
            The current depth of the reader. Zero indicates ready to read the root object, one indicates an attribute on the root object, etc.
            </summary>
            <remarks>
            Example paths: "metrics" == 1, "metrics.count" == 2, "results[0].abv" == 3.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IJsonStreamReader.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the reader
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns><value>true</value> if successfully initialized.</returns>
            <exception cref="T:System.InvalidOperationException">InitializeAsync should only be called once.</exception>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IJsonStreamReader.ReadToNextAttributeAsync(System.Threading.CancellationToken)">
            <summary>
            Reads until the next attribute is found in the stream. Returns the path to the attribute,
            or <value>null</value> if the end of the stream is reached.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
            Path to the attribute relative to the overall stream,
            or <value>null</value> if the end of the stream is reached"
            </returns>
            <remarks>
            The returned path is "." separated, and relative to the overall stream. For example, if
            the attribute "metrics" is on the root object, returns "metrics". If the attribute reached
            is "count" on the "metrics" object, the returned value is "metrics.count". Arrays are indicated
            with square brackets, for example "results[0].abv".
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IJsonStreamReader.ReadObjectAsync``1(System.Threading.CancellationToken)">
            <summary>
            Reads an object at the current point in the stream.
            </summary>
            <typeparam name="T">Type of the object to read.</typeparam>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The object read.</returns>
            <remarks>
            This method also supports reading literals such as strings, numbers, nulls, etc,
            given the correct type for <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IJsonStreamReader.ReadArrayAsync``1(System.Func{Couchbase.Core.IO.Serializers.IJsonStreamReader,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Reads an array of tokens at the current point in the stream.
            </summary>
            <typeparam name="T">Type of elements returned.</typeparam>
            <param name="readElement">Function which reads each element of the array.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to read the array.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IJsonStreamReader.ReadTokenAsync(System.Threading.CancellationToken)">
            <summary>
            Reads a dynamic token at the current point in the stream.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The dynamic object.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.IJsonToken">
            <summary>
            Used to support dynamic object reading during streaming JSON deserialization.
            </summary>
            <seealso cref="T:Couchbase.Core.IO.Serializers.IJsonStreamReader" />
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.IJsonToken.Item(System.String)">
            <summary>
            Gets the value of a particular attribute of this token.
            Returns null if the attribute is not found.
            </summary>
            <param name="key">Name of the attribute.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IJsonToken.ToObject``1">
            <summary>
            Deserializes the token to an object.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <returns>The object.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IJsonToken.Value``1">
            <summary>
            Returns the token cast as a particular type, such as a string or integer.
            </summary>
            <typeparam name="T">Type to cast.</typeparam>
            <returns>The value.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IJsonToken.ToDynamic">
            <summary>
            Returns a dynamic object representing the current token.
            </summary>
            <returns>The dynamic object.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.IProjectableTypeDeserializer">
            <summary>
            Extends <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> with methods for parsing projections from key/value responses.
            If not present, calling <see cref="M:Couchbase.KeyValue.IGetResult.ContentAs``1"/> for a LookupIn sub-document operation
            or for a get operation with projections will fallback to using <see cref="T:Couchbase.Core.IO.Serializers.DefaultSerializer"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IProjectableTypeDeserializer.CreateProjectionBuilder(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Create a new <see cref="T:Couchbase.Core.IO.Serializers.IProjectionBuilder"/> based on this serializer.
            </summary>
            <param name="logger">Logger for logging warnings or errors.</param>
            <returns>A new <see cref="T:Couchbase.Core.IO.Serializers.IProjectionBuilder"/>.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.IProjectionBuilder">
            <summary>
            Interface for projecting sub-document operations onto a target class.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IProjectionBuilder.AddPath(System.String,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Adds a value for a sub-document operation at a specific path.
            </summary>
            <param name="path">Path of the sub-document operation.</param>
            <param name="specValue">Data returned for the operation.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IProjectionBuilder.AddChildren(System.Collections.Generic.IReadOnlyCollection{System.String},System.ReadOnlyMemory{System.Byte})">
            <summary>
            Adds all children for a subset when an entire document is retreived in the spec.
            </summary>
            <param name="children">List of child attributes to be retained.</param>
            <param name="specValue">Data returned that represents the entire document.</param>
            <remarks>
            This is typically used when a large number of projections are requested as an optimization.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IProjectionBuilder.ToObject``1">
            <summary>
            Converts the collected projections to a target object.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <returns>The new object.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IProjectionBuilder.ToPrimitive``1">
            <summary>
            Converts one of the projections to a target primitive type.
            </summary>
            <typeparam name="T">Primitive type.</typeparam>
            <returns>The value of the projections.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.IStreamingTypeDeserializer">
            <summary>
            Extends <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> with methods for deserializing
            a stream gradually. This allows deserialization to begin before the
            entire stream is available, and can reduce memory utilization if the
            result is processed as a stream rather than placed in a list.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.IStreamingTypeDeserializer.CreateJsonStreamReader(System.IO.Stream)">
            <summary>
            Create an <see cref="T:Couchbase.Core.IO.Serializers.IJsonStreamReader"/> for parsing a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> to parse.</param>
            <returns>The new <see cref="T:Couchbase.Core.IO.Serializers.IJsonStreamReader"/>.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.ITypeSerializer">
            <summary>
            Provides an interface for serialization and deserialization of K/V pairs.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.ITypeSerializer.Deserialize``1(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserializes the specified buffer into the <see cref="T:System.Type"/> T specified as a generic parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> specified as the type of the value.</typeparam>
            <param name="buffer">The buffer to deserialize from.</param>
            <returns>The <see cref="T:System.Type"/> instance representing the value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.ITypeSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes the specified stream into the <see cref="T:System.Type"/> T specified as a generic parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> specified as the type of the value.</typeparam>
            <param name="stream">The stream.</param>
            <returns>The <see cref="T:System.Type"/> instance representing the value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.ITypeSerializer.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Deserializes the specified stream into the <see cref="T:System.Type"/> T specified as a generic parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> specified as the type of the value.</typeparam>
            <param name="stream">The stream.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The <see cref="T:System.Type"/> instance representing the value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.ITypeSerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified object onto a stream.
            </summary>
            <param name="stream">The stream to receive the serialized object.</param>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.ITypeSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Threading.CancellationToken)">
            <summary>
            Serializes the specified object onto a stream.
            </summary>
            <param name="stream">The stream to receive the serialized object.</param>
            <param name="obj">The object to serialize.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.ITypeSerializer.Serialize``1(System.IO.Stream,``0)">
            <summary>
            Serializes the specified object onto a stream.
            </summary>
            <typeparam name="T">Type of object to serialize.</typeparam>
            <param name="stream">The stream to receive the serialized object.</param>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.ITypeSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Threading.CancellationToken)">
            <summary>
            Serializes the specified object onto a stream.
            </summary>
            <typeparam name="T">Type of object to serialize.</typeparam>
            <param name="stream">The stream to receive the serialized object.</param>
            <param name="obj">The object to serialize.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.ITypeSerializerProvider">
            <summary>
            Provides access to an <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> related to the object.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.ITypeSerializerProvider.Serializer">
            <summary>
            Gets the <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> related to the object.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.JsonArrayPool">
            <summary>
            Maps Newtonsoft.Json <see cref="T:Newtonsoft.Json.IArrayPool`1"/> to the .NET <see cref="T:System.Buffers.ArrayPool`1"/> so that
            the JSON serializer and deserializer can make use of the shared array pool.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.JsonArrayPool.Instance">
            <summary>
            A shared instance of <see cref="T:Couchbase.Core.IO.Serializers.JsonArrayPool"/> which uses <see cref="P:System.Buffers.ArrayPool`1.Shared"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.JsonArrayPool.#ctor(System.Buffers.ArrayPool{System.Char})">
            <summary>
            Creates a new JsonArrayPool.
            </summary>
            <param name="pool">The <see cref="T:System.Buffers.ArrayPool`1"/> to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="pool"/> is null.</exception>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.JsonArrayPool.Rent(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.JsonArrayPool.Return(System.Char[])">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.JsonNetCustomObjectCreatorWrapper">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> that wraps an <see cref="T:Couchbase.Core.IO.Serializers.ICustomObjectCreator"/> to support Json.Net deserialization.
            </summary>
            <remarks>
            Used by <see cref="T:Couchbase.Core.IO.Serializers.DefaultSerializer"/> if an <see cref="T:Couchbase.Core.IO.Serializers.ICustomObjectCreator"/> is supplied.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.JsonStreamDeserializerExtensions">
            <summary>
            Extensions for <seealso cref="T:Couchbase.Core.IO.Serializers.IJsonStreamReader"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.JsonStreamDeserializerExtensions.ReadTokensAsync(Couchbase.Core.IO.Serializers.IJsonStreamReader,System.Threading.CancellationToken)">
            <summary>
            Read an array at the current point in the stream as an array of <seealso cref="T:Couchbase.Core.IO.Serializers.IJsonToken"/>.
            </summary>
            <param name="reader">The <seealso cref="T:Couchbase.Core.IO.Serializers.IJsonStreamReader"/>.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> of the tokens.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.JsonStreamDeserializerExtensions.ReadObjectsAsync``1(Couchbase.Core.IO.Serializers.IJsonStreamReader,System.Threading.CancellationToken)">
            <summary>
            Read an array at the current point in the stream as an array of POCOs.
            </summary>
            <typeparam name="T">Type of POCO in the array.</typeparam>
            <param name="reader">The <seealso cref="T:Couchbase.Core.IO.Serializers.IJsonStreamReader"/>.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> of the objects.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.NewtonsoftJsonToken">
            <summary>
            Newtonsoft.Json implementation of <seealso cref="T:Couchbase.Core.IO.Serializers.IJsonToken"/>
            which wraps a <seealso cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.NewtonsoftJsonToken.#ctor(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a new NewtonsoftJsonToken.
            </summary>
            <param name="token">The <seealso cref="T:Newtonsoft.Json.Linq.JToken"/> to wrap.</param>
            <param name="deserializer">Deserializer to use for <seealso cref="M:Couchbase.Core.IO.Serializers.NewtonsoftJsonToken.ToObject``1"/> calls.</param>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.NewtonsoftJsonToken.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.NewtonsoftJsonToken.ToObject``1">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.NewtonsoftJsonToken.Value``1">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.NewtonsoftJsonToken.ToDynamic">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.NewtonsoftProjectionBuilder">
            <summary>
            Implementation of <see cref="T:Couchbase.Core.IO.Serializers.IProjectionBuilder"/> for <see cref="T:Couchbase.Core.IO.Serializers.DefaultSerializer"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.NewtonsoftProjectionBuilder.#ctor(Couchbase.Core.IO.Serializers.DefaultSerializer,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a new NewtonsoftProjectionBuilder.
            </summary>
            <param name="serializer">DefaultSerializer to use when deserializing content.</param>
            <param name="logger">Logger for recording warnings and errors.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.NewtonsoftProjectionBuilder.AddPath(System.String,System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.NewtonsoftProjectionBuilder.AddChildren(System.Collections.Generic.IReadOnlyCollection{System.String},System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.NewtonsoftProjectionBuilder.ToObject``1">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.NewtonsoftProjectionBuilder.ToPrimitive``1">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.NullFallbackTypeSerializerProvider">
            <summary>
            For use with trimming, does not provide a fallback serializer.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.NullFallbackTypeSerializerProvider.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.NullFallbackTypeSerializerProvider.Serializer">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.SupportedDeserializationOptions">
            <summary>
                Supplied by <see cref="T:Couchbase.Core.IO.Serializers.IExtendedTypeSerializer" /> to define which deserialization options it supports.
            </summary>
            <remarks>Intended to help support backwards compatibility as new deserialization options are added in the future.</remarks>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.SupportedDeserializationOptions.CustomObjectCreator">
            <summary>
                If true, the <see cref="T:Couchbase.Core.IO.Serializers.IExtendedTypeSerializer" /> supports
                <see cref="P:Couchbase.Core.IO.Serializers.DeserializationOptions.CustomObjectCreator" />.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.SystemTextJson.ContextHelpers">
            <summary>
            Helpers for working with <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextHelpers.GetTypeInfo``1(System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>
            Gets the <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1" /> for <typeparamref name="T"/> from the <paramref name="context"/>,
            or throws an exception if it is not present.
            </summary>
            <typeparam name="T">Type to lookup.</typeparam>
            <param name="context">The <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>.</param>
            <returns>The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1"/> from the context.</returns>
            <exception cref="T:System.InvalidOperationException">The type info was not found.</exception>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextHelpers.TryGetTypeInfo``1(System.Text.Json.Serialization.JsonSerializerContext,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0}@)">
            <summary>
            Gets the <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1" /> for <typeparamref name="T"/> from the <paramref name="context"/>.
            </summary>
            <typeparam name="T">Type to lookup.</typeparam>
            <param name="context">The <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>.</param>
            <param name="typeInfo">The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1"/> from the context.</param>
            <returns>True if the <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1"/> was found.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonProjectionBuilder.ToObject``1">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonProjectionBuilder.ToPrimitive``1">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonSerializer">
            <summary>
            A JSON serializer which uses <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> to support higher performance and trimming.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonSerializer.Options">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonSerializer.Context">
            <summary>
            <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> provided during construction.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonSerializer.#ctor(System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>
            Create a new SystemTextJsonSerializer using a supplied <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>.
            </summary>
            <param name="context"><see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization.</param>
            <remarks>
            This overload should be used to supply custom serializers on a per-request basis that are optimized for the particular
            type being serialized or deserialized. Any type which isn't registered in the <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>
            will be handled using the <see cref="P:System.Text.Json.Serialization.JsonSerializerContext.Options"/>.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonSerializer.Deserialize``1(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonSerializer.Deserialize``1(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonSerializer.Serialize(System.IO.Stream,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonSerializer.Serialize``1(System.IO.Stream,``0)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ContextSystemTextJsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.SystemTextJson.EnumDescriptionJsonConverter`1">
            <summary>
            Serializes an enumeration using strings from <see cref="T:System.ComponentModel.DescriptionAttribute"/> annotations.
            </summary>
            <typeparam name="T">Type of the enumeration.</typeparam>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.SystemTextJson.JsonElementExtensions">
            <summary>
            Extensions for <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.SystemTextJson.MillisecondsStringJsonConverter">
            <summary>
            Serializes a <see cref="T:System.TimeSpan"/> as the number of whole milliseconds in the format
            "123ms". Does not support deserialization.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.SystemTextJson.NullableEnumDescriptionJsonConverter`1">
            <summary>
            Serializes a nullable enumeration using strings from <see cref="T:System.ComponentModel.DescriptionAttribute"/> annotations.
            </summary>
            <typeparam name="T">Type of the enumeration.</typeparam>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonProjectionBuilder.ToObject``1">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonProjectionBuilder.ToPrimitive``1">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonSerializer">
            <summary>
            A JSON serializer which uses reflection.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonSerializer.Options">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonSerializer.#ctor(System.Boolean)">
            <summary>
            Create a new SystemTextJsonSerializer with default options, optionally enabling increased Newtonsoft.Json compatibility.
            </summary>
            <param name="increasedNewtonsoftCompatibility">Enable increased Newtonsoft.Json compatibility.</param>
            <remarks>
            The <paramref name="increasedNewtonsoftCompatibility"/> parameter doesn't make this fully compatible with Newtonsoft.Json.
            However, it does enable several features to make it more compatible such as case-insensitive property name deserialization,
            ignoring comments and trailcommas, serializing public fields, etc. For details on compatibility, see
            https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonSerializer.#ctor(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Create a new SystemTextJsonSerializer with supplied <see cref="T:System.Text.Json.JsonSerializerOptions"/>.
            </summary>
            <param name="options"><see cref="T:System.Text.Json.JsonSerializerOptions"/> to control serialization and deserialization.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonSerializer.Deserialize``1(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonSerializer.Deserialize``1(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonSerializer.Serialize(System.IO.Stream,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonSerializer.Serialize``1(System.IO.Stream,``0)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.ReflectionSystemTextJsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonProjectionBuilder.AddPath(System.String,System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonProjectionBuilder.AddChildren(System.Collections.Generic.IReadOnlyCollection{System.String},System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonProjectionBuilder.ToObject``1">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonProjectionBuilder.ToPrimitive``1">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonStreamReader.Depth">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonStreamReader.InitializeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonStreamReader.ReadToNextAttributeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonStreamReader.ReadObjectAsync``1(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonStreamReader.ReadArrayAsync``1(System.Func{Couchbase.Core.IO.Serializers.IJsonStreamReader,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonStreamReader.ReadTokenAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonStreamReader.ValueType">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonStreamReader.Value">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonStreamReader.PathState">
            <summary>
            Tracks the path to the current property or array item in the top of the stack.
            The strings for previous paths that lead to the current property or array item
            are stored in the layers of the stack to reduce string allocations as we navigate.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonToken.#ctor(System.Text.Json.JsonElement,Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonStreamReader)">
            <summary>
            Creates a new NewtonsoftJsonToken.
            </summary>
            <param name="element">The <seealso cref="T:System.Text.Json.JsonElement"/> to wrap.</param>
            <param name="streamReader"><see cref="T:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonStreamReader"/> to use for deserialization.</param>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonToken.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonToken.ToObject``1">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonToken.Value``1">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJson.SystemTextJsonToken.ToDynamic">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.SystemTextJson.TypeSerializerWrapper">
            <summary>
            Wraps an object which should be serialized to JSON using an <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/>.
            This allows System.Text.Json serialization to override the behavior of a particular object
            and serialize it with the configured <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/>. In this way, some parts
            of the JSON object graph are serialized by our internal serializer and others by the custom serializer.
            </summary>
            <remarks>
            Note that some simple intrinsics, such as strings and numbers, may be serialized with the
            default serializer for performance reasons.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.SystemTextJson.TypeSerializerWrapperConverter">
            <summary>
            <see cref="T:System.Text.Json.Serialization.JsonConverter"/> which serializes the content of <see cref="T:Couchbase.Core.IO.Serializers.SystemTextJson.TypeSerializerWrapper"/>
            using its preferred <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer">
            <summary>
            A JSON serializer based on System.Text.Json.
            </summary>
            <remarks>
            <para>
                This class is currently experimental and subject to change. It does not support all serialization features
                supported by the <see cref="T:Couchbase.Core.IO.Serializers.DefaultSerializer"/>. Known limitations currently include:
            </para>
            <list type="bullet">
                <item>
                    <description>
                        Couchbase.Transactions is not currently supported.
                    </description>
                </item>
                <item>
                    <description>
                        No support for <c>dynamic</c> types.
                    </description>
                </item>
                <item>
                    <description>
                        Some properties of <see cref="T:Couchbase.Query.QueryMetaData"/> which use <c>dynamic</c>,
                        such as <see cref="P:Couchbase.Query.QueryMetaData.Profile"/> and <see cref="P:Couchbase.Query.QueryMetaData.Signature"/>,
                        are not populated.
                    </description>
                </item>
                <item>
                    <description>
                        View-style queries are not supported using <c>JsonSerializerContext</c>, only reflection-based serialization.
                    </description>
                </item>
                <item>
                    <description>
                        Any use of <see cref="T:Newtonsoft.Json.Linq.JToken"/> should be replaced with <see cref="T:System.Text.Json.JsonElement"/> or <c>object</c>.
                    </description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.Options">
            <summary>
            <see cref="T:System.Text.Json.JsonSerializerOptions"/> used for serialization and deserialization.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.SupportedDeserializationOptions">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.DeserializationOptions">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.Deserialize``1(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.Deserialize``1(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.Serialize(System.IO.Stream,System.Object)">
            <inheritdoc />
            <remarks>
            This overload does not make use of <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
            <remarks>
            This overload does not make use of <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object)">
            <summary>
            Serializes the specified object onto a <see cref="T:System.Text.Json.Utf8JsonWriter"/>.
            </summary>
            <param name="stream">The writer to receive the serialized object.</param>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.Serialize``1(System.IO.Stream,``0)">
            <summary>
            Serializes the specified object onto a stream.
            </summary>
            <typeparam name="T">Type of object to serialize.</typeparam>
            <param name="stream">The stream to receive the serialized object.</param>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Threading.CancellationToken)">
            <summary>
            Serializes the specified object onto a stream.
            </summary>
            <typeparam name="T">Type of object to serialize.</typeparam>
            <param name="stream">The stream to receive the serialized object.</param>
            <param name="obj">The object to serialize.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0)">
            <summary>
            Serializes the specified object onto a <see cref="T:System.Text.Json.Utf8JsonWriter"/>.
            </summary>
            <typeparam name="T">Type of object to serialize.</typeparam>
            <param name="stream">The writer to receive the serialized object.</param>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.GetMemberName(System.Reflection.MemberInfo)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.Create(System.Boolean)">
            <summary>
            Create a new SystemTextJsonSerializer with default options, optionally enabling increased Newtonsoft.Json compatibility.
            </summary>
            <param name="increasedNewtonsoftCompatibility">Enable increased Newtonsoft.Json compatibility.</param>
            <remarks>
            The <paramref name="increasedNewtonsoftCompatibility"/> parameter doesn't make this fully compatible with Newtonsoft.Json.
            However, it does enable several features to make it more compatible such as case-insensitive property name deserialization,
            ignoring comments and trailing commas, serializing public fields, etc. For details on compatibility, see
            https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to
            </remarks>
            <returns>A new SystemTextJsonSerializer.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.Create(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Create a new SystemTextJsonSerializer with supplied <see cref="T:System.Text.Json.JsonSerializerOptions"/>.
            </summary>
            <param name="options"><see cref="T:System.Text.Json.JsonSerializerOptions"/> to control serialization and deserialization.</param>
            <returns>A new SystemTextJsonSerializer.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.Create(System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>
            Create a new SystemTextJsonSerializer using a supplied <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>.
            </summary>
            <param name="context"><see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization.</param>
            <remarks>
            This overload should be used to supply custom serializers on a per-request basis that are optimized for the particular
            type being serialized or deserialized. Any type which isn't registered in the <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>
            will be handled using the <see cref="P:System.Text.Json.Serialization.JsonSerializerContext.Options"/>.
            </remarks>
            <returns>A new SystemTextJsonSerializer.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.CreateProjectionBuilder(Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer.CreateJsonStreamReader(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.TypeSerializerExtensions.Deserialize``1(Couchbase.Core.IO.Serializers.ITypeSerializer,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deserializes the specified buffer into the <see cref="T:System.Type"/> T specified as a generic parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> specified as the type of the value.</typeparam>
            <param name="typeSerializer">The <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/>.</param>
            <param name="buffer">The buffer to deserialize from.</param>
            <param name="offset">The offset of the buffer to start reading from.</param>
            <param name="length">The length of the buffer to read from.</param>
            <returns>The <see cref="T:System.Type"/> instance representing the value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Serializers.TypeSerializerExtensions.Serialize(Couchbase.Core.IO.Serializers.ITypeSerializer,System.Object)">
            <summary>
            Serializes the specified object onto a stream.
            </summary>
            <param name="typeSerializer">The <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/>.</param>
            <param name="obj">The object to serialize.</param>
            <returns>A byte array containing the serialized object.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.Serializers.UnixMillisecondsConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> which serializes a <see cref="T:System.DateTime"/> property as
            milliseconds since the Unix epoch.  This is an alternative to the default ISO8601 format.
            </summary>
            <remarks>
            Apply to a property using <see cref="T:Newtonsoft.Json.JsonConverterAttribute"/>.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.IO.SocketExtensions.TrySetKeepAlives(System.Net.Sockets.Socket,System.Boolean,System.UInt32,System.UInt32,System.String@)">
            <summary>
            Try to enable TCP keep-alives, the time and interval on a managed Socket.
            </summary>
            <param name="socket">The socket to enable keep-alives on.</param>
            <param name="on">if set to <c>true</c> keep-alives are enabled; false to disable.</param>
            <param name="time">The duration between two keepalive transmissions in idle condition.</param>
            <param name="interval">The duration between two successive keepalive retransmissions, if acknowledgement to the previous keepalive transmission is not received.</param>
            <param name="message">The error message in cases of failure.</param>
            <returns>A value indicating success or silent-failure (true) or explicit failure (false).</returns>
            <remarks>Credit: <see href="http://blogs.msdn.com/b/lcleeton/archive/2006/09/15/754932.aspx"/></remarks>
        </member>
        <member name="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder">
            <summary>
            An interface for providing transcoder implementations.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Transcoders.ITypeTranscoder.GetFormat``1(``0)">
            <summary>
            Get data formatting based on the generic type and/or the actual value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to be formatted.</param>
            <returns>Flags used to format value written to operation payload.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.Transcoders.ITypeTranscoder.Encode``1(System.IO.Stream,``0,Couchbase.Core.IO.Operations.Flags,Couchbase.Core.IO.Operations.OpCode)">
            <summary>
            Encodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream">The stream to receive the encoded value.</param>
            <param name="value">The value of the key to encode.</param>
            <param name="flags">The flags used for decoding the response.</param>
            <param name="opcode"></param>
        </member>
        <member name="M:Couchbase.Core.IO.Transcoders.ITypeTranscoder.Decode``1(System.ReadOnlyMemory{System.Byte},Couchbase.Core.IO.Operations.Flags,Couchbase.Core.IO.Operations.OpCode)">
            <summary>
            Decodes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer representing the value of the key to decode.</param>
            <param name="flags">The flags used to encode the payload.</param>
            <param name="opcode"></param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Core.IO.Transcoders.ITypeTranscoder.Serializer">
            <summary>
            Gets or sets the serializer used by the <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/> implementation.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IO.Transcoders.LegacyTranscoder">
            <summary>
            Provides the legacy implementation for <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/> interface that matches sdk2 behavior.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.Transcoders.LegacyTranscoder.Encode``1(System.IO.Stream,``0,Couchbase.Core.IO.Operations.Flags,Couchbase.Core.IO.Operations.OpCode)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Transcoders.LegacyTranscoder.Encode``1(System.IO.Stream,``0,System.TypeCode,Couchbase.Core.IO.Operations.OpCode)">
            <summary>
            Encodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream">The stream to receive the encoded value.</param>
            <param name="value">The value.</param>
            <param name="typeCode">Type to use for encoding</param>
            <param name="opcode"></param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Invalid typeCode.</exception>
        </member>
        <member name="M:Couchbase.Core.IO.Transcoders.LegacyTranscoder.Decode``1(System.ReadOnlyMemory{System.Byte},Couchbase.Core.IO.Operations.Flags,Couchbase.Core.IO.Operations.OpCode)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.IO.Transcoders.LegacyTranscoder.Decode``1(System.ReadOnlyMemory{System.Byte},Couchbase.Core.IO.Operations.OpCode)">
            <summary>
            Decodes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer.</param>
            <param name="opcode">The opcode of the operation.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Couchbase.Core.IO.Transcoders.BaseTranscoder.DeserializeAsJson``1(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserializes as json.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Transcoders.BaseTranscoder.SerializeAsJson(System.IO.Stream,System.Object)">
            <summary>
            Serializes as json.
            </summary>
            <param name="stream">The stream to receive the encoded value.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Transcoders.BaseTranscoder.SerializeAsJson``1(System.IO.Stream,``0)">
            <summary>
            Serializes as json.
            </summary>
            <typeparam name="T">Type of value to serialize.</typeparam>
            <param name="stream">The stream to receive the encoded value.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Transcoders.BaseTranscoder.DecodeString(System.ReadOnlySpan{System.Byte})">
            <summary>
            Decodes the specified buffer as string.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Transcoders.BaseTranscoder.DecodeChar(System.ReadOnlySpan{System.Byte})">
            <summary>
            Decodes the specified buffer as char.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IO.Transcoders.BaseTranscoder.DecodeBinary(System.ReadOnlySpan{System.Byte})">
            <summary>
            Decodes the binary.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.IServiceUriProvider">
            <summary>
            Provides URIs to reach various Couchbase services.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IServiceUriProvider.GetRandomAnalyticsUri">
            <summary>
            Get the base <see cref="T:System.Uri"/> for a random node's analytics service.
            </summary>
            <returns>The base <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Couchbase.Core.IServiceUriProvider.GetRandomQueryUri">
            <summary>
            Get the base <see cref="T:System.Uri"/> for a random node's query service.
            </summary>
            <returns>The base <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Couchbase.Core.IServiceUriProvider.GetRandomSearchUri">
            <summary>
            Get the base <see cref="T:System.Uri"/> for a random node's search service.
            </summary>
            <returns>The base <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Couchbase.Core.IServiceUriProvider.GetRandomManagementUri">
            <summary>
            Get the base <see cref="T:System.Uri"/> for a random node's management service.
            </summary>
            <returns>The base <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Couchbase.Core.IServiceUriProvider.GetRandomViewsUri(System.String)">
            <summary>
            Get the base <see cref="T:System.Uri"/> for a bucket's view service on a random node.
            </summary>
            <param name="bucketName">The name of the bucket.</param>
            <returns>The base <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Couchbase.Core.IServiceUriProvider.GetRandomEventingUri">
            <summary>
            Get the base <see cref="T:System.Uri"/> for a random node's eventing service.
            </summary>
            <returns>The base <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="T:Couchbase.Core.Lifespan">
            <summary>
            Represents the lifetime of an operation from creation to timeout.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Lifespan.CreationTime">
            <summary>
            Gets or sets the initial creation time of the operation.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="F:Couchbase.Core.Lifespan._timedOut">
            <summary>
            True if the operation has timed out.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Lifespan.Duration">
            <summary>
            Gets or sets the duration of operations lifespan; the interval between creation and timeout.
            </summary>
            <value>
            The duration.
            </value>
        </member>
        <member name="M:Couchbase.Core.Lifespan.TimedOut">
            <summary>
            Checks if the operation has exceeded it's duration; if it has it is flagged as timedout.
            </summary>
            <returns>True if timed out</returns>
        </member>
        <member name="T:Couchbase.Core.Logging.IRedactor">
            <summary>
            An interface used for redacting specific log information.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Logging.IRedactor.UserData(System.Object)">
            <summary>
            Redact user data like username, statements, etc
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Logging.IRedactor.MetaData(System.Object)">
            <summary>
            Redact meta data like bucket names, etc
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Logging.IRedactor.SystemData(System.Object)">
            <summary>
            Redact system data like hostnames, etc.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.Logging.Redacted`1">
            <summary>
            Wraps a value in an optional pair of redaction tags when written to a string. String formatting is
            delayed the call to ToString. This avoids the string formatting cost for disabled log levels.
            </summary>
            <remarks>
            <para>
            Since this type is a structure, it avoids heap allocations so long as we're using strongly typed
            logging mechanisms to avoid boxing. Making it generic also allows .NET 6 and C# 10 to use more
            efficient string building paradigms such as ISpanFormattable.
            </para>
            <para>
            Because this type implements ISpanFormattable in .NET 6 it also avoids string allocations when used
            in string interpolation expressions so long as <typeparamref name="T"/> also implements ISpanFormattable.
            There are some cases where generated C# logging methods use string interpolation to build the log message.
            </para>
            </remarks>
        </member>
        <member name="M:Couchbase.Core.Logging.Redacted`1.#ctor(`0)">
            <summary>
            Creates a no-op redaction, the value is not marked for redaction.
            </summary>
            <param name="value">Value to wrap.</param>
        </member>
        <member name="M:Couchbase.Core.Logging.Redacted`1.#ctor(`0,System.String)">
            <summary>
            Creates a redaction of the given type.
            </summary>
            <param name="value">Value to wrap.</param>
            <param name="redactionType">The type of redaction, or null to not redact.</param>
        </member>
        <member name="M:Couchbase.Core.Logging.Redacted`1.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.Logging.RedactionLevel">
            <summary>
            Specifies the level of log redaction.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Logging.RedactionLevel.None">
            <summary>
            No redaction is performed; this is the default.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Logging.RedactionLevel.Partial">
            <summary>
            Only user data is redacted; system and metadata are not.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Logging.RedactionLevel.Full">
            <summary>
            User, system, and metadata are redacted.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Logging.Redactor">
            <summary>
            Represents a logging argument that is redactable.
            </summary>
            <remarks>
            Forwards redaction to a <see cref="T:Couchbase.Core.Logging.TypedRedactor"/>.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.Logging.TypedRedactor">
            <summary>
            Represents a logging argument that is redactable. This provides a more strongly-typed version of redaction
            than exposed by the public <see cref="T:Couchbase.Core.Logging.IRedactor"/> interface.
            </summary>
            <remarks>
            This type doesn't have an interface and is injected by the class so that methods may be inlined.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.MutationToken">
            <summary>
            An object for tracking changes if enhanced durability is enabled.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Retry.FailFastRetryStrategy">
            <summary>
            Used internally to skip retries when specified.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Retry.IRequest.Elapsed">
            <summary>
            The total time expired at the time the operation is called. If another retry happens,
            it will be updated once the response is received.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Retry.IRequest.ClientContextId">
            <summary>
            Gets the context identifier for the analytics request. Useful for debugging.
            </summary>
            <returns>The unique request ID.</returns>.
            <remarks>
            This value changes for every request.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.Retry.IRequest.StopRecording">
            <summary>
            Stops the operation timer and writes the elapsed milliseconds to the <see cref="T:Couchbase.Core.Diagnostics.Metrics.IValueRecorder"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Retry.IRequest.Recorder">
            <summary>
            A <see cref="T:Couchbase.Core.Diagnostics.Metrics.IValueRecorder"/> instance for measuring latencies.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Retry.IRetryable">
            <summary>
            Marker interface for retryable exceptions
            </summary>
        </member>
        <member name="M:Couchbase.Core.Retry.RequestBase.StopRecording">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Retry.RequestBase.StopRecording(System.Type)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Core.Retry.RequestBase.Recorder">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.ServerFeatureSet">
            <summary>
            Stores an immutable set of server features with faster lookup than searching an array.
            </summary>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.Features">
            <summary>
            List of all available features.
            </summary>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.DataType">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.Datatype"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.TcpNoDelay">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.TcpNoDelay"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.MutationSeqno">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.MutationSeqno"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.TcpDelay">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.TcpDelay"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.SubdocXAttributes">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.SubdocXAttributes"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.XError">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.XError"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.ServerDuration">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.ServerDuration"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.SelectBucket">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.SelectBucket"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.SnappyCompression">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.SnappyCompression"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.AlternateRequestSupport">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.AlternateRequestSupport"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.SynchronousReplication">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.SynchronousReplication"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.Collections">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.Collections"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.UnorderedExecution">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.UnorderedExecution"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.CreateAsDeleted">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.CreateAsDeleted"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.PreserveTtl">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.PreserveTtl"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.Json">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.JSON"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.SubDocReplicaRead">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.SubDocReplicaRead"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.ClustermapChangeNotificationBrief">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.ClustermapChangeNotificationBrief"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.Duplex">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.Duplex"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.GetClusterConfigWithKnownVersion">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.GetClusterConfigWithKnownVersion"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.SnappyEverywhere">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.SnappyEverywhere"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.ClustermapChangeNotification">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.ClustermapChangeNotification"/>
        </member>
        <member name="P:Couchbase.Core.ServerFeatureSet.DedupeNotMyVbucketClustermap">
            <inheritdoc cref="F:Couchbase.Core.IO.Operations.ServerFeatures.DedupeNotMyVbucketClustermap"/>
        </member>
        <member name="M:Couchbase.Core.ServerFeatureSet.#ctor(Couchbase.Core.IO.Operations.ServerFeatures[])">
            <summary>
            Create a new ServerFeatureSet.
            </summary>
            <param name="features">Features that are available.</param>
        </member>
        <member name="M:Couchbase.Core.ServerFeatureSet.Supports(Couchbase.Core.IO.Operations.ServerFeatures)">
            <summary>
            Check for feature support.
            </summary>
            <param name="feature">Feature to check.</param>
            <returns>True if this feature is supported.</returns>
            <remarks>
            This method is less efficient than using the predefined properties.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.ServiceUriProvider">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.IServiceUriProvider"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.ServiceUriProvider.GetRandomAnalyticsUri">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.ServiceUriProvider.GetRandomQueryUri">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.ServiceUriProvider.GetRandomSearchUri">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.ServiceUriProvider.GetRandomManagementUri">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.ServiceUriProvider.GetRandomViewsUri(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.ServiceUriProvider.GetRandomEventingUri">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.Sharding.IVBucket">
            <summary>
            Represents a VBucket partition in a Couchbase cluster
            </summary>
        </member>
        <member name="M:Couchbase.Core.Sharding.IVBucket.LocateReplica(System.Int16)">
            <summary>
            Locates a replica for a given index.
            </summary>
            <param name="index">The index of the replica.</param>
            <returns>An <see cref="T:Couchbase.Core.IServer"/> if the replica is found, otherwise null.</returns>
        </member>
        <member name="P:Couchbase.Core.Sharding.IVBucket.Replicas">
            <summary>
            Gets an array of replica indexes.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Sharding.IVBucket.Index">
            <summary>
            Gets the index of the VBucket.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Couchbase.Core.Sharding.IVBucket.Primary">
            <summary>
            Gets the index of the primary node in the VBucket.
            </summary>
            <value>
            The primary index that the key has mapped to.
            </value>
        </member>
        <member name="P:Couchbase.Core.Sharding.IVBucket.HasReplicas">
            <summary>
            Gets a value indicating whether this instance has replicas.
            </summary>
            <value>
            <c>true</c> if this instance has replicas; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Sharding.IVBucket.BucketName">
            <summary>
            Name of the bucket this vBucket is associated with.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Sharding.KetamaKeyMapper">
            <summary>
            Provides a means of consistent hashing for keys used by Memcached Buckets.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Sharding.KetamaKeyMapper.MapKey(System.String)">
            <summary>
            Maps a Key to a node in the cluster.
            </summary>
            <param name="key">The key to map.</param>
            <returns>An object representing the node that the key was mapped to, which implements <see cref="T:Couchbase.Core.IMappedNode"/></returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.KetamaKeyMapper.MapKey(System.Byte[])">
            <summary>
            Maps a Key to a node in the cluster.
            </summary>
            <param name="key">The key to map.</param>
            <returns>An object representing the node that the key was mapped to, which implements <see cref="T:Couchbase.Core.IMappedNode"/></returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.KetamaKeyMapper.MapKey(System.String,System.Boolean)">
            <summary>
            Not Supported: This overload is only supported by Couchbase buckets.
            </summary>
            <param name="key"></param>
            <param name="notMyVBucket"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.KetamaKeyMapper.MapKey(System.Byte[],System.Boolean)">
            <summary>
            Not Supported: This overload is only supported by Couchbase buckets.
            </summary>
            <param name="key"></param>
            <param name="notMyVBucket"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.KetamaKeyMapper.FindIndex(System.Int64)">
            <summary>
            Finds the index of a node for a given key.
            </summary>
            <param name="key">The Key that the index belongs to.</param>
            <returns>The index of key - which is the location of the node that the key maps to.</returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.KetamaKeyMapper.GetHash(System.String)">
            <summary>
            Creates a hash for a given Key.
            </summary>
            <param name="key">The Key to hash.</param>
            <returns>A hash of the Key.</returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.KetamaKeyMapper.GetHash(System.Byte[])">
            <summary>
            Creates a hash for a given Key.
            </summary>
            <param name="key">The Key to hash.</param>
            <returns>A hash of the Key.</returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.KetamaKeyMapper.Initialize(System.Collections.Generic.IEnumerable{Couchbase.Core.Sharding.KetamaNode})">
            <summary>
            Initializes the mapping of hashes to nodes.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Sharding.KetamaNode">
            <summary>
            A cluster node mapped to a given Key.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Sharding.KetamaNode.#ctor(Couchbase.HostEndpointWithPort)">
            <summary>
            A cluster node mapped to a given Key.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Sharding.KetamaNode.Couchbase#Core#IMappedNode#LocatePrimary">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.Sharding.VBucket">
            <summary>
            Represents a VBucket partition in a Couchbase cluster
            </summary>
        </member>
        <member name="M:Couchbase.Core.Sharding.VBucket.LocatePrimary">
             <summary>
             Gets a reference to the primary server for this VBucket.
             </summary>
             <returns>A <see cref="T:Couchbase.Core.IServer"/> reference which is the primary server for this <see cref="T:Couchbase.Core.Sharding.VBucket"/></returns>
            <remarks>If the VBucket doesn't have a active, it will return a random <see cref="T:Couchbase.Core.IServer"/> to force a NMV and reconfig.</remarks>
        </member>
        <member name="M:Couchbase.Core.Sharding.VBucket.LocateReplica(System.Int16)">
            <summary>
            Locates a replica for a given index.
            </summary>
            <param name="index">The index of the replica.</param>
            <returns>An <see cref="T:Couchbase.Core.IServer"/> if the replica is found, otherwise null.</returns>
        </member>
        <member name="P:Couchbase.Core.Sharding.VBucket.Replicas">
            <summary>
            Gets an array of replica indexes.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Sharding.VBucket.Index">
            <summary>
            Gets the index of the VBucket.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Couchbase.Core.Sharding.VBucket.Primary">
            <summary>
            Gets the index of the primary node in the VBucket.
            </summary>
            <value>
            The primary index that the key has mapped to.
            </value>
        </member>
        <member name="P:Couchbase.Core.Sharding.VBucket.Rev">
            <summary>
            Gets or sets the configuration revision.
            </summary>
            <value>
            The rev.
            </value>
        </member>
        <member name="P:Couchbase.Core.Sharding.VBucket.HasReplicas">
            <summary>
            Gets a value indicating whether this instance has replicas.
            </summary>
            <value>
            <c>true</c> if this instance has replicas; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Couchbase.Core.Sharding.VBucketKeyMapper">
            <summary>
            Provides a means of mapping keys to nodes within a Couchbase Server and a Couchbase Bucket.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Sharding.VBucketKeyMapper.Item(System.Int16)">
            <summary>
            Gets the <see cref="T:Couchbase.Core.Sharding.IVBucket"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:Couchbase.Core.Sharding.IVBucket"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.VBucketKeyMapper.MapKey(System.String)">
            <summary>
            Maps a given Key to it's node in a Couchbase Cluster.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.VBucketKeyMapper.MapKey(System.Byte[])">
            <summary>
            Maps a given Key to it's node in a Couchbase Cluster.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.VBucketKeyMapper.CreateVBucketMap">
            <summary>
            Creates a mapping of VBuckets to nodes.
            </summary>
            <returns>A mapping of indexes and Vbuckets.</returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.VBucketKeyMapper.CreateVBucketMapForwards">
            <summary>
            Creates a mapping of VBuckets to nodes.
            </summary>
            <returns>A mapping of indexes and Vbuckets.</returns>
        </member>
        <member name="T:Couchbase.Core.Sharding.VBucketMapJsonConverter">
            <summary>
            JSON converter optimized for vBucketMaps, which almost invariably contain 1024 elements,
            with each element being an array of the equal size. This converter reduces heap allocations
            by avoiding list resizing in the common case.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Sharding.VBucketMapper">
            <summary>
            Provides services to apply hash algorithms and map a key to a vBucket ID.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Sharding.VBucketMapper.GetMask(System.Int32)">
            <summary>
            Calculate the mask used to calculate vBucket IDs based on the number of vBuckets in the cluster.
            This is primarily a performance optimization, since this can be calculated once and stored.
            </summary>
            <param name="vBucketCount">The number of vBuckets in the cluster.</param>
            <returns>The mask to use when calculating the vBucket ID.</returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.VBucketMapper.GetVBucketId(System.String,System.Int16)">
            <summary>
            Get the vBucketID for a given key.
            </summary>
            <param name="key">The key.</param>
            <param name="mask">The previously calculated mask from a call to <see cref="M:Couchbase.Core.Sharding.VBucketMapper.GetMask(System.Int32)"/>.</param>
            <returns>The vBucketID for the key.</returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.VBucketMapper.GetVBucketId(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Get the vBucketID for a given key.
            </summary>
            <param name="keyBytes">The key encoded as UTF-8.</param>
            <param name="vBucketCount">The number of vBuckets in the cluster.</param>
            <returns>The vBucketID for the key.</returns>
        </member>
        <member name="M:Couchbase.Core.Sharding.VBucketMapper.GetVBucketId(System.ReadOnlySpan{System.Byte},System.Int16)">
            <summary>
            Get the vBucketID for a given key.
            </summary>
            <param name="keyBytes">The key encoded as UTF-8.</param>
            <param name="mask">The previously calculated mask from a call to <see cref="M:Couchbase.Core.Sharding.VBucketMapper.GetMask(System.Int32)"/>.</param>
            <returns>The vBucketID for the key.</returns>
        </member>
        <member name="F:Couchbase.Core.Utils.Leb128.MaxLength">
            <summary>
            Maximum length, in bytes, when encoding a 32-bit integer.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Utils.Leb128.Write(System.Span{System.Byte},System.UInt32)">
            <summary>
            Encodes a value onto a buffer using LEB128 encoding.
            </summary>
            <param name="buffer">Buffer to receive the value.</param>
            <param name="value">Value to encode.</param>
            <returns>Number of bytes encoded.</returns>
        </member>
        <member name="M:Couchbase.Core.Utils.Leb128.WriteSlow(System.Span{System.Byte},System.UInt32)">
            <summary>
            Encodes a value onto a buffer using LEB128 encoding.
            </summary>
            <param name="buffer">Buffer to receive the value.</param>
            <param name="value">Value to encode.</param>
            <returns>Number of bytes encoded.</returns>
        </member>
        <member name="M:Couchbase.Core.Utils.StringExtensions.EscapeIfRequired(System.String)">
            <summary>
            Adds back ticks to the beginning and end of a string if they do not already exist.
            </summary>
            <param name="value">A value such as a bucket or scope name.</param>
            <returns>The original value escaped with back ticks.</returns>
        </member>
        <member name="M:Couchbase.Core.Utils.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Allows for case and cultural insensitive comparisons
            </summary>
            <param name="source">The incoming string to compare.</param>
            <param name="value">The value to check for.</param>
            <param name="comparison">The <see cref="T:System.StringComparison"/> to use.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Utils.StringExtensions.ToStringInvariant(System.Int32)">
            <summary>
            Convert an int to string using the Invariant culture.
            </summary>
            <param name="num">The integer to convert.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:Couchbase.Core.Utils.StringExtensions.ToStringInvariant(System.UInt32)">
            <summary>
            Convert a uint to string using the Invariant culture.
            </summary>
            <param name="num">The integer to convert.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:Couchbase.Core.Utils.StringExtensions.ToStringInvariant(System.Int64)">
            <summary>
            Convert a long to string using the Invariant culture.
            </summary>
            <param name="num">The long to convert.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:Couchbase.Core.Utils.StringExtensions.ToStringInvariant(System.UInt64)">
            <summary>
            Convert a ulong to string using the Invariant culture.
            </summary>
            <param name="num">The ulong to convert.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:Couchbase.Core.Utils.StringExtensions.ToStringInvariant(System.Int16)">
            <summary>
            Convert a short integer to string using the Invariant culture.
            </summary>
            <param name="num">The integer to convert.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:Couchbase.Core.Utils.StringExtensions.ToStringInvariant(System.Double)">
            <summary>
            Convert a double to string using the Invariant culture.
            </summary>
            <param name="num">The double to convert.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="T:Couchbase.Core.Version.ClusterVersion">
            <summary>
            Represents the Couchbase Server Cluster version.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Version.ClusterVersion.Version">
            <summary>
            Version number.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Version.ClusterVersion.Build">
            <summary>
            Build number.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Version.ClusterVersion.Suffix">
            <summary>
            Additional information, such as "community" or "enterprise".
            </summary>
        </member>
        <member name="M:Couchbase.Core.Version.ClusterVersion.#ctor(System.Version,System.Int32,System.String)">
            <summary>
            Create a new ClusterVersion.
            </summary>
            <param name="version">Version number.</param>
            <param name="build">Build number.</param>
            <param name="suffix">Additional information, such as "community" or "enterprise".</param>
        </member>
        <member name="M:Couchbase.Core.Version.ClusterVersion.ToString">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Version.ClusterVersion.Deconstruct(System.Version@,System.Int32@)">
            <summary>
            Deconstruct into a tuple.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Version.ClusterVersion.Deconstruct(System.Version@,System.Int32@,System.String@)">
            <summary>
            Deconstruct into a tuple.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Version.ClusterVersion.Parse(System.String)">
            <summary>
            Parse a string to a <see cref="T:Couchbase.Core.Version.ClusterVersion"/>.
            </summary>
            <param name="versionString">String to parse.</param>
            <returns>The parsed <see cref="T:Couchbase.Core.Version.ClusterVersion"/>.</returns>
            <exception cref="T:System.FormatException"><paramref name="versionString"/> is not a valid version string.</exception>
        </member>
        <member name="M:Couchbase.Core.Version.ClusterVersion.TryParse(System.String,Couchbase.Core.Version.ClusterVersion@)">
            <summary>
            Parse a string to a <see cref="T:Couchbase.Core.Version.ClusterVersion"/>.
            </summary>
            <param name="versionString">String to parse.</param>
            <param name="version">The parsed <see cref="T:Couchbase.Core.Version.ClusterVersion"/>.</param>
            <returns>True if parsed successfully.</returns>
        </member>
        <member name="T:Couchbase.Core.Version.ClusterVersionProvider">
            <summary>
            Default implementation of <see cref="T:Couchbase.Core.Version.IClusterVersionProvider"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Version.ClusterVersionProvider.GetVersionAsync">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Core.Version.ClusterVersionProvider.ClearCache">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Core.Version.IClusterVersionProvider">
            <summary>
            Provides version information about the cluster.
            </summary>
            <remarks>
            The implementation of this interface is typically obtained from <see cref="P:Couchbase.ICluster.ClusterServices"/>.
            </remarks>
        </member>
        <member name="M:Couchbase.Core.Version.IClusterVersionProvider.GetVersionAsync">
            <summary>
            Gets the <see cref="T:Couchbase.Core.Version.ClusterVersion"/> from the currently connected cluster, if available.
            </summary>
            <returns>The <see cref="T:Couchbase.Core.Version.ClusterVersion"/>, or null if unavailable.</returns>
        </member>
        <member name="M:Couchbase.Core.Version.IClusterVersionProvider.ClearCache">
            <summary>
            Clear any cached value, getting a fresh value from the cluster on the next request.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseBucket.Collections">
            <summary>
            The Collection Management API.
            </summary>
            <remarks>Volatile</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ViewQueryAsync``2(System.String,System.String,Couchbase.Views.ViewOptions)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.CouchbaseException">
            <summary>
            Base exception for all exceptions generated or handled by the Couchbase SDK.
            </summary>
        </member>
        <member name="T:Couchbase.CouchbaseException`1">
            <summary>
            Base exception for all exceptions generated or handled by the Couchbase SDK.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseException`1.Context">
            <summary>
            Additional context about the <see cref="T:Couchbase.CouchbaseException"/>.
            </summary>
        </member>
        <member name="T:Couchbase.DataStructures.IPersistentDictionary`1">
            <summary>
            Represents an <see cref="T:System.Collections.Generic.IDictionary`2"/> which is persisted to a backing store.
            </summary>
            <typeparam name="TValue">Type of value in the set.</typeparam>
            <remarks>
            If using a <see cref="T:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer"/> backed by a <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
            be sure to include <c>IDictionary&lt;string, TValue&gt;</c> in a <see cref="T:System.Text.Json.Serialization.JsonSerializableAttribute"/> on the context.
            </remarks>
        </member>
        <member name="T:Couchbase.DataStructures.IPersistentList`1">
            <summary>
            Represents an <see cref="T:System.Collections.Generic.IList`1"/> which is persisted to a backing store.
            </summary>
            <typeparam name="T">Type of value in the set.</typeparam>
            <remarks>
            If using a <see cref="T:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer"/> backed by a <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
            be sure to include <see cref="T:System.Collections.Generic.IList`1"/> in a <see cref="T:System.Text.Json.Serialization.JsonSerializableAttribute"/> on the context.
            Note that a reference comparision is used by default. If you load the
            list and try to use an item out of it to remove from the list, it will
            return false unless Object.Equals() is overridden on the item's class as
            the document is reloaded from the database and therefore cannot be used
            for reference equality. Note that .NET Records override Equals implicitly.
            </remarks>
        </member>
        <member name="M:Couchbase.DataStructures.IPersistentList`1.CopyToAsync(System.Array,System.Int32)">
            <summary>
            Copies an items into an array starting at an index.
            </summary>
            <param name="array">The array of items to add to the document.</param>
            <param name="index">The starting index.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.DataStructures.IPersistentList`1.AddAsync(`0)">
            <summary>
            Adds an item into the document.
            </summary>
            <remarks>
            Override Object.Equals if using POCOs; .NET Records do so implicitly.
            </remarks>
            <param name="item">The item to add.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.DataStructures.IPersistentList`1.ClearAsync">
            <summary>
            Clears the document.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.DataStructures.IPersistentList`1.ContainsAsync(`0)">
            <summary>
            Checks to see if the document contains an item.
            </summary>
            <remarks>
            Override Object.Equals if using POCOs; .NET Records do so implicitly.
            </remarks>
            <param name="item">The item <typeparamref name="T"/> to check for its existence.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> for awaiting. True if the item exists, otherwise false.</returns>
        </member>
        <member name="M:Couchbase.DataStructures.IPersistentList`1.CopyToAsync(`0[],System.Int32)">
            <summary>
            Copies an array into the document.
            </summary>
            <param name="array">The array of items to add to the document.</param>
            <param name="arrayIndex">The starting index.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.DataStructures.IPersistentList`1.RemoveAsync(`0)">
            <summary>
            Attempts to remove an item from the list.
            </summary>
            <remarks>
            Override Object.Equals if using POCOs; .NET Records do so implicitly.
            </remarks>
            <param name="item">An item which should have Object.Equals() overridden.</param>
            <returns>True if the item is found and removed; otherwise false.</returns>
        </member>
        <member name="P:Couchbase.DataStructures.IPersistentList`1.CountAsync">
            <summary>
            Counts the items in the list.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> for awaiting. The value is the number of items in the list.</returns>
        </member>
        <member name="M:Couchbase.DataStructures.IPersistentList`1.IndexOfAsync(`0)">
            <summary>
            Returns the index of item in the list.
            </summary>
            <remarks>
            Override Object.Equals if using POCOs; .NET Records do so implicitly.
            </remarks>
            <param name="item">An item which should have Object.Equals() overridden.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> for awaiting. The value is the index of item in the list.</returns>
        </member>
        <member name="M:Couchbase.DataStructures.IPersistentList`1.InsertAsync(System.Int32,`0)">
            <summary>
            Inserts an item into the list.
            </summary>
            <remarks>
            Override Object.Equals if using POCOs; .NET Records do so implicitly.
            </remarks>
            <param name="index">The starting index.</param>
            <param name="item">An item which should have Object.Equals() overridden.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.DataStructures.IPersistentList`1.RemoveAtAsync(System.Int32)">
            <summary>
            Removes an item item from the list.
            </summary>
            <remarks>
            Override Object.Equals if using POCOs; .NET Records do so implicitly.
            </remarks>
            <param name="index">The starting index.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting."</returns>
        </member>
        <member name="T:Couchbase.DataStructures.IPersistentQueue`1">
            <summary>
            Represents a queue which is persisted to a backing store.
            </summary>
            <typeparam name="T">Type of value in the set.</typeparam>
            <remarks>
            If using a <see cref="T:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer"/> backed by a <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
            be sure to include <see cref="T:System.Collections.Generic.IList`1"/> in a <see cref="T:System.Text.Json.Serialization.JsonSerializableAttribute"/> on the context.
            </remarks>
        </member>
        <member name="T:Couchbase.DataStructures.IPersistentSet`1">
            <summary>
            Represents an <see cref="T:System.Collections.Generic.ISet`1"/> which is persisted to a backing store.
            </summary>
            <typeparam name="TValue">Type of value in the set.</typeparam>
            <remarks>
            If using a <see cref="T:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer"/> backed by a <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
            be sure to include <see cref="T:System.Collections.Generic.ISet`1"/> in a <see cref="T:System.Text.Json.Serialization.JsonSerializableAttribute"/> on the context.
            </remarks>
        </member>
        <member name="M:Couchbase.DataStructures.PersistentList`1.AddAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.DataStructures.PersistentList`1.ContainsAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.DataStructures.PersistentList`1.RemoveAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.DataStructures.PersistentList`1.IndexOfAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.DataStructures.PersistentList`1.InsertAsync(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.DataStructures.PersistentList`1.SetAsync(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.DataStructures.PersistentList`1.RemoveAtAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.DataStructures.QueueOptions">
            <summary>
            Behavior options for the <see cref="T:Couchbase.DataStructures.IPersistentQueue`1"/> implementation.
            </summary>
            <param name="CasMismatchRetries">For operations that use Cas, such as <see cref="M:Couchbase.DataStructures.IPersistentQueue`1.Dequeue"/>
            the number of times a CasMismatchException will be retried internally.</param>
            <param name="Timeout">The timeout value for operations that involve retries.  Defaults to KvTimeout.</param>
        </member>
        <member name="M:Couchbase.DataStructures.QueueOptions.#ctor(System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Behavior options for the <see cref="T:Couchbase.DataStructures.IPersistentQueue`1"/> implementation.
            </summary>
            <param name="CasMismatchRetries">For operations that use Cas, such as <see cref="M:Couchbase.DataStructures.IPersistentQueue`1.Dequeue"/>
            the number of times a CasMismatchException will be retried internally.</param>
            <param name="Timeout">The timeout value for operations that involve retries.  Defaults to KvTimeout.</param>
        </member>
        <member name="P:Couchbase.DataStructures.QueueOptions.CasMismatchRetries">
            <summary>For operations that use Cas, such as <see cref="M:Couchbase.DataStructures.IPersistentQueue`1.Dequeue"/>
            the number of times a CasMismatchException will be retried internally.</summary>
        </member>
        <member name="P:Couchbase.DataStructures.QueueOptions.Timeout">
            <summary>The timeout value for operations that involve retries.  Defaults to KvTimeout.</summary>
        </member>
        <member name="T:Couchbase.Diagnostics.ClusterState">
            <summary>
            The current state of the <see cref="T:Couchbase.Cluster"/> instance.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.ClusterState.Online">
            <summary>
            All nodes and their sockets are reachable.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.ClusterState.Degraded">
            <summary>
            At least one socket per service is reachable.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.ClusterState.Offline">
            <summary>
            Not even one socket per service is reachable.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.EndpointState">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.NullableEndpointState">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.IDiagnosticsReport">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.IEndpointDiagnostics">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.IPingReport">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.ServiceState">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.NullableServiceState">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.IDictionaryStringIEnumerableIEndpointDiagnostics">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.IEnumerableIEndpointDiagnostics">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.Int64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.NullableInt64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.Int16">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.UInt64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.DiagnoticsSerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Couchbase.Diagnostics.DiagnoticsSerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Diagnostics.DiagnoticsSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Diagnostics.DiagnoticsSerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Couchbase.Diagnostics.EndpointState">
            <summary>
            State of the connection to the endpoint.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.EndpointState.Disconnected">
            <summary>
            The endpoint socket is not reachable.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.EndpointState.Connecting">
            <summary>
            Currently connecting - including auth, etc.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.EndpointState.Connected">
            <summary>
            Connected and ready.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.EndpointState.Disconnecting">
            <summary>
            Disconnected after being connected.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IDiagnosticsReport.Id">
            <summary>
            Gets the report identifier.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IDiagnosticsReport.Version">
            <summary>
            Gets the Diagnostics Report version.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IDiagnosticsReport.Sdk">
            <summary>
            Gets the SDK identifier.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IDiagnosticsReport.Services">
            <summary>
            Gets the services endpoints.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IEndpointDiagnostics.Type">
            <summary>
            Gets the service type.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IEndpointDiagnostics.Id">
            <summary>
            Gets the report ID.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IEndpointDiagnostics.Local">
            <summary>
            Gets the local endpoint address including port.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IEndpointDiagnostics.Remote">
            <summary>
            Gets the remote endpoint address including port.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IEndpointDiagnostics.LastActivity">
            <summary>
            Gets the last activity for the service endpoint express as microseconds.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IEndpointDiagnostics.Latency">
            <summary>
            Gets the latency for service endpoint expressed as microseconds.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IEndpointDiagnostics.Scope">
            <summary>
            Gets the scope for the service endpoint.
            This could be the bucket name for <see cref="F:Couchbase.ServiceType.KeyValue"/> service endpoints.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IEndpointDiagnostics.State">
            <summary>
            Gets the service state.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IPingReport.Id">
            <summary>
            Gets the report identifier.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IPingReport.Version">
            <summary>
            Gets the Ping Report version.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IPingReport.ConfigRev">
            <summary>
            Gets the bucket configuration revision.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IPingReport.Sdk">
            <summary>
            Gets the SDK identifier.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.IPingReport.Services">
            <summary>
            Gets the service endpoints.
            </summary>
        </member>
        <member name="T:Couchbase.Diagnostics.QueryUriTester">
            <summary>
            Tests a query URI that previously failed to see if it's back online again.
            </summary>
        </member>
        <member name="T:Couchbase.Diagnostics.SearchUriTester">
            <summary>
            Tests a search URI that previously failed to see if it's back online again.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.ServiceState.Unknown">
            <summary>
            The service state is unknown.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.ServiceState.New">
            <summary>
            The service is new and has not established a connection to a Couchbase sever yet.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.ServiceState.Connecting">
            <summary>
            The service is currently attempting to connect to a Couchbase server.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.ServiceState.Authenticating">
            <summary>
            The service is authenticating with a Couchbase server.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.ServiceState.Connected">
            <summary>
            The service is connected to a Couchbase server and available to process requests.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.ServiceState.Disconnected">
            <summary>
            The service has disconnected from a Couchbase server.
            A service can be in this state when waiting to be cleaned-up.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.ServiceState.Ok">
            <summary>
            The service is operating as expected and replied within the expected timeout.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.ServiceState.Timeout">
            <summary>
            The service timed out while trying to ping the Couchbase server.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.ServiceState.Error">
            <summary>
            There was an error when trying to ping a Couchbase server.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.ServiceState.Active">
            <summary>
            The service has been in-use since its creation
            </summary>
        </member>
        <member name="T:Couchbase.Diagnostics.UriTesterBase">
            <summary>
            Abstract base class for testing a <see cref="T:Couchbase.Query.FailureCountingUri"/> using a GET ping to a related URI.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.UriTesterBase.NodeType">
            <summary>
            Node type used in log messages
            </summary>
        </member>
        <member name="M:Couchbase.Diagnostics.UriTesterBase.GetPingUri(Couchbase.Query.FailureCountingUri)">
            <summary>
            Returns the ping URI given the node's service URI.
            </summary>
            <param name="uri">Node's service URI.</param>
            <returns>URI to ping with a GET request.</returns>
        </member>
        <member name="M:Couchbase.Diagnostics.UriTesterBase.TestUri(Couchbase.Query.FailureCountingUri,System.Threading.CancellationToken)">
            <summary>
            Pings the server referenced by <paramref name="uri"/> to see if it's back online.
            If so, calls <see cref="M:Couchbase.Query.FailureCountingUri.ClearFailed"/> to mark it online again.
            </summary>
            <param name="uri">Uri to test.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to monitor for completion.</returns>
        </member>
        <member name="T:Couchbase.Diagnostics.WaitUntilReadyOptions">
            <summary>
            Optional arguments for the WaitUntilReady methods.
            </summary>
        </member>
        <member name="F:Couchbase.Diagnostics.WaitUntilReadyOptions.DefaultServiceTypes">
            <summary>
            This list serves as the default, but a parameter-less call to WaitUntilReady should use the services from the
            cluster config instead.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.WaitUntilReadyOptions.DesiredStateValue">
            <summary>
            The desired state - the default is Online.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.WaitUntilReadyOptions.ExplicitServiceTypes">
            <summary>
            The service types to check, if not provided all service types reported by the cluster will be checked.
            </summary>
        </member>
        <member name="P:Couchbase.Diagnostics.WaitUntilReadyOptions.CancellationTokenValue">
            <summary>
            A cancellation token for cooperative task cancellation.
            </summary>
        </member>
        <member name="M:Couchbase.Diagnostics.WaitUntilReadyOptions.DesiredState(Couchbase.Diagnostics.ClusterState)">
            <summary>
            The desired state - the default is Online.
            </summary>
        </member>
        <member name="M:Couchbase.Diagnostics.WaitUntilReadyOptions.ServiceTypes(Couchbase.ServiceType[])">
            <summary>
            The service types to check, if not provided all service types will be checked.
            </summary>
        </member>
        <member name="M:Couchbase.Diagnostics.WaitUntilReadyOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A cancellation token for cooperative task cancellation.
            </summary>
        </member>
        <member name="T:Couchbase.DnsClientDnsResolver">
            <summary>
            Default implementation of <see cref="T:Couchbase.IDnsResolver"/>.
            </summary>
        </member>
        <member name="P:Couchbase.DnsClientDnsResolver.EnableDnsSrvResolution">
            <summary>
            Used to disable DNS SRV resolution, enabled by default.
            </summary>
        </member>
        <member name="M:Couchbase.DnsClientDnsResolver.GetDnsSrvEntriesAsync(System.Uri,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.ExperimentalOptions">
            <summary>
            Settings to enable various experiments. These experiments may improve performance, but also
            may have stability issues. If successful, they will become the standard approach.
            </summary>
        </member>
        <member name="P:Couchbase.ExperimentalOptions.ChannelConnectionPools">
            <summary>
            Use System.Threading.Channels for connection pool distribution.
            </summary>
        </member>
        <member name="P:Couchbase.ExperimentalOptions.EnableHttpVersion2">
            <summary>
            If supported by the server and by the client, HTTP version 2.0 will be used for Query.
            </summary>
            <remarks>This only applies to the Query service.</remarks>
        </member>
        <member name="P:Couchbase.ExperimentalOptions.EnablePushConfig">
            <summary>
            Enables push config notification if supported by the server version, otherwise, polling is used as before.
            </summary>
        </member>
        <member name="T:Couchbase.HostEndpoint">
             <summary>
            
             </summary>
        </member>
        <member name="P:Couchbase.HostEndpoint.Host">
            <summary>
            Host name or IP address. IPv6 addresses should be wrapped in square braces.
            </summary>
        </member>
        <member name="P:Couchbase.HostEndpoint.Port">
            <summary>
            Port number, if any.
            </summary>
        </member>
        <member name="M:Couchbase.HostEndpoint.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new HostEndpoint.
            </summary>
            <param name="host">Host name or IP address. IPv6 addresses should be wrapped in square braces.</param>
            <param name="port">Port number, if any.</param>
        </member>
        <member name="M:Couchbase.HostEndpoint.ToString">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.HostEndpoint.Equals(Couchbase.HostEndpoint)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.HostEndpoint.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.HostEndpoint.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.HostEndpoint.Parse(System.String)">
            <summary>
            Parse a string in the format "server:11210" or "[::1]:11210".
            IPv6 addresses must be enclosed in square brackets.
            </summary>
            <param name="server">The server to parse.</param>
            <returns>The <see cref="T:Couchbase.HostEndpoint"/>.</returns>
        </member>
        <member name="T:Couchbase.HostEndpointWithPort">
            <summary>
            A host name and port pair. Unlike <see cref="T:Couchbase.HostEndpoint"/> this type requires a port number.
            </summary>
        </member>
        <member name="P:Couchbase.HostEndpointWithPort.Host">
            <summary>
            Host name or IP address. IPv6 addresses should be wrapped in square braces.
            </summary>
        </member>
        <member name="P:Couchbase.HostEndpointWithPort.Port">
            <summary>
            Port number.
            </summary>
        </member>
        <member name="M:Couchbase.HostEndpointWithPort.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new HostEndpoint.
            </summary>
            <param name="host">Host name or IP address. IPv6 addresses should be wrapped in square braces.</param>
            <param name="port">Port number.</param>
        </member>
        <member name="M:Couchbase.HostEndpointWithPort.ToString">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.HostEndpointWithPort.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.HostEndpointWithPort.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.HostEndpointWithPort.Equals(Couchbase.HostEndpointWithPort)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.HostEndpointWithPort.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.HostEndpointWithPort.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.HostEndpointWithPort.Parse(System.String)">
            <summary>
            Parse a string in the format "server:11210" or "[::1]:11210".
            IPv6 addresses must be enclosed in square brackets.
            </summary>
            <param name="server">The server to parse.</param>
            <returns>The <see cref="T:Couchbase.HostEndpoint"/>.</returns>
        </member>
        <member name="P:Couchbase.IBucket.Cluster">
            <summary>
            The cluster that owns this bucket.
            </summary>
        </member>
        <member name="M:Couchbase.IBucket.ScopeAsync(System.String)">
            <summary>
            Gets a scope from  the bucket by name.
            </summary>
            <param name="scopeName">The name of the scope to fetch.</param>
            <returns>A scope that belongs to the bucket.</returns>
        </member>
        <member name="M:Couchbase.IBucket.DefaultScopeAsync">
            <summary>
            Gets the default scope for the bucket.
            </summary>
            <returns>The default scope.</returns>
        </member>
        <member name="M:Couchbase.IBucket.DefaultCollectionAsync">
            <summary>
            Gets the default collection for the bucket.
            </summary>
            <returns>The default collection.</returns>
        </member>
        <member name="M:Couchbase.IBucket.CollectionAsync(System.String)">
            <summary>
            Gets a collection from the default scope of the bucket by name.
            </summary>
            <param name="collectionName">The name of the collection to fetch.</param>
            <returns>A collection that belongs to the default scope of the bucket.</returns>
        </member>
        <member name="M:Couchbase.IBucket.ViewQueryAsync``2(System.String,System.String,Couchbase.Views.ViewOptions)">
            <summary>
            Execute a view query.
            </summary>
            <typeparam name="TKey">Type of the key for each result row.</typeparam>
            <typeparam name="TValue">Type of the value for each result row.</typeparam>
            <param name="designDocument">Design document name.</param>
            <param name="viewName">View name.</param>
            <param name="options"><seealso cref="T:Couchbase.Views.ViewOptions"/> controlling query execution.</param>
            <returns>An <seealso cref="T:Couchbase.Views.IViewResult`2"/>.</returns>
        </member>
        <member name="M:Couchbase.IBucket.PingAsync(Couchbase.Diagnostics.PingOptions)">
            <summary>
            Actively performs I/O by application-level pinging services and returning their pinged status.
            </summary>
            <param name="options">Optional arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IBucket.WaitUntilReadyAsync(System.TimeSpan,Couchbase.Diagnostics.WaitUntilReadyOptions)">
            <summary>
            Waits until a desired cluster state by default (“online”) is reached or times out.
            </summary>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> duration to wait before throwing an exception.</param>
            <param name="options">Optional arguments.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.ICluster.ClusterServices">
            <summary>
            An <see cref="T:System.IServiceProvider"/> which provides access to cluster services, such as <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/>.
            </summary>
        </member>
        <member name="M:Couchbase.ICluster.PingAsync(Couchbase.Diagnostics.PingOptions)">
            <summary>
            Actively performs I/O by application-level pinging services and returning their pinged status.
            </summary>
            <param name="options">Optional arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.ICluster.WaitUntilReadyAsync(System.TimeSpan,Couchbase.Diagnostics.WaitUntilReadyOptions)">
            <summary>
            Waits until a desired cluster state by default (“online”) is reached or times out.
            </summary>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> duration to wait before throwing an exception.</param>
            <param name="options">Optional arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.ICluster.DiagnosticsAsync(Couchbase.Diagnostics.DiagnosticsOptions)">
            <summary>
            Creates diagnostic report that can be used to determine the healthfulness of the cluster. It does not proactively perform any I/O against the network.
            </summary>
            <param name="options">Optional arguments.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.ICluster.QueryIndexes">
            <summary>
            Allows a user to manage query indexes.
            </summary>
        </member>
        <member name="P:Couchbase.ICluster.AnalyticsIndexes">
            <summary>
            Allows a user to manage analytics indexes.
            </summary>
        </member>
        <member name="P:Couchbase.ICluster.SearchIndexes">
            <summary>
            Allows a user to manage search indexes.
            </summary>
        </member>
        <member name="P:Couchbase.ICluster.Buckets">
            <summary>
            Allows a user to manage a couchbase buckets resources.
            </summary>
        </member>
        <member name="P:Couchbase.ICluster.Users">
            <summary>
            Allows a user to manage the users for a couchbase server.
            </summary>
        </member>
        <member name="P:Couchbase.ICluster.EventingFunctions">
            <summary>
            Allows a user to read eventing functions, modify them and change their deployment state.
            </summary>
        </member>
        <member name="T:Couchbase.IClusterExtended">
            <summary>
            Adds additional functionality for internal use and testing to the ICluster interface
            </summary>
        </member>
        <member name="M:Couchbase.IClusterExtended.RemoveBucket(System.String)">
            <summary>
            Removes a <see cref="T:Couchbase.IBucket"/> from the internal cache.
            </summary>
            <param name="bucketName">The name of the <see cref="T:Couchbase.IBucket"/> to remove.</param>
        </member>
        <member name="M:Couchbase.IClusterExtended.BucketExists(System.String)">
            <summary>
            Checks for the existence of a cached <see cref="T:Couchbase.IBucket"/>.
            </summary>
            <param name="bucketName">The name of the <see cref="T:Couchbase.IBucket"/>.</param>
            <returns>True if the <see cref="T:Couchbase.IBucket"/> is found; otherwise false.</returns>
        </member>
        <member name="T:Couchbase.IDnsResolver">
            <summary>
            Resolves a bootstrap URI to a list of servers using DNS SRV lookup.
            </summary>
        </member>
        <member name="M:Couchbase.IDnsResolver.GetDnsSrvEntriesAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Resolve a bootstrap URI to a list of servers using DNS SRV lookup.
            </summary>
            <param name="bootstrapUri">Bootstrap URI to lookup.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A list of <seealso cref="T:Couchbase.HostEndpoint"/> objects, empty if the DNS SRV lookup fails.</returns>
        </member>
        <member name="T:Couchbase.IInternalScope">
            <summary>
            Interface for any non-public methods or properties that are needed on a <see cref="T:Couchbase.KeyValue.IScope"/>.
            </summary>
        </member>
        <member name="M:Couchbase.IInternalScope.GetCidAsync(System.String)">
            <summary>
            Given a fully qualified name get the Identifier for a Collection.
            </summary>
            <param name="fullyQualifiedName">A string in the format {scopeName}.{collectionName}.</param>
            <returns>The identifier for a collection.</returns>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.AttemptContext">
            <summary>
            Provides methods that allow an application's transaction logic to read, mutate, insert, and delete documents.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.AttemptContext.AttemptId">
            <summary>
            Gets the ID of this individual attempt.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.AttemptContext.TransactionId">
            <summary>
            Gets the ID of this overall transaction.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.AttemptContext.Logger">
            <summary>
            Gets the logger instance used for this AttemptContext.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.AttemptContext.GetAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String)">
            <summary>
            Gets a document.
            </summary>
            <param name="collection">The collection to look up the document in.</param>
            <param name="id">The ID of the document.</param>
            <returns>A <see cref="T:Couchbase.Integrated.Transactions.TransactionGetResult"/> containing the document.</returns>
            <exception cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException">If the document does not exist.</exception>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.AttemptContext.GetOptionalAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Gets a document or null.
            </summary>
            <param name="collection">The collection to look up the document in.</param>
            <param name="id">The ID of the document.</param>
            <param name="parentSpan">The optional parent tracing span.</param>
            <returns>A <see cref="T:Couchbase.Integrated.Transactions.TransactionGetResult"/> containing the document, or null if  not found.</returns>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.AttemptContext.ReplaceAsync(Couchbase.Integrated.Transactions.TransactionGetResult,System.Object,Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Replace the content of a document previously fetched in this transaction with new content.
            </summary>
            <param name="doc">The <see cref="T:Couchbase.Integrated.Transactions.TransactionGetResult"/> of a document previously looked up in this transaction.</param>
            <param name="content">The updated content.</param>
            <param name="parentSpan">The optional parent tracing span.</param>
            <returns>A <see cref="T:Couchbase.Integrated.Transactions.TransactionGetResult"/> reflecting the updated content.</returns>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.AttemptContext.InsertAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Object,Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Insert a document.
            </summary>
            <param name="collection">The collection to insert the document into.</param>
            <param name="id">The ID of the new document.</param>
            <param name="content">The content of the new document.</param>
            <param name="parentSpan">The optional parent tracing span.</param>
            <returns>A <see cref="T:Couchbase.Integrated.Transactions.TransactionGetResult"/> representing the inserted document.</returns>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.AttemptContext.RemoveAsync(Couchbase.Integrated.Transactions.TransactionGetResult,Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Remove a document previously looked up in this transaction.
            </summary>
            <param name="doc">The <see cref="T:Couchbase.Integrated.Transactions.TransactionGetResult"/> of a document previously looked up in this transaction.</param>
            <param name="parentSpan">The optional parent tracing span.</param>
            <returns>A task representing the asynchronous work.</returns>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.AttemptContext.CommitAsync(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Commits the transaction.
            </summary>
            <param name="parentSpan">(optional) RequestSpan to use as a parent for tracing.</param>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.AttemptContext.RollbackAsync(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Rollback the transaction, explicitly.
            </summary>
            <param name="parentSpan">The optional parent tracing span.</param>
            <returns>A task representing the asynchronous work.</returns>
            <remarks>Calling this method on AttemptContext is usually unnecessary, as unhandled exceptions will trigger a rollback automatically.</remarks>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.AttemptContext.QueryAsync``1(System.String,Couchbase.Integrated.Transactions.Config.TransactionQueryOptions,Couchbase.KeyValue.IScope,Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Run a query in transaction mode.
            </summary>
            <typeparam name="T">The type of the result.  Use <see cref="T:System.Object"/> for queries with no results.</typeparam>
            <param name="statement">The statement to execute.</param>
            <param name="options">The query options to use for this query.</param>
            <param name="scope">The scope</param>
            <param name="parentSpan">The optional parent tracing span.</param>
            <returns>A <see cref="T:Couchbase.Integrated.Transactions.SingleQueryTransactionResult`1"/> with the query results, if any.</returns>
            <remarks>IMPORTANT: Any KV operations after this query will be run via the query engine, which has performance implications.</remarks>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.AttemptContext.ConvertQueryError(System.Exception)">
            <summary>
            INTERNAL
            </summary>
            <param name="err">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Cleanup.CleanupWorkQueue.StopProcessing">
            <summary>
            Call during app shutdown to finish all cleanup request as soon as possible.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Components.DocumentMetadata">
            <summary>
            A POCO to serialize transactions metadata on a document for rollback / unstaging purposes.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Components.DocumentMetadata.Cas">
            <summary>
            Gets the stringified CAS value.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Components.DocumentMetadata.RevId">
            <summary>
            Gets the Revision ID.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Components.DocumentMetadata.ExpTime">
            <summary>
            Gets the expiration time
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Components.DocumentMetadata.Crc32c">
            <summary>
            Gets the CRC32 checksum.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Config.Extensions">
            <summary>
            Extension methods with more convenient overloads for using options and configuration.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Config.Extensions.QueryAsync``1(Couchbase.Integrated.Transactions.AttemptContext,System.String,System.Action{Couchbase.Integrated.Transactions.Config.TransactionQueryOptions},Couchbase.KeyValue.IScope)">
            <summary>
            Run a query in transaction mode.
            </summary>
            <typeparam name="T">The type of the result.  Use <see cref="T:System.Object"/> for queries with no results.</typeparam>
            <param name="ctx">The AttemptContext to query from.</param>
            <param name="statement">The statement to execute.</param>
            <param name="configure">An action to configure the options for this query.</param>
            <param name="scope">The scope</param>
            <returns>A <see cref="T:Couchbase.Integrated.Transactions.SingleQueryTransactionResult`1"/> with the query results, if any.</returns>
            <remarks>IMPORTANT: Any KV operations after this query will be run via the query engine, which has performance implications.</remarks>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Config.PerTransactionConfig">
            <summary>
            A record representing a config applied to a single transaction.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Config.PerTransactionConfig.DurabilityLevel">
            <summary>
            Gets an optional value indicating the minimum durability level desired for this transaction.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Config.PerTransactionConfig.Timeout">
            <summary>
            Gets an optional value indicating the relative expiration time of the transaction for this transaction.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Config.PerTransactionConfig.KeyValueTimeout">
            <summary>
            Gets an option value indicating the timeout on Couchbase Key/Value operations for this transaction.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Config.PerTransactionConfig.ScanConsistency">
            <summary>
            The scan consistency to use for query operations (default: RequestPlus)
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Config.PerTransactionQueryConfig">
            <summary>
            Allows setting a per-transaction query configuration.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Config.PerTransactionQueryConfig.ScanConsistency">
            <summary>
            Gets or sets the index scan consistency for query operations.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Config.TransactionConfig">
            <summary>
            The configuration to use for each transaction against a given cluster.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Config.TransactionConfig.#ctor(Couchbase.KeyValue.DurabilityLevel,System.Nullable{System.TimeSpan},System.Nullable{Couchbase.Query.QueryScanConsistency},Couchbase.Integrated.Transactions.KeySpace,Couchbase.Integrated.Transactions.Config.TransactionCleanupConfig,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            The configuration to use for each transaction against a given cluster.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Config.TransactionConfig.DefaultDurabilityLevel">
            <summary>
            The default durability level.
            </summary>
            <seealso cref="P:Couchbase.Integrated.Transactions.Config.TransactionConfig.DurabilityLevel"/>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Config.TransactionConfig.DefaultTimeoutMilliseconds">
            <summary>
            The default expiration, in milliseconds.
            </summary>
            <seealso cref="P:Couchbase.Integrated.Transactions.Config.TransactionConfig.Timeout"/>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Config.TransactionConfig.DefaultCleanupWindowMilliseconds">
            <summary>
            The default cleanup window, in milliseconds.
            </summary>
            <seealso cref="P:Couchbase.Integrated.Transactions.Config.TransactionCleanupConfig.CleanupWindow"/>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Config.TransactionConfig.DefaultCleanupLostAttempts">
            <summary>
            The default value of <see cref="P:Couchbase.Integrated.Transactions.Config.TransactionCleanupConfig.CleanupLostAttempts"/> (true).
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Config.TransactionConfig.DefaultCleanupClientAttempts">
            <summary>
            The default value of <see cref="P:Couchbase.Integrated.Transactions.Config.TransactionCleanupConfig.CleanupClientAttempts"/> (true).
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Config.TransactionConfig.DefaultLogOnFailure">
            <summary>
            The default log level for failures.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Config.TransactionQueryOptions">
            <summary>
            A limited subset of <see cref="T:Couchbase.Query.QueryOptions"/> that are usable in Transactions.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Config.TransactionQueryOptions.#ctor(System.Nullable{Couchbase.Query.QueryScanConsistency})">
            <summary>
            A limited subset of <see cref="T:Couchbase.Query.QueryOptions"/> that are usable in Transactions.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.DataModel.ClientRecordEntry">
            <summary>
            A model class for JSON serialization/deserialization of the individual client record entries.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.DataModel.ClientRecordsIndex">
            <summary>
            A model class for JSON serialization/deserialization of the root Client Records object.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.DataModel.ClientRecordsOverride">
            <summary>
            A model class for JSON serialization/deserialization of the overrides section of the ClientRecord.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.DataModel.DataModelSerializerContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.DataModel.DataModelSerializerContext.NullableBoolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.DataModel.DataModelSerializerContext.QueryErrorCause">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.DataModel.DataModelSerializerContext.Object">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.DataModel.DataModelSerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.DataModel.DataModelSerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.DataModel.DataModelSerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.DataModel.DataModelSerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.DataModel.DataModelSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.DataModel.DataModelSerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.Attempts.ActiveTransactionRecordEntryNotFoundException">
            <summary>
            An exception indicating that a specific entry in an Active Transaction Record was not found when it should have existd.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Error.Attempts.ActiveTransactionRecordEntryNotFoundException.Id">
            <summary>
            Gets the ID of the entry that was supposed to exist.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.Attempts.ActiveTransactionRecordNotFoundException">
            <summary>
            Indicates an Active Transaction Record was not found when expected.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.Attempts.ActiveTransactionRecordsFullException">
            <summary>
            An error indicating that an Active Transaction Record is full.  This suggests that one or more transactions clients are not cleaning up properly.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.Attempts.AttemptException">
            <summary>
            Indicates an error during an individual transaction attempt.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.Attempts.AttemptException.#ctor(Couchbase.Integrated.Transactions.AttemptContext,System.String)">
            <summary>
            Initializes a new instance of the AttemptException class.
            </summary>
            <param name="ctx">The Attempt Context.</param>
            <param name="msg">The message.</param>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.Attempts.AttemptException.#ctor(Couchbase.Integrated.Transactions.AttemptContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AttemptException class.
            </summary>
            <param name="ctx">The AttemptContext.</param>
            <param name="msg">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.Attempts.AttemptExpiredException">
            <summary>
            Indicates an attempt exceeded the allotted time.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.Attempts.AttemptExpiredException.#ctor(Couchbase.Integrated.Transactions.AttemptContext,System.String)">
            <summary>
            Initializes a new instance of the AttemptExpiredException class.
            </summary>
            <param name="ctx">The AttemptContext.</param>
            <param name="msg">The message.</param>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.Attempts.AttemptExpiredException.#ctor(Couchbase.Integrated.Transactions.AttemptContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AttemptExpiredException class.
            </summary>
            <param name="ctx">The AttemptContext.</param>
            <param name="msg">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.Attempts.DocumentAlreadyInTransactionException">
            <summary>
            Indicates a document being modified is already being modified in the same transaction.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Error.Attempts.DocumentAlreadyInTransactionException.Doc">
            <summary>
            Gets the document in question.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.Attempts.DocumentAlreadyInTransactionException.Create(Couchbase.Integrated.Transactions.AttemptContext,Couchbase.Integrated.Transactions.TransactionGetResult)">
            <summary>
            Creates an instance of the DocumentAlreadyInTransactionException.
            </summary>
            <param name="ctx">The AttemptContext.</param>
            <param name="doc">The document in question.</param>
            <returns>An initialized instance.</returns>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.External.ForwardCompatibilityFailureException">
            <summary>
            Indicates that this version of the transactions protocol encountered a document with metadata from a later
            version which it cannot safely interact with.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.External.ForwardCompatibilityFailureException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.External.ForwardCompatibilityFailureException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.External.ForwardCompatibilityFailureException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.External.ForwardCompatibilityFailureRequiresRetryException">
            <summary>
            Indicates that an error due to an incompatibility with a later protocol version requires a retry.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.External.ForwardCompatibilityFailureRequiresRetryException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.External.ForwardCompatibilityFailureRequiresRetryException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.External.ForwardCompatibilityFailureRequiresRetryException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.External.PreviousOperationFailedException">
             A previous operation in the application's lambda failed, and so the currently-attempt operation is also not
             permitted to proceed.
            
             This is most likely thrown in one of these two scenarios:
            
             1. The application is performing multiple operations in parallel and one of them has failed.  For performance it is
                best to fail all other operations immediately (the transaction is not going to commit anyway), so can get to the
                fail and possibly retry point as soon as possible.
             2. The application is erroneously catching and not propagating exceptions in the lambda.
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.External.PreviousOperationFailedException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.External.PreviousOperationFailedException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.External.TransactionAbortedExternallyException">
            <summary>
            Indicates this transaction was aborted due to an outside actor.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.External.TransactionAbortedExternallyException.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException">
            <summary>
            Indicates an operation in a transaction failed.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.None">
            <summary>
            Placeholder for "no failure".
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.ExceptionNumber">
            <summary>
            Gets the Exception Number.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.CausingErrorClass">
            <summary>
            Gets the general class of error that caused the exception.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.AutoRollbackAttempt">
            <summary>
            Gets a value indicating whether the transaction attempt should automatically be rolled back.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.RetryTransaction">
            <summary>
            Gets a value indicating whether this transaction can be retried or not.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.Cause">
            <summary>
            Gets the exception that caused the failure.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.FinalErrorToRaise">
            <summary>
            Gets the final error to raise if this is the last attempt in the transaction.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.FinalError">
            <summary>
            An enumeration of the final error types that can fail a transaction.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.FinalError.TransactionFailed">
            <summary>
            Generic failure.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.FinalError.TransactionExpired">
            <summary>
            The transaction expired.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.FinalError.TransactionCommitAmbiguous">
            <summary>
            An error occured in a way that the client cannot know whether the commit was successful or not.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.FinalError.TransactionFailedPostCommit">
            This will currently result in returning success to the application, but unstagingCompleted() will be false.
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.#ctor(Couchbase.Integrated.Transactions.Error.ErrorClass,System.Boolean,System.Boolean,System.Exception,Couchbase.Integrated.Transactions.Error.External.TransactionOperationFailedException.FinalError)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.Internal.IClassifiedTransactionError">
            <summary>
            An error with a clear classification.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Error.Internal.IClassifiedTransactionError.CausingErrorClass">
            <summary>
            The class of error that caused the failure.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.TransactionCommitAmbiguousException">
            <summary>
            Indicates a transaction failed in a way that the client cannot know if it successfully committed.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.TransactionCommitAmbiguousException.#ctor(System.String,System.Exception,Couchbase.Integrated.Transactions.TransactionResult)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.TransactionExpiredException">
            <summary>
            Indicates that a transaction ran past its overall allotted time.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.TransactionExpiredException.#ctor(System.String,System.Exception,Couchbase.Integrated.Transactions.TransactionResult)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Error.TransactionExpiredException.CausingErrorClass">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Error.TransactionFailedException">
            <summary>
            A generic exception thrown internally that indicates that a transaction failed.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Error.TransactionFailedException.Result">
            <summary>
            Gets the final result of the transaction.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Error.TransactionFailedException.#ctor(System.String,System.Exception,Couchbase.Integrated.Transactions.TransactionResult)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Internal.IContentAsWrapper">
            <summary>
            An interface for deferring ContentAs calls to their original source to avoid byte[]/json/string conversion in the middle.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Internal.NonStreamingSerializerWrapper">
            <summary>
            Wraps a given <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> to make sure it is not reported as <see cref="T:Couchbase.Core.IO.Serializers.IStreamingTypeDeserializer"/> to force block serialization.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Internal.NonStreamingSerializerWrapper.FromCluster(Couchbase.ICluster)">
            <summary>
            Returns or initializes a non-streaming <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> based on cluster DI.
            </summary>
            <param name="cluster">The initialized Cluster.</param>
            <returns>An <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> instance that does not implement <see cref="T:Couchbase.Core.IO.Serializers.IStreamingTypeDeserializer"/>.</returns>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Internal.Test.ITestHooks">
            <summary>
            Protected hooks purely for testing purposes.  If you're an end-user looking at these for any reason, then
            please contact us first about your use-case: we are always open to adding good ideas into the transactions
            library.
            </summary>
            <remarks>All methods have default no-op implementations.</remarks>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Internal.Test.DefaultTestHooks">
            <summary>
            Implementation of ITestHooks that relies on default interface implementation.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.LogUtil.DelegatingDisposable`1">
            <summary>
            A utility class for chaining disposables together into a single `using` statement.
            </summary>
            <typeparam name="T">The type of the significant root item.</typeparam>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.LogUtil.TransactionsLogger">
            <summary>
            A logger that records results in-memory.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.LogUtil.TransactionsLogger.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Integrated.Transactions.LogUtil.TransactionsLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Integrated.Transactions.LogUtil.TransactionsLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Integrated.Transactions.SingleQueryTransactionResult`1">
            <summary>
            The transaction result from a single query transaction.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.SingleQueryTransactionResult`1.QueryResult">
            <summary>
            Gets the query result, if any.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.SingleQueryTransactionResult`1.Logs">
            <summary>
            Gets the logs from the transaction.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.SingleQueryTransactionResult`1.UnstagingComplete">
            <summary>
            Gets a value indicating whether the transaction completed to the point of unstaging its results, meaning it finished successfully.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Support.AttemptStates">
            <summary>
            The various states of a transaction attempt.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Support.AttemptStates.NOTHING_WRITTEN">
            <summary>
            Nothing has been written yet.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Support.AttemptStates.PENDING">
            <summary>
            Mutations are pending.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Support.AttemptStates.ABORTED">
            <summary>
            The transaction has been aborted.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Support.AttemptStates.COMMITTED">
            <summary>
            The transaction has been completed.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Support.AttemptStates.COMPLETED">
            <summary>
            The transaction has been completed and the metadata cleaned up.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Support.AttemptStates.ROLLED_BACK">
            <summary>
            The transaction was rolled back.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Support.AttemptStates.UNKNOWN">
            <summary>
            The transaction is in an unknown state.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.TaskExtensions">
            <summary>
            Extension methods to the <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.ValueTask"/> classes.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.TransactionGetResult">
            <summary>
            The result of a Get or GetOptional operation an a transaction context."/>
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.TransactionGetResult.Empty">
            <summary>
            Placeholder for an empty result.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.TransactionGetResult.Id">
            <summary>
            Gets the ID of the document.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.TransactionGetResult.Cas">
            <summary>
            Gets the CAS value of the document for future mutations.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.TransactionGetResult.DocumentMetadata">
            <summary>
            Gets the document metadata.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.TransactionGetResult.Collection">
            <summary>
            Gets the collection the document belongs to.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.TransactionGetResult.TxnMeta">
            <summary>
            Gets the transactional metadata of the document.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.TransactionGetResult.ContentAs``1">
            <summary>
            Deserialize the content of the document.
            </summary>
            <typeparam name="T">The type of document contained.</typeparam>
            <returns>A deserialized instance, or null.</returns>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.TransactionResult">
            <summary>
            The result of a transaction.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.TransactionResult.TransactionId">
            <summary>
            Gets the automatically-generated ID of this transaction.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.TransactionResult.UnstagingComplete">
            <summary>
            Gets a value indicating whether the transaction completed to the point of unstaging its results, meaning it finished successfully.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.TransactionResult.ToString">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Integrated.Transactions.TransactionResult.Logs">
            <summary>
            Gets the logs associated with this transaction.
            </summary>
        </member>
        <member name="T:Couchbase.Integrated.Transactions.Transactions">
            <summary>
            A class for running transactional operations against a Couchbase Cluster.
            </summary>
        </member>
        <member name="F:Couchbase.Integrated.Transactions.Transactions.OpRetryDelay">
            <summary>
            A standard delay between retried operations.
            </summary>
        </member>
        <member name="P:Couchbase.Integrated.Transactions.Transactions.Config">
            <summary>
            Gets the <see cref="T:Couchbase.Integrated.Transactions.Config.TransactionConfig"/> to apply to all transaction runs from this instance.
            </summary>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Transactions.Create(Couchbase.ICluster)">
            <summary>
            Create a <see cref="T:Couchbase.Integrated.Transactions.Transactions"/> instance for running transactions against the specified <see cref="T:Couchbase.ICluster">Cluster</see>.
            </summary>
            <param name="cluster">The cluster where your documents will be located.</param>
            <returns>A <see cref="T:Couchbase.Integrated.Transactions.Transactions"/> instance.</returns>
            <remarks>The instance returned from this method should be kept for the lifetime of your application and used like a singleton per Couchbase cluster you will be accessing.</remarks>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Transactions.Create(Couchbase.ICluster,Couchbase.Integrated.Transactions.Config.TransactionConfig)">
            <summary>
            Create a <see cref="T:Couchbase.Integrated.Transactions.Transactions"/> instance for running transactions against the specified <see cref="T:Couchbase.ICluster">Cluster</see>.
            </summary>
            <param name="cluster">The cluster where your documents will be located.</param>
            <param name="config">The <see cref="T:Couchbase.Integrated.Transactions.Config.TransactionConfig"/> to use for all transactions against this cluster.</param>
            <returns>A <see cref="T:Couchbase.Integrated.Transactions.Transactions"/> instance.</returns>
            <remarks>The instance returned from this method should be kept for the lifetime of your application and used like a singleton per Couchbase cluster you will be accessing.</remarks>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Transactions.RunAsync(System.Func{Couchbase.Integrated.Transactions.AttemptContext,System.Threading.Tasks.Task},Couchbase.Integrated.Transactions.Config.PerTransactionConfig)">
            <summary>
            Run a transaction agains the cluster.
            </summary>
            <param name="transactionLogic">A func representing the transaction logic. All data operations should use the methods on the <see cref="T:Couchbase.Integrated.Transactions.AttemptContext"/> provided.  Do not mix and match non-transactional data operations.</param>
            <param name="perConfig">A config with values unique to this specific transaction.</param>
            <returns>The result of the transaction.</returns>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Transactions.QueryAsync``1(System.String,Couchbase.Integrated.Transactions.Config.PerTransactionConfig,Couchbase.Integrated.Transactions.Config.TransactionQueryOptions,Couchbase.KeyValue.IScope)">
            <summary>
            Run a single query as a transaction.
            </summary>
            <typeparam name="T">The type of the result.  Use <see cref="T:System.Object"/> for queries with no results.</typeparam>
            <param name="statement">The statement to execute.</param>
            <param name="config">The configuration to use for this transaction.</param>
            <param name="options">The query-specific options</param>
            <param name="scope">The scope</param>
            <returns>A <see cref="T:Couchbase.Integrated.Transactions.SingleQueryTransactionResult`1"/> with the query results, if any.</returns>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Transactions.Dispose(System.Boolean)">
            <summary>
            Dispose with the Disposing pattern.
            </summary>
            <param name="disposing">The Disposing pattern.</param>
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Transactions.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Integrated.Transactions.Transactions.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.InvalidConfigurationException">
            <summary>
            A generic error raised when the clusterOptions is invalid.
            </summary>
        </member>
        <member name="F:Couchbase.IpAddressMode.Default">
            <summary>
            Default behavior, currently equivalent to <see cref="F:Couchbase.IpAddressMode.PreferIpv6"/>.
            </summary>
        </member>
        <member name="F:Couchbase.IpAddressMode.ForceIpv4">
            <summary>
            Force IPv4, ignoring any IPv6 records
            </summary>
        </member>
        <member name="F:Couchbase.IpAddressMode.PreferIpv4">
            <summary>
            Prefer IPv4 over IPv6 records, but use IPv6 if that is the only option available.
            </summary>
        </member>
        <member name="F:Couchbase.IpAddressMode.ForceIpv6">
            <summary>
            Force IPv6, ignoring any IPv4 records
            </summary>
        </member>
        <member name="F:Couchbase.IpAddressMode.PreferIpv6">
            <summary>
            Prefer IPv6 over IPv4 records, but use IPv4 if that is the only option available.
            </summary>
        </member>
        <member name="T:Couchbase.IServiceResultExceptionInfo">
            <summary>
            Interface for Service Result Exception Info
            </summary>
        </member>
        <member name="P:Couchbase.IServiceResultExceptionInfo.NoRetryException">
            <summary>
            Exception to throw if "No Retry"
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryGetAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String)">
            <summary>
            Given an id, gets a document from the database. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryGetResult"/>
            will be returned with the Exists property set to false; otherwise true.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryGetResult"/> with its Exists property set; note that if false and
            ContentAs() is called, a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryGetAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.GetOptions})">
            <summary>
            Given an id, gets a document from the database. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryGetResult"/>
            will be returned with the Exists property set to false; otherwise true.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryGetResult"/> with its Exists property set; note that if false and
            ContentAs() is called, a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.</returns>
            <param name="configureOptions">The <see cref="T:Couchbase.KeyValue.GetOptions"/> to be passed to the server.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryGetAndLockAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan)">
            <summary>
            Given an id, gets a document from the database and places a pessimistic lock on it for mutations. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryGetResult"/>
            will be returned with the Exists property set to false; otherwise true. Any other failure will result in a
            thrown exception.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <param name="expires"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryGetResult"/> with its Exists property set; note that if false and
            ContentAs() is called, a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.</returns>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryGetResult"/> with its Exists property set; note that if false and
            ContentAs() is called, a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryGetAndLockAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan,System.Action{Couchbase.KeyValue.GetAndLockOptions})">
            <summary>
            Given an id, gets a document from the database and places a pessimistic lock on it for mutations. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryGetResult"/>
            will be returned with the Exists property set to false; otherwise true. Any other failure will result in a
            thrown exception.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryGetResult"/> with its Exists property set; note that if false and
            ContentAs() is called, a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.</returns>
            <param name="configureOptions">The <see cref="T:Couchbase.KeyValue.GetOptions"/> to be passed to the server.</param>
            <param name="expires"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryGetResult"/> with its Exists property set; note that if false and
            ContentAs() is called, a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryGetAndTouchAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan)">
            <summary>
            Given an id, gets a document from the database. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryGetResult"/>
            will be returned with the Exists property set to false; otherwise true. Any other failure will result in a
            thrown exception.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryGetResult"/> with its Exists property set; note that if false and
            ContentAs() is called, a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.</returns>
            <param name="expires"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryGetResult"/> with its Exists property set; note that if false and
            ContentAs() is called, a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryGetAndTouchAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan,Couchbase.KeyValue.GetAndTouchOptions)">
            <summary>
            Given an id, gets a document from the database. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryGetResult"/>
            will be returned with the Exists property set to false; otherwise true. Any other failure will result in a
            thrown exception.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryGetResult"/> with its Exists property set; note that if false and
            ContentAs() is called, a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.</returns>
            <param name="expires"></param>
            <param name="configureOptions">The <see cref="T:Couchbase.KeyValue.GetOptions"/> to be passed to the server.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryGetResult"/> with its Exists property set; note that if false and
            ContentAs() is called, a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryGetAndTouchAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan,System.Action{Couchbase.KeyValue.GetAndTouchOptions})">
            <summary>
            Given an id, gets a document from the database. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryGetResult"/>
            will be returned with the Exists property set to false; otherwise true. Any other failure will result in a
            thrown exception.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryGetResult"/> with its Exists property set; note that if false and
            ContentAs() is called, a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.</returns>
            <param name="expires"></param>
            <param name="configureOptions">The <see cref="T:Couchbase.KeyValue.GetOptions"/> to be passed to the server.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryGetResult"/> with its Exists property set; note that if false and
            ContentAs() is called, a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryTouchAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan,System.Action{Couchbase.KeyValue.TouchOptions})">
            <summary>
            Given an id, updates a documents expiry in the database. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryTouchResult"/>
            will be returned with the Exists property set to false; otherwise true. Any other failure will result in a
            thrown exception.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <param name="expiry">A <see cref="T:System.TimeSpan"/> with the duration of the expiry.</param>
            <param name="configureOptions">The <see cref="T:Couchbase.KeyValue.RemoveOptions"/> to be passed to the server.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryTouchResult"/> with its Exists property set to true if the server returns success
            and false if the server returns KeyNotFound.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryTouchAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan)">
            <summary>
            Given an id, updates a documents expiry in the database. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryTouchResult"/>
            will be returned with the Exists property set to false; otherwise true. Any other failure will result in a
            thrown exception.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <param name="expiry">A <see cref="T:System.TimeSpan"/> with the duration of the expiry.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryTouchResult"/> with its Exists property set to true if the server returns success
            and false if the server returns KeyNotFound.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryReplaceAsync``1(Couchbase.KeyValue.ICouchbaseCollection,System.String,``0)">
            <summary>
            Given an id, replaces a document from the database. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryMutationResult"/>
            will be returned with the Exists property set to false; otherwise true. Any other failure will result in a
            thrown exception.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <param name="content">The document or content to store in the database.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryMutationResult"/> with its Exists property set to true if the server replaces the document
            and false if the server returns KeyNotFound.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryReplaceAsync``1(Couchbase.KeyValue.ICouchbaseCollection,System.String,``0,System.Action{Couchbase.KeyValue.ReplaceOptions})">
            <summary>
            Given an id, replaces a document from the database. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryMutationResult"/>
            will be returned with the Exists property set to false; otherwise true. Any other failure will result in a
            thrown exception.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <param name="content">The document or content to store in the database.</param>
            <param name="configureOptions">The <see cref="T:Couchbase.KeyValue.RemoveOptions"/> to be passed to the server.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryMutationResult"/> with its Exists property set to true if the server replaces the document
            and false if the server returns KeyNotFound.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryRemoveAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String)">
            <summary>
            Given an id, removes a document from the database. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryRemoveResult"/>
            will be returned with the Exists property set to false; otherwise true. Any other failure will result in a
            thrown exception.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryRemoveResult"/> with its Exists property set to true if the document was removed
            and false if the server returns KeyNotFound.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryRemoveAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.RemoveOptions})">
            <summary>
            Given an id, removes a document from the database. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryRemoveResult"/>
            will be returned with the Exists property set to false; otherwise true. Any other failure will result in a
            thrown exception.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <param name="configureOptions">The <see cref="T:Couchbase.KeyValue.RemoveOptions"/> to be passed to the server.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryRemoveResult"/> with its Exists property set to true if the document was removed
            and false if the server returns KeyNotFound.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryUnlockAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.UInt64)">
            <summary>
            Given an id, unlocks a document from the database. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryUnlockResult"/>
            will be returned with the Exists property set to false; otherwise true. Any other failure will result in a
            thrown exception.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <param name="cas">The Compare And Swap (CAS) of the document.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryUnlockResult"/> with its Exists property set to true if the server returns success
            and false if the server returns KeyNotFound.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TryUnlockAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.UInt64,System.Action{Couchbase.KeyValue.UnlockOptions})">
            <summary>
            Given an id, unlocks a document from the database. If the key is not found, a <see cref="T:Couchbase.KeyValue.ITryUnlockResult"/>
            will be returned with the Exists property set to false; otherwise true. Any other failure will result in a
            thrown exception.
            </summary>
            <param name="collection">The <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/> where the key is found.</param>
            <param name="id">The identifier for the document.</param>
            <param name="cas">The Compare And Swap (CAS) of the document.</param>
            <param name="configureOptions">The <see cref="T:Couchbase.KeyValue.RemoveOptions"/> to be passed to the server.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.ITryUnlockResult"/> with its Exists property set to true if the server returns success
            and false if the server returns KeyNotFound.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.GetAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String)">
            <summary>
            Fetches a value from the server if it exists. If the document does not exist in the database,
            a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">Primary key as a string.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the JSON object or scalar encapsulated in an <see cref="T:Couchbase.KeyValue.IGetResult"></see> API object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.GetAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.GetOptions})">
            <summary>
            Fetches a value from the server if it exists.If the document does not exist in the database,
            a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> will be thrown.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">Primary key as a string.</param>
            <param name="configureOptions">Optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the JSON object or scalar encapsulated in an <see cref="T:Couchbase.KeyValue.IGetResult"></see> API object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.GetAnyReplicaAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String)">
            <summary>
            Gets a document for a given id, leveraging both the active and all available replicas.
            This method follows the same semantics of GetAllReplicas (including the fetch from ACTIVE),
            but returns the first response as opposed to returning all responses.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="collection">Couchbase collection.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> The JSON object or scalar encapsulated in a <see cref="T:Couchbase.KeyValue.IGetReplicaResult"/> API object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.GetAnyReplicaAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.GetAnyReplicaOptions})">
            <summary>
            Gets a list of document data from the server, leveraging both the active and all available
            replicas.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="collection">Couchbase collection.</param>
            <param name="configureOptions">Optional parameters</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the JSON object or scalar encapsulated in a list of <see cref="T:Couchbase.KeyValue.IGetReplicaResult"/> API objects.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.GetAllReplicasAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String)">
            <summary>
            Gets a list of document data from the server, leveraging both the active and all available
            replicas.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="collection">Couchbase collection.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the JSON object or scalar encapsulated in a list of <see cref="T:Couchbase.KeyValue.IGetReplicaResult"/> API objects.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.GetAllReplicasAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.GetAllReplicasOptions})">
            <summary>
            Gets a list of document data from the server, leveraging both the active and all available
            replicas.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="collection">Couchbase collection.</param>
            <param name="configureOptions">Optional parameters</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the JSON object or scalar encapsulated in a list of <see cref="T:Couchbase.KeyValue.IGetReplicaResult"/> API objects.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.ExistsAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String)">
            <summary>
            Returns true if a document exists for a given id, otherwise false.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing an <see cref="T:Couchbase.KeyValue.IExistsResult"/> object with a boolean value indicating the presence of the document.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.ExistsAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.ExistsOptions})">
            <summary>
            Returns true if a document exists for a given id, otherwise false.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureOptions">Optional parameters</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing an <see cref="T:Couchbase.KeyValue.IExistsResult"/> object with a boolean value indicating the presence of the document.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.UpsertAsync``1(Couchbase.KeyValue.ICouchbaseCollection,System.String,``0)">
            <summary>
            Insert a new document or overwrite an existing document in Couchbase server. Maps to Memcached Set command.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of content to upsert.</typeparam>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="content">The content or document body.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing an <see cref="T:Couchbase.KeyValue.IMutationResult"/> object if successful otherwise an exception with details for the reason the operation failed.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.UpsertAsync``1(Couchbase.KeyValue.ICouchbaseCollection,System.String,``0,System.Action{Couchbase.KeyValue.UpsertOptions})">
            <summary>
            Insert a new document or overwrite an existing document in Couchbase server. Maps to Memcached Set command.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of content to upsert.</typeparam>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="content">The content or document body.</param>
            <param name="configureOptions">Optional parameters</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing an <see cref="T:Couchbase.KeyValue.IMutationResult"/> object if successful otherwise an exception with details for the reason the operation failed.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.InsertAsync``1(Couchbase.KeyValue.ICouchbaseCollection,System.String,``0)">
            <summary>
            Insert a JSON document, failing if it already exists. Maps to Memcached Add command.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of content to insert.</typeparam>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="content">The content or document body.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing a IMutationResult object if successful otherwise an exception with details for the reason the operation failed.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.InsertAsync``1(Couchbase.KeyValue.ICouchbaseCollection,System.String,``0,System.Action{Couchbase.KeyValue.InsertOptions})">
            <summary>
            Insert a JSON document, failing if it already exists. Maps to Memcached Add command.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of content to insert.</typeparam>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="content">The content or document body.</param>
            <param name="optionsAction">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing a IMutationResult object if successful otherwise an exception with details for the reason the operation failed.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.ReplaceAsync``1(Couchbase.KeyValue.ICouchbaseCollection,System.String,``0)">
            <summary>
            Replaces an existing document in Couchbase server, failing if it does not exist. Maps to Memcached SET command.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of content to insert.</typeparam>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="content">The content or document body.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Couchbase.KeyValue.IMutationResult"/> object if successful otherwise an exception with details for the reason the operation failed.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.ReplaceAsync``1(Couchbase.KeyValue.ICouchbaseCollection,System.String,``0,System.Action{Couchbase.KeyValue.ReplaceOptions})">
            <summary>
            Replaces an existing document in Couchbase server, failing if it does not exist. Maps to Memcached SET command.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of content to insert.</typeparam>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="content">The content or document body.</param>
            <param name="configureOptions">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Couchbase.KeyValue.IMutationResult"/> object if successful otherwise an exception with details for the reason the operation failed.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.RemoveAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String)">
            <summary>
            Removes an existing document in Couchbase server, failing if it does not exist.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> object for awaiting.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.RemoveAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.RemoveOptions})">
            <summary>
            Removes an existing document in Couchbase server, failing if it does not exist.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureOptions">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> object for awaiting.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.UnlockAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.UInt64)">
            <summary>
            Unlocks a document pessimistically locked by a GetAndLock operation.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="cas">The CAS from the GetAndLock operation.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> object for awaiting.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.UnlockAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.UInt64,System.Action{Couchbase.KeyValue.UnlockOptions})">
            <summary>
            Unlocks a document pessimistically locked by a GetAndLock operation.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="cas">The CAS from the GetAndLock operation.</param>
            <param name="configureOptions">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> object for awaiting.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TouchAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a document given an id, without modifying or returning its value.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="expiry">The <see cref="T:System.TimeSpan"/> expiry of the new expiration time.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> object for awaiting.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TouchAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan,System.Action{Couchbase.KeyValue.TouchOptions})">
            <summary>
            Updates the expiration a document given an id, without modifying or returning its value.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="expiry">The <see cref="T:System.TimeSpan"/> expiry of the new expiration time.</param>
            <param name="configureOptions">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> object for awaiting.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TouchWithCasAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a document given an id, without modifying or returning its value.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="expiry">The <see cref="T:System.TimeSpan"/> expiry of the new expiration time.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> object for awaiting,
            with a <see cref="T:Couchbase.KeyValue.IMutationResult"/> containing a Cas value.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.TouchWithCasAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan,System.Action{Couchbase.KeyValue.TouchOptions})">
            <summary>
            Updates the expiration a document given an id, without modifying or returning its value.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="expiry">The <see cref="T:System.TimeSpan"/> expiry of the new expiration time.</param>
            <param name="configureOptions">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> object for awaiting,
            with a <see cref="T:Couchbase.KeyValue.IMutationResult"/> containing a Cas value.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.GetAndTouchAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan)">
            <summary>
            Gets a document for a given id and extends its expiration.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="expiry">The <see cref="T:System.TimeSpan"/> expiry of the new expiration time.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> The JSON object or scalar encapsulated in a <see cref="T:Couchbase.KeyValue.IGetResult"/> API object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.GetAndTouchAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan,System.Action{Couchbase.KeyValue.GetAndTouchOptions})">
            <summary>
            Gets a document for a given id and extends its expiration.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="expiry">The <see cref="T:System.TimeSpan"/> expiry of the new expiration time.</param>
            <param name="configureOptions">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> The JSON object or scalar encapsulated in a <see cref="T:Couchbase.KeyValue.IGetResult"/> API object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.GetAndLockAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan)">
            <summary>
            Gets a document for a given id and places a pessimistic lock on it for mutations.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="expiry">The duration of the lock.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> The JSON object or scalar encapsulated in a <see cref="T:Couchbase.KeyValue.IGetResult"/> API object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.GetAndLockAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.TimeSpan,System.Action{Couchbase.KeyValue.GetAndLockOptions})">
            <summary>
            Gets a document for a given id and places a pessimistic lock on it for mutations.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="expiry">The <see cref="T:System.TimeSpan"/> expiry of the new expiration time.</param>
            <param name="configureOptions">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> The JSON object or scalar encapsulated in a <see cref="T:Couchbase.KeyValue.IGetResult"/> API object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.LookupInAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.LookupInSpecBuilder})">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureBuilder">The builder for chaining sub doc operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the lookup as an <see cref="T:Couchbase.KeyValue.ILookupInResult"/> object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.LookupInAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.LookupInSpecBuilder},System.Action{Couchbase.KeyValue.LookupInOptions})">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureBuilder">The builder for chaining sub doc operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <param name="configureOptions">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the lookup as an <see cref="T:Couchbase.KeyValue.ILookupInResult"/> object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.LookupInAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.LookupInSpecBuilder},Couchbase.KeyValue.LookupInOptions)">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureBuilder">The builder for chaining sub doc operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the lookup as an <see cref="T:Couchbase.KeyValue.ILookupInResult"/> object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.LookupInAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Collections.Generic.IEnumerable{Couchbase.KeyValue.LookupInSpec})">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="specs">An array of fetch operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the lookup as an <see cref="T:Couchbase.KeyValue.ILookupInResult"/> object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.LookupInAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Collections.Generic.IEnumerable{Couchbase.KeyValue.LookupInSpec},System.Action{Couchbase.KeyValue.LookupInOptions})">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="specs">An array of fetch operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <param name="configureOptions">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the lookup as an <see cref="T:Couchbase.KeyValue.ILookupInResult"/> object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.LookupInAsync``1(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.LookupInSpecBuilder{``0}},System.Action{Couchbase.KeyValue.LookupInOptions})">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch. The result is strongly typed.
            </summary>
            <typeparam name="TDocument">The document <see cref="T:System.Type"/>.</typeparam>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureBuilder">An array of fetch operations - requires at least one: exists, get, count.</param>
            <param name="configureOptions">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the lookup as an <see cref="T:Couchbase.KeyValue.ILookupInResult"/> of type T.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.LookupInAsync``1(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.LookupInSpecBuilder{``0}},Couchbase.KeyValue.LookupInOptions)">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch. The result is strongly typed.
            </summary>
            <typeparam name="TDocument">The document <see cref="T:System.Type"/>.</typeparam>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureBuilder">An array of fetch operations - requires at least one: exists, get, count.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the lookup as an <see cref="T:Couchbase.KeyValue.ILookupInResult"/> of type T.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.LookupInAnyReplicaAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Collections.Generic.IEnumerable{Couchbase.KeyValue.LookupInSpec},System.Action{Couchbase.KeyValue.LookupInAnyReplicaOptions})">
            <summary>
            Allows the chaining of option configurations into a single operation.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="specs">An array of fetch operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <param name="configureOptions">Any optional parameters.</param>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.LookupInAnyReplicaAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.LookupInSpecBuilder},Couchbase.KeyValue.LookupInAnyReplicaOptions)">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureBuilder">An array of fetch operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <param name="options">Any optional parameters.</param>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.LookupInAnyReplicaAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.LookupInSpecBuilder},System.Action{Couchbase.KeyValue.LookupInAnyReplicaOptions})">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch, as well as the chaining of option configurations.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureBuilder">An array of fetch operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <param name="configureOptions">Any optional parameters.</param>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.LookupInAllReplicasAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.LookupInSpecBuilder},Couchbase.KeyValue.LookupInAllReplicasOptions)">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureBuilder">An array of fetch operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <param name="options">Any optional parameters.</param>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.LookupInAllReplicasAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Collections.Generic.IEnumerable{Couchbase.KeyValue.LookupInSpec},System.Action{Couchbase.KeyValue.LookupInAllReplicasOptions})">
            <summary>
            Allows the chaining of option configurations into a single operation.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="specs">An array of fetch operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <param name="configureOptions">Any optional parameters.</param>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.LookupInAllReplicasAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.LookupInSpecBuilder},System.Action{Couchbase.KeyValue.LookupInAllReplicasOptions})">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch, as well as the chaining of option configurations.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureBuilder">An array of fetch operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <param name="configureOptions">Any optional parameters.</param>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.MutateInAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.MutateInSpecBuilder})">
            <summary>
            Allows the chaining of Sub-Document mutation operations on a specific document in a single atomic transaction.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureBuilder">An array of mutation Sub-Document operations: Iinsert, Upsert, Replace, Remove, ArrayPrepend, ArrayAppend, ArrayInsert, ArrayAddUnique, Increment and/or Decrement. </param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the mutation as an <see cref="T:Couchbase.KeyValue.IMutateInResult"/> object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.MutateInAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.MutateInSpecBuilder},System.Action{Couchbase.KeyValue.MutateInOptions})">
            <summary>
            Allows the chaining of Sub-Document mutation operations on a specific document in a single atomic transaction.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            /// <param name="configureBuilder">An array of mutation Sub-Document operations: Insert, Upsert, Replace, Remove, ArrayPrepend, ArrayAppend, ArrayInsert, ArrayAddUnique, Increment and/or Decrement. </param>
            <param name="configureOptions">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the mutation as an <see cref="T:Couchbase.KeyValue.IMutateInResult"/> object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.MutateInAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.MutateInSpecBuilder},Couchbase.KeyValue.MutateInOptions)">
            <summary>
            Allows the chaining of Sub-Document mutation operations on a specific document in a single atomic transaction.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            /// <param name="configureBuilder">An array of mutation Sub-Document operations: Insert, Upsert, Replace, Remove, ArrayPrepend, ArrayAppend, ArrayInsert, ArrayAddUnique, Increment and/or Decrement. </param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the mutation as an <see cref="T:Couchbase.KeyValue.IMutateInResult"/> object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.MutateInAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Collections.Generic.IEnumerable{Couchbase.KeyValue.MutateInSpec})">
            <summary>
            Allows the chaining of Sub-Document mutation operations on a specific document in a single atomic transaction.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="specs">An array of mutation Sub-Document operations: Insert, Upsert, Replace, Remove, ArrayPrepend, ArrayAppend, ArrayInsert, ArrayAddUnique, Increment and/or Decrement. </param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the mutation as an <see cref="T:Couchbase.KeyValue.IMutateInResult"/> object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.MutateInAsync(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Collections.Generic.IEnumerable{Couchbase.KeyValue.MutateInSpec},System.Action{Couchbase.KeyValue.MutateInOptions})">
            <summary>
            Allows the chaining of Sub-Document mutation operations on a specific document in a single atomic transaction.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="specs">An array of mutation Sub-Document operations: Insert, Upsert, Replace, Remove, ArrayPrepend, ArrayAppend, ArrayInsert, ArrayAddUnique, Increment and/or Decrement. </param>
            /// <param name="configureOptions">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the mutation as an <see cref="T:Couchbase.KeyValue.IMutateInResult"/> object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.MutateInAsync``1(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.MutateInSpecBuilder{``0}},System.Action{Couchbase.KeyValue.MutateInOptions})">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch. The result is strongly typed.
            </summary>
            <typeparam name="TDocument">The document <see cref="T:System.Type"/>.</typeparam>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureBuilder">An array of fetch operations - requires at least one: exists, get, count.</param>
            <param name="configureOptions">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the lookup as an <see cref="T:Couchbase.KeyValue.ILookupInResult"/> of type T.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.MutateInAsync``1(Couchbase.KeyValue.ICouchbaseCollection,System.String,System.Action{Couchbase.KeyValue.MutateInSpecBuilder{``0}},Couchbase.KeyValue.MutateInOptions)">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch. The result is strongly typed.
            </summary>
            <typeparam name="TDocument">The document <see cref="T:System.Type"/>.</typeparam>
            <param name="collection">Couchbase collection.</param>
            <param name="id">The id of the document.</param>
            <param name="configureBuilder">An array of fetch operations - requires at least one: exists, get, count.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the lookup as an <see cref="T:Couchbase.KeyValue.ILookupInResult"/> of type T.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.Set``1(Couchbase.KeyValue.ICouchbaseCollection,System.String)">
            <summary>
            Get an <see cref="T:Couchbase.DataStructures.IPersistentSet`1"/> backed by a given document.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="docId">Document ID which backs the set.</param>
            <returns>The persistent set.</returns>
            <remarks>
            If using a <see cref="T:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer"/> backed by a <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
            be sure to include <see cref="T:System.Collections.Generic.ISet`1"/> in a <see cref="T:System.Text.Json.Serialization.JsonSerializableAttribute"/> on the context.
            </remarks>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.List``1(Couchbase.KeyValue.ICouchbaseCollection,System.String)">
            <summary>
            Get an <see cref="T:Couchbase.DataStructures.IPersistentList`1"/> backed by a given document.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="docId">Document ID which backs the list.</param>
            <returns>The persistent list.</returns>
            <remarks>
            If using a <see cref="T:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer"/> backed by a <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
            be sure to include <see cref="T:System.Collections.Generic.IList`1"/> in a <see cref="T:System.Text.Json.Serialization.JsonSerializableAttribute"/> on the context.
            </remarks>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.Queue``1(Couchbase.KeyValue.ICouchbaseCollection,System.String,Couchbase.DataStructures.QueueOptions)">
            <summary>
            Get an <see cref="T:Couchbase.DataStructures.IPersistentQueue`1"/> backed by a given document.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="docId">Document ID which backs the queue.</param>
            <param name="options">Behavior options for the queue implementation.</param>
            <returns>The persistent queue.</returns>
            <remarks>
            If using a <see cref="T:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer"/> backed by a <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
            be sure to include <see cref="T:System.Collections.Generic.IList`1"/> in a <see cref="T:System.Text.Json.Serialization.JsonSerializableAttribute"/> on the context.
            </remarks>
        </member>
        <member name="M:Couchbase.KeyValue.CollectionExtensions.Dictionary``1(Couchbase.KeyValue.ICouchbaseCollection,System.String)">
            <summary>
            Get an <see cref="T:Couchbase.DataStructures.IPersistentDictionary`1"/> backed by a given document.
            </summary>
            <param name="collection">Couchbase collection.</param>
            <param name="docId">Document ID which backs the dictionary.</param>
            <returns>The persistent dictionary.</returns>
            <remarks>
            If using a <see cref="T:Couchbase.Core.IO.Serializers.SystemTextJsonSerializer"/> backed by a <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
            be sure to include <c>IDictionary&lt;string, TValue&gt;</c> in a <see cref="T:System.Text.Json.Serialization.JsonSerializableAttribute"/> on the context.
            </remarks>
        </member>
        <member name="P:Couchbase.KeyValue.CouchbaseCollection.ScopeName">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.CouchbaseCollection.Cid">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.CouchbaseCollection.Name">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.CouchbaseCollection.Scope">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.CouchbaseCollection.Binary">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.CouchbaseCollection.IsDefaultCollection">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.GetAsync(System.String,Couchbase.KeyValue.GetOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.ExistsAsync(System.String,Couchbase.KeyValue.ExistsOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.InsertAsync``1(System.String,``0,Couchbase.KeyValue.InsertOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.ReplaceAsync``1(System.String,``0,Couchbase.KeyValue.ReplaceOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.RemoveAsync(System.String,Couchbase.KeyValue.RemoveOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.UnlockAsync``1(System.String,System.UInt64,Couchbase.KeyValue.UnlockOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.UnlockAsync(System.String,System.UInt64,Couchbase.KeyValue.UnlockOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.TouchAsync(System.String,System.TimeSpan,Couchbase.KeyValue.TouchOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.TouchWithCasAsync(System.String,System.TimeSpan,Couchbase.KeyValue.TouchOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.GetAndTouchAsync(System.String,System.TimeSpan,Couchbase.KeyValue.GetAndTouchOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.GetAndLockAsync(System.String,System.TimeSpan,Couchbase.KeyValue.GetAndLockOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.UpsertAsync``1(System.String,``0,Couchbase.KeyValue.UpsertOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.LookupInAsync(System.String,System.Collections.Generic.IEnumerable{Couchbase.KeyValue.LookupInSpec},Couchbase.KeyValue.LookupInOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.MutateInAsync(System.String,System.Collections.Generic.IEnumerable{Couchbase.KeyValue.MutateInSpec},Couchbase.KeyValue.MutateInOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.AppendAsync(System.String,System.Byte[],Couchbase.KeyValue.AppendOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.PrependAsync(System.String,System.Byte[],Couchbase.KeyValue.PrependOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.IncrementAsync(System.String,Couchbase.KeyValue.IncrementOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.DecrementAsync(System.String,Couchbase.KeyValue.DecrementOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.GetAnyReplicaAsync(System.String,Couchbase.KeyValue.GetAnyReplicaOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.GetAllReplicasAsync(System.String,Couchbase.KeyValue.GetAllReplicasOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.RequiresCid">
            <summary>
            Servers 7.0 and above support collections and require the CID to be fetched.
            Earlier versions of the server may support collections in dev-preview mode so
            we check to see if its been enabled via the results of the HELLO command.
            </summary>
            <returns>true if the server supports collections and the CID is null.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.CouchbaseCollection.GetCidAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends the scope/collection in the key or the operation body as content based on the flag.
            </summary>
            <param name="fullyQualifiedName">The fully qualified scope.collection name.</param>
            <param name="sendAsBody">true to send as the body; false in the key for dev-preview (pre-7.0 servers). </param>
            <param name="retryIfFailure">true to retry the CID operation if it fails.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.KeyValue.DurabilityLevel">
            <summary>
            The required number of nodes which the mutation must be replicated to (and/or persisted to) for durability requirements to be met. Possible values:
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.DurabilityLevel.None">
            <summary>
            No durability requirements.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.DurabilityLevel.Majority">
            <summary>
            Mutation must be replicated to (i.e. held in memory of that node) a majority of the configured nodes of the bucket.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.DurabilityLevel.MajorityAndPersistToActive">
            <summary>
            Same as majority, but additionally persisted to the active node.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.DurabilityLevel.PersistToMajority">
            <summary>
            Mutation must be persisted to (i.e. written and fsync'd to disk) a majority of the configured nodes of the bucket.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.ExpressionVisitors.LambdaSimplifyingExpressionVisitor">
            <summary>
            Simplifies an expression tree by evaluating any branches of the tree that do not include
            lambda parameter references.  This will remove references to variables external to the lambda
            by converting them to constants, perform arithmetic, and execute method calls as needed.
            For example, a call to "str.ToUpper()" where string is an external variable would be simplified
            to a <see cref="T:System.Linq.Expressions.ConstantExpression"/> containing the uppercase version of str.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.ExpressionVisitors.LambdaSimplifyingExpressionVisitor.Simplify(System.Linq.Expressions.Expression)">
            <summary>
            Simplifies an expression tree by evaluating any branches of the tree that do not include
            lambda parameter references.  This will remove references to variables external to the lambda
            by converting them to constants, perform arithmetic, and execute method calls as needed.
            For example, a call to "str.ToUpper()" where string is an external variable would be simplified
            to a <see cref="T:System.Linq.Expressions.ConstantExpression"/> containing the uppercase version of str.
            </summary>
            <param name="expression">Expression to simplify.</param>
            <returns>The simplified expression.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ExpressionVisitors.LambdaSimplifyingExpressionVisitor.#ctor">
            <summary>
            Private constructor, only accessible via static method <see cref="M:Couchbase.KeyValue.ExpressionVisitors.LambdaSimplifyingExpressionVisitor.Simplify(System.Linq.Expressions.Expression)"/>.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.ExpressionVisitors.LambdaSimplifyingExpressionVisitor.VisitChildren(System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)">
            <summary>
            Visits a list of children to see if they are evaluatable or not.  If a branch of the tree
            can be evaluated but another cannot, simplifies the branches that can be evaluated to
            constants.  Modifies the provided collection with the new expressions.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.ExpressionVisitors.LambdaSimplifyingExpressionVisitor.VisitChildren(System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)">
            <summary>
            Visits a list of children to see if they are evaluatable or not.  If a branch of the tree
            can be evaluated but another cannot, simplifies the branches that can be evaluated to
            constants.  Modifies the provided collection with the new expressions.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.ExpressionVisitors.LambdaSimplifyingExpressionVisitor.VisitChildren(System.Span{System.Linq.Expressions.Expression})">
            <summary>
            Visits a list of children to see if they are evaluatable or not.  If a branch of the tree
            can be evaluated but another cannot, simplifies the branches that can be evaluated to
            constants.  Modifies the provided collection with the new expressions.
            </summary>
            <param name="children">List of children to evaluate.  Null children are skipped.  This list is updated with the new children.</param>
        </member>
        <member name="T:Couchbase.KeyValue.ExpressionVisitors.SubDocumentPathExpressionVisitor">
            <summary>
            Parses an expression tree which navigates a document to return the path to the sub document
            being referenced.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.ExpressionVisitors.SubDocumentPathExpressionVisitor.Path">
            <summary>
            After visiting an expression tree, contains the path to the sub document.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.ExpressionVisitors.SubDocumentPathExpressionVisitor.#ctor(Couchbase.Core.IO.Serializers.IExtendedTypeSerializer)">
            <summary>
            Creates a new SubDocumentPathExpressionVisitor.
            </summary>
            <param name="serializer"><see cref="T:Couchbase.Core.IO.Serializers.IExtendedTypeSerializer"/> used for member name resolution.</param>
        </member>
        <member name="M:Couchbase.KeyValue.ExpressionVisitors.SubDocumentPathExpressionVisitor.WriteEscapedString(System.String)">
            <summary>
            Escapes a string using the N1QL variant of JSON escaping rules, and writes it to the path.
            </summary>
            <param name="str">String to escape and write.</param>
        </member>
        <member name="M:Couchbase.KeyValue.ExpressionVisitors.SubDocumentPathExpressionVisitor.GetEscapedString(System.String)">
            <summary>
            For unit testing of WriteEscapedString only.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.ICouchbaseCollection">
            <summary>
            Represents a collection of JSON objects in Couchbase.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.ICouchbaseCollection.Cid">
            <summary>
            The identifier for the collection.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.ICouchbaseCollection.Name">
            <summary>
            The name of the collection.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.ICouchbaseCollection.Scope">
            <summary>
            Scope which owns this collection.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.ICouchbaseCollection.Binary">
            <summary>
            A special collection for non-JSON operations; maps to binary operation in the older API's.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.ICouchbaseCollection.IsDefaultCollection">
            <summary>
            Returns true if this is the default collection in the default scope.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.GetAsync(System.String,Couchbase.KeyValue.GetOptions)">
            <summary>
            Fetches a value from the server if it exists.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="options">Optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the JSON object or scalar encapsulated in an <see cref="T:Couchbase.KeyValue.IGetResult"></see> API object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.ExistsAsync(System.String,Couchbase.KeyValue.ExistsOptions)">
            <summary>
            Returns true if a document exists for a given id, otherwise false.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing an <see cref="T:Couchbase.KeyValue.IExistsResult"/> object with a boolean value indicating the presence of the document.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.UpsertAsync``1(System.String,``0,Couchbase.KeyValue.UpsertOptions)">
            <summary>
            Insert a new document or overwrite an existing document in Couchbase server. Maps to Memcached Set command.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of content to upsert.</typeparam>
            <param name="id">The id of the document.</param>
            <param name="content">The content or document body.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing an <see cref="T:Couchbase.KeyValue.IMutationResult"/> object if successful otherwise an exception with details for the reason the operation failed.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.InsertAsync``1(System.String,``0,Couchbase.KeyValue.InsertOptions)">
            <summary>
            Insert a JSON document, failing if it already exists. Maps to Memcached Add command.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of content to insert.</typeparam>
            <param name="id">The id of the document.</param>
            <param name="content">The content or document body.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing a IMutationResult object if successful otherwise an exception with details for the reason the operation failed.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.ReplaceAsync``1(System.String,``0,Couchbase.KeyValue.ReplaceOptions)">
            <summary>
            Replaces an existing document in Couchbase server, failing if it does not exist. Maps to Memcached SET command.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of content to insert.</typeparam>
            <param name="id">The id of the document.</param>
            <param name="content">The content or document body.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Couchbase.KeyValue.IMutationResult"/> object if successful otherwise an exception with details for the reason the operation failed.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.RemoveAsync(System.String,Couchbase.KeyValue.RemoveOptions)">
            <summary>
            Removes an existing document in Couchbase server, failing if it does not exist.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> object for awaiting.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.UnlockAsync(System.String,System.UInt64,Couchbase.KeyValue.UnlockOptions)">
            <summary>
            Unlocks a document pessimistically locked by a GetAndLock operation.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="cas">The CAS from the GetAndLock operation.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> object for awaiting.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.TouchAsync(System.String,System.TimeSpan,Couchbase.KeyValue.TouchOptions)">
            <summary>
            Updates the expiration a document given an id, without modifying or returning its value.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="expiry">The <see cref="T:System.TimeSpan"/> expiry of the new expiration time.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> object for awaiting.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.TouchWithCasAsync(System.String,System.TimeSpan,Couchbase.KeyValue.TouchOptions)">
            <summary>
            Updates the expiration a document given an id, without modifying or returning its value.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="expiry">The <see cref="T:System.TimeSpan"/> expiry of the new expiration time.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> object for awaiting,
            with a <see cref="T:Couchbase.KeyValue.IMutationResult"/> containing a Cas value.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.GetAndTouchAsync(System.String,System.TimeSpan,Couchbase.KeyValue.GetAndTouchOptions)">
            <summary>
            Gets a document for a given id and extends its expiration.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="expiry">The duration of the lock.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> The JSON object or scalar encapsulated in a <see cref="T:Couchbase.KeyValue.IGetResult"/> API object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.GetAndLockAsync(System.String,System.TimeSpan,Couchbase.KeyValue.GetAndLockOptions)">
            <summary>
            Gets a document for a given id and places a pessimistic lock on it for mutations.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="expiry">The duration of the lock.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> The JSON object or scalar encapsulated in a <see cref="T:Couchbase.KeyValue.IGetResult"/> API object.</returns>
            <remarks> The maximum amount of time a key can be locked is 30 seconds; any parameter you provide that is more than 30 seconds will be set
            to 30 seconds; negative numbers will be interpreted as 30 seconds also.</remarks>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.GetAnyReplicaAsync(System.String,Couchbase.KeyValue.GetAnyReplicaOptions)">
            <summary>
            Gets a document for a given id, leveraging both the active and all available replicas.
            This method follows the same semantics of GetAllReplicas (including the fetch from ACTIVE),
            but returns the first response as opposed to returning all responses.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> The JSON object or scalar encapsulated in a <see cref="T:Couchbase.KeyValue.IGetReplicaResult"/> API object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.GetAllReplicasAsync(System.String,Couchbase.KeyValue.GetAllReplicasOptions)">
            <summary>
            Gets a list of document data from the server, leveraging both the active and all available
            replicas.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the JSON object or scalar encapsulated in a list of <see cref="T:Couchbase.KeyValue.IGetReplicaResult"/> API objects.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.LookupInAsync(System.String,System.Collections.Generic.IEnumerable{Couchbase.KeyValue.LookupInSpec},Couchbase.KeyValue.LookupInOptions)">
            <summary>
            Allows the chaining of Sub-Document fetch operations like, Get("path") and Exists("path") into a single atomic fetch.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="specs">An array of fetch operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the lookup as an <see cref="T:Couchbase.KeyValue.ILookupInResult"/> object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.LookupInAnyReplicaAsync(System.String,System.Collections.Generic.IEnumerable{Couchbase.KeyValue.LookupInSpec},Couchbase.KeyValue.LookupInAnyReplicaOptions)">
            <summary>
            Gets a stream of document data from the server using LookupIn, leveraging both the active and all available replicas, returning only the first result.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="specs">An array of fetch operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <param name="options">Any optional parameters.</param>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.LookupInAllReplicasAsync(System.String,System.Collections.Generic.IEnumerable{Couchbase.KeyValue.LookupInSpec},Couchbase.KeyValue.LookupInAllReplicasOptions)">
            <summary>
            Gets a stream of document data from the server using LookupIn, leveraging both the active and all available replicas.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="specs">An array of fetch operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <param name="options">Any optional parameters.</param>
        </member>
        <member name="M:Couchbase.KeyValue.ICouchbaseCollection.MutateInAsync(System.String,System.Collections.Generic.IEnumerable{Couchbase.KeyValue.MutateInSpec},Couchbase.KeyValue.MutateInOptions)">
            <summary>
            Allows the chaining of Sub-Document mutation operations on a specific document in a single atomic transaction.
            </summary>
            <param name="id">The id of the document.</param>
            <param name="specs">An array of fetch operations - requires at least one: exists, get, count. There is a server enforced maximum of 16 sub document operations allowed per call.</param>
            <param name="options">Any optional parameters.</param>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> containing the results of the mutation as an <see cref="T:Couchbase.KeyValue.IMutateInResult"/> object.</returns>
        </member>
        <member name="P:Couchbase.KeyValue.ICouchbaseCollection.QueryIndexes">
            <summary>
            Provides access to the indexes at the Collection level.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.IInternalCollection">
            <summary>
            Interface for any non-public methods or properties that are needed on a <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/>.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.IInternalCollection.Cid">
            <summary>
            Gets or sets the identifier for a <see cref="T:Couchbase.KeyValue.ICouchbaseCollection"/>.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.ILookupInResult">
            <summary>
            Result of a sub document LookupIn operation.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.ILookupInResult.IndexOf(System.String)">
            <summary>
            Returns the index of a particular path.
            </summary>
            <param name="path">Path to find.</param>
            <returns>The index of the path, or -1 if not found.</returns>
        </member>
        <member name="T:Couchbase.KeyValue.ILookupInReplicaResult">
            <summary>
            Result of a sub document LookupIn operation against any/all replicas.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.ILookupInReplicaResult.IsReplica">
            <summary>
            Gets a value indicating whether the result is from a replica node.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.ILookupInResult`1">
            <inheritdoc cref="T:Couchbase.KeyValue.ILookupInResult"/>
            <typeparam name="TDocument">Type of the document.</typeparam>
        </member>
        <member name="T:Couchbase.KeyValue.ILookupInReplicaResult`1">
            <inheritdoc cref="T:Couchbase.KeyValue.ILookupInReplicaResult"/>
            <typeparam name="TDocument">Type of the document.</typeparam>
        </member>
        <member name="T:Couchbase.KeyValue.IMutateInResult">
            <summary>
            Result of a sub document MutateIn operation.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.IMutateInResult.ContentAs``1(System.Int32)">
            <summary>
            Gets the content of a mutation as the specified type.
            </summary>
            <typeparam name="T">The type of the content</typeparam>
            <param name="index">The spec index.</param>
            <returns>The content, if the operation was an Increment or Decrement, otherwise <c>default(T)</c>.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.IMutateInResult.IndexOf(System.String)">
            <summary>
            Returns the index of a particular path.
            </summary>
            <param name="path">Path to find.</param>
            <returns>The index of the path, or -1 if not found.</returns>
        </member>
        <member name="T:Couchbase.KeyValue.IMutateInResult`1">
            <inheritdoc cref="T:Couchbase.KeyValue.IMutateInResult"/>
            <typeparam name="TDocument">Type of the document.</typeparam>
        </member>
        <member name="T:Couchbase.KeyValue.IMutationMacro">
            <summary>
            Marker interface for MutationMacro operations to be done by the server.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.IPreMappedVBucketOperation">
            <summary>
            An interface indicating the operation has a VBucketId mapped before being sent, and may have an empty Key.
            </summary>
            <remarks>Currently only RangeScan operations.</remarks>
        </member>
        <member name="P:Couchbase.KeyValue.IResponseStatus.Status">
            <summary>
            The <see cref="T:Couchbase.Core.IO.Operations.ResponseStatus"/> returned by the server for each operation.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.IScope">
            <remarks>Volatile</remarks>
        </member>
        <member name="P:Couchbase.KeyValue.IScope.Bucket">
            <summary>
            The bucket that owns this scope.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.IScope.IsDefaultScope">
            <summary>
            Returns true if this is the default scope.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.IScope.QueryAsync``1(System.String,Couchbase.Query.QueryOptions)">
            <summary>
            Scope level querying of collections.
            </summary>
            <typeparam name="T">The record type returned by the query.</typeparam>
            <param name="statement">The N1QL statement to be executed.</param>
            <param name="options">Any optional parameters to pass with the query.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.KeyValue.IScope.AnalyticsQueryAsync``1(System.String,Couchbase.Analytics.AnalyticsOptions)">
            <summary>
            Scope level analytics querying of collections.
            </summary>
            <typeparam name="T">The record type returned by the query.</typeparam>
            <param name="statement">The N1QL statement to be executed.</param>
            <param name="options">Any optional parameters to pass with the query.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.KeyValue.IScope.SearchIndexes">
            <summary>
            Gets a management interface for scope-level FTS and Vector Search indexes.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.IScope.EventingFunctions">
            <summary>
            Gets a management interface for scope-level Eventing Functions.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.ITimeoutOptions">
            <summary>
            Applied to key/value options which may have a cancellation token or timeout.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.ITranscoderOverrideOptions">
            <summary>
            Applied to key/value options which may override the default <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/>.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.ITryGetResult">
            <summary>
            Provides an interface for supporting the state of a document if the server
            returns a KeyNotFound status, as opposed to throwing a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/>
            like in the regular GetAsync methods.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.ITryGetResult.Exists">
            <summary>
            If false, the document does not exist on the server for a given key.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.ITryMutationResult">
            <summary>
            Provides an interface for mutating a document, but instead of throwing
            <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> exception if the document key is
            not found, allows for the existence to be checked via <see cref="P:Couchbase.KeyValue.ITryMutationResult.Exists"/>.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.ITryMutationResult.Exists">
            <summary>
            If false, the document does not exist on the server for a given key.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.ITryRemoveResult">
            <summary>
            Provides an interface for removing a document, but instead of throwing
            <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> exception if the document key is
            not found, allows for the existence to be checked via <see cref="P:Couchbase.KeyValue.ITryRemoveResult.Exists"/>.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.ITryRemoveResult.Exists">
            <summary>
            If false, the document does not exist on the server for a given key.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.ITryTouchResult">
            <summary>
            Provides an interface for 'touching' a document, but instead of throwing
            <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> exception if the document key is
            not found, allows for the existence to be checked via <see cref="P:Couchbase.KeyValue.ITryTouchResult.Exists"/>.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.ITryTouchResult.Exists">
            <summary>
            If false, the document does not exist on the server for a given key.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.ITryTouchResult.MutationResult">
            <summary>
            The mutation result containing the Cas value after the Touch operation.
            If Exists is false, this will be empty.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.ITryUnlockResult">
            <summary>
            Provides an interface for unlocking a locked document, but instead of throwing
            <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> exception if the document key is
            not found, allows for the existence to be checked via <see cref="P:Couchbase.KeyValue.ITryUnlockResult.Exists"/>.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.ITryUnlockResult.Exists">
            <summary>
            If false, the document does not exist on the server for a given key.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInResult.IndexOf(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.LookupInResult.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.LookupInResultExtensions">
            <summary>
            Extensions for <see cref="T:Couchbase.KeyValue.ILookupInResult"/>.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInResultExtensions.ContentAs``2(Couchbase.KeyValue.ILookupInResult{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get the result type <typeparamref name="TContent"/> from a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="result"><see cref="T:Couchbase.KeyValue.ILookupInResult`1"/> where the the subdocument lookup was returned.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.
            This must be a path that was provided originally to the <see cref="T:Couchbase.KeyValue.LookupInSpecBuilder`1"/>.</param>
            <returns>The subdocument content.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="result"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInResultExtensions.Exists``2(Couchbase.KeyValue.ILookupInResult{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get the existence result for a fragment of type <typeparamref name="TContent"/> from a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="result"><see cref="T:Couchbase.KeyValue.ILookupInResult`1"/> where the the subdocument lookup was returned.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.
            This must be a path that was provided originally to the <see cref="T:Couchbase.KeyValue.LookupInSpecBuilder`1"/>.</param>
            <returns>True if the subdocument exists.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="result"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="T:Couchbase.KeyValue.LookupInResult`1">
            <summary>
            Wrapper for a <see cref="T:Couchbase.KeyValue.ILookupInResult"/> which adds a known document type.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.LookupInResult`1.Cas">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.LookupInResult`1.Exists(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.LookupInResult`1.IsDeleted">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.LookupInResult`1.ContentAs``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.LookupInResult`1.IndexOf(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.LookupInResult`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.LookupInSpec.Clone">
            <summary>
            Creates a new object that is a copy of the current instance excluding the Byte and Status fields.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Couchbase.KeyValue.LookupInSpecBuilder">
            <summary>
            A builder for chaining together lookup specs into a JSON document.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInSpecBuilder.Get(System.String,System.Boolean)">
            <summary>
            Fetches the value of an attribute for a given path.
            </summary>
            <param name="path">The path to the JSON attribute.</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.LookupInSpecBuilder"/> for chaining specs.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInSpecBuilder.Exists(System.String,System.Boolean)">
            <summary>
            Checks for the existence of a value given a path.
            </summary>
            <param name="path">The path to the JSON attribute.</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.LookupInSpecBuilder"/> for chaining specs.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInSpecBuilder.Count(System.String,System.Boolean)">
            <summary>
            Provides a count of a dictionary or list attribute given a JSON path.
            </summary>
            <param name="path">The path to the JSON attribute.</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.LookupInSpecBuilder"/> for chaining specs.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInSpecBuilder.GetFull">
            <summary>
            Fetches the entire JSON document for a key.
            </summary>
            <returns>A <see cref="T:Couchbase.KeyValue.LookupInSpecBuilder"/> for chaining specs.</returns>
        </member>
        <member name="T:Couchbase.KeyValue.LookupInSpecBuilderExtensions">
            <summary>
            Extensions for <see cref="T:Couchbase.KeyValue.LookupInSpecBuilder"/>.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInSpecBuilderExtensions.Get``2(Couchbase.KeyValue.LookupInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get a fragment of type <typeparamref name="TContent"/> from a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.LookupInSpecBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInSpecBuilderExtensions.Exists``2(Couchbase.KeyValue.LookupInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Check for existence of a fragment of type <typeparamref name="TContent"/> within a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.LookupInSpecBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInSpecBuilderExtensions.Count``2(Couchbase.KeyValue.LookupInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get the number of items in a fragment of type <typeparamref name="TContent"/> within a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.LookupInSpecBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="T:Couchbase.KeyValue.LookupInSpecBuilder`1">
            <summary>
            Strongly typed version of <see cref="T:Couchbase.KeyValue.LookupInSpecBuilder"/>.
            </summary>
            <typeparam name="TDocument">Type of the whole document.</typeparam>
        </member>
        <member name="P:Couchbase.KeyValue.LookupInSpecBuilder`1.Serializer">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.LookupInSpecBuilder`1.#ctor(Couchbase.Core.IO.Serializers.ITypeSerializer)">
            <summary>
            Creates a new LookupInSpecBuilder.
            </summary>
            <param name="serializer">Type serializer used for generating paths from lambda expressions.</param>
        </member>
        <member name="P:Couchbase.KeyValue.MutateInResult.Serializer">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.MutateInResult.IndexOf(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.MutateInResult.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.MutateInResultExtensions">
            <summary>
            Extensions for <see cref="T:Couchbase.KeyValue.IMutateInResult"/>.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInResultExtensions.ContentAs``2(Couchbase.KeyValue.IMutateInResult{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get the result type <typeparamref name="TContent"/> from a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="result"><see cref="T:Couchbase.KeyValue.IMutateInResult`1"/> where the the subdocument mutation result was returned.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.
            This must be a path that was provided originally to the <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/>.</param>
            <returns>The subdocument content.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="result"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="T:Couchbase.KeyValue.MutateInResult`1">
            <summary>
            Wrapper for a <see cref="T:Couchbase.KeyValue.IMutateInResult"/> which adds a known document type.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.MutateInResult`1.Cas">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.MutateInResult`1.MutationToken">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.MutateInResult`1.Serializer">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.MutateInResult`1.ContentAs``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.MutateInResult`1.IndexOf(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.MutateInResult`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpec.WriteSpecValue(Couchbase.Core.IO.Operations.OperationBuilder,Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Serializes the <see cref="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.Value" /> to the <see cref="T:Couchbase.Core.IO.Operations.OperationBuilder"/> using the <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/>.
            </summary>
            <param name="builder">Builder to serialize to.</param>
            <param name="transcoder">Transcoder to use.</param>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpec.Clone">
            <summary>
            Creates a new object that is a copy of the current instance excluding the Byte and Status fields.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Couchbase.KeyValue.MutateInSpecBuilder">
            <summary>
            A builder for generating an array of mutation Sub-Document operations.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.Insert``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
            Inserts an element into a document, failing if it exists.
            </summary>
            <typeparam name="T">The type of the value being inserted.</typeparam>
            <param name="path">The path to the JSON attribute.</param>
            <param name="value">The value of type "T".</param>
            <param name="createPath">True to create the path if it doesn't exist.</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.Upsert``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
            Inserts an element into a document, overriding the value if it exists
            </summary>
            <typeparam name="T">The type of the value being inserted.</typeparam>
            <param name="path">The path to the JSON attribute.</param>
            <param name="value">The value of type "T".</param>
            <param name="createPath">True to create the path if it doesn't exist.</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.Replace``1(System.String,``0,System.Boolean)">
            <summary>
            Replaces an element  in a document, failing if it does not exist.
            </summary>
            <typeparam name="T">The type of the value being inserted.</typeparam>
            <param name="path">The path to the JSON attribute.</param>
            <param name="value">The value of type "T".</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.Remove(System.String,System.Boolean)">
            <summary>
             Removes an element in a document.
            </summary>
            /// <param name="path">The path to the JSON attribute.</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.ArrayAppend``1(System.String,``0[],System.Boolean,System.Boolean)">
            <summary>
             Inserts multiple values to the end of an array element in a document.
            </summary>
            <typeparam name="T">The type of the value being inserted.</typeparam>
            <param name="path">The path to the JSON attribute.</param>
            <param name="values">The values to insert.</param>
            <param name="createPath">True to create the path if it doesn't exist.</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.ArrayAppend``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
            Inserts an item to the end of an array element in a document.
            </summary>
            <typeparam name="T">The type of the value being inserted.</typeparam>
            <param name="path">The path to the JSON attribute.</param>
            <param name="value">The value to insert.</param>
            <param name="createPath">True to create the path if it doesn't exist.</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.ArrayPrepend``1(System.String,``0[],System.Boolean,System.Boolean)">
            <summary>
            Inserts multiple values to the beginning of an array element in a document.
            </summary>
            <typeparam name="T">The type of the value being inserted.</typeparam>
            <param name="path">The path to the JSON attribute.</param>
            <param name="values">The values to insert.</param>
            <param name="createParents"> Maps to 0x01 if true, otherwise omitted - create the path if it doesn't exist.</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.ArrayPrepend``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
            Inserts an item to the beginning of an array element in a document.
            </summary>
            <typeparam name="T">The type of the value being inserted.</typeparam>
            <param name="path">The path to the JSON attribute.</param>
            <param name="value">The value to insert.</param>
            <param name="createParents"> Maps to 0x01 if true, otherwise omitted - create the path if it doesn't exist.</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.ArrayInsert``1(System.String,``0[],System.Boolean,System.Boolean)">
            <summary>
            Inserts multiple values to an array element in a document given an index
            </summary>
            <typeparam name="T">The type of the value being inserted.</typeparam>
            <param name="path">The path to the JSON attribute.</param>
            <param name="values">The values to insert.</param>
            <param name="createParents"> Maps to 0x01 if true, otherwise omitted - create the path if it doesn't exist.</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.ArrayInsert``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
            Inserts an item to an array element in a document given an index
            </summary>
            <typeparam name="T">The type of the value being inserted.</typeparam>
            <param name="path">The path to the JSON attribute.</param>
            <param name="value">The value to insert.</param>
            <param name="createParents"> Maps to 0x01 if true, otherwise omitted - create the path if it doesn't exist.</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.ArrayAddUnique``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
            Adds a value into an array element if the value does not already exist.
            </summary>
            <typeparam name="T">The type of the value being inserted.</typeparam>
            <param name="path">The path to the JSON attribute.</param>
            <param name="value">The value to insert.</param>
            <param name="createPath">True to create the path if it doesn't exist.</param>
            <param name="isXattr">true if the path is an xAttr; otherwise false.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.Increment(System.String,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Performs an arithmetic increment or decrement on a numeric element within a document.
            </summary>
            <param name="path">The path to the element.</param>
            <param name="delta"> the amount to increase the value by</param>
            <param name="createPath"></param>
            <param name="isXattr"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.Increment(System.String,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Performs an arithmetic increment or decrement on a numeric element within a document.
            </summary>
            <param name="path">The path to the element.</param>
            <param name="delta"> the amount to increase the value by</param>
            <param name="createPath"></param>
            <param name="isXattr"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.Decrement(System.String,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Performs an arithmetic increment or decrement on a numeric element within a document.
            </summary>
            <param name="path">The path to the element.</param>
            <param name="delta"> the amount to decrease the value by</param>
            <param name="createPath"></param>
            <param name="isXattr"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder.Decrement(System.String,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Performs an arithmetic increment or decrement on a numeric element within a document.
            </summary>
            <param name="path">The path to the element.</param>
            <param name="delta"> the amount to decrease the value by</param>
            <param name="createPath"></param>
            <param name="isXattr"></param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.KeyValue.MutateInSpecBuilderExtensions">
            <summary>
            Extensions for <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilderExtensions.Insert``2(Couchbase.KeyValue.MutateInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean)">
            <summary>
            Insert a fragment of type <typeparamref name="TContent"/> into a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/> where the the subdocument mutation is being built.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.</param>
            <param name="value">Value to insert at path.</param>
            <param name="createPath">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilderExtensions.Upsert``2(Couchbase.KeyValue.MutateInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean)">
            <summary>
            Update or insert a fragment of type <typeparamref name="TContent"/> into a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/> where the the subdocument mutation is being built.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.</param>
            <param name="value">Value to update or insert at <paramref name="path"/>.</param>
            <param name="createPath">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilderExtensions.Replace``2(Couchbase.KeyValue.MutateInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Replace a fragment of type <typeparamref name="TContent"/> in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/> where the the subdocument mutation is being built.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.</param>
            <param name="value">Value to replace at <paramref name="path"/>.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilderExtensions.Remove``2(Couchbase.KeyValue.MutateInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Remove a fragment of type <typeparamref name="TContent"/> from a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/> where the the subdocument mutation is being built.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilderExtensions.ArrayAppend``3(Couchbase.KeyValue.MutateInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``2,System.Boolean)">
            <summary>
            Push a fragment of type <typeparamref name="TContent"/> into the back of an array in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the array within the parent document.</typeparam>
            <typeparam name="TElement">Type of the array element being pushed.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/> where the the subdocument mutation is being built.</param>
            <param name="path">Lambda expression path that navigates to the array from the parent document.</param>
            <param name="value">Value to push into the array.</param>
            <param name="createPath">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilderExtensions.ArrayPrepend``3(Couchbase.KeyValue.MutateInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``2,System.Boolean)">
            <summary>
            Push a fragment of type <typeparamref name="TContent"/> into the front of an array in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the array within the parent document.</typeparam>
            <typeparam name="TElement">Type of the array element being pushed.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/> where the the subdocument mutation is being built.</param>
            <param name="path">Lambda expression path that navigates to the array from the parent document.</param>
            <param name="value">Value to push into the array.</param>
            <param name="createPath">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilderExtensions.ArrayInsert``2(Couchbase.KeyValue.MutateInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Insert a fragment of type <typeparamref name="TElement"/> into an array in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TElement">Type of the array element being inserted.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/> where the the subdocument mutation is being built.</param>
            <param name="path">Lambda expression path that navigates to the array element from the parent document.</param>
            <param name="value">Value to insert into the array.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilderExtensions.ArrayAddUnique``3(Couchbase.KeyValue.MutateInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``2,System.Boolean)">
            <summary>
            Add a unique fragment of type <typeparamref name="TContent"/> into an array in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the array within the parent document.</typeparam>
            <typeparam name="TElement">Type of the array element being added.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/> where the the subdocument mutation is being built.</param>
            <param name="path">Lambda expression path that navigates to the array from the parent document.</param>
            <param name="value">Value to insert into the array.</param>
            <param name="createPath">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilderExtensions.Increment``2(Couchbase.KeyValue.MutateInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int64,System.Boolean)">
            <summary>
            Increment a counter of type <typeparamref name="TContent"/> in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/> where the the subdocument mutation is being built.</param>
            <param name="path">Lambda expression path that navigates to the counter from the parent document.</param>
            <param name="delta">Amount to increment the counter.</param>
            <param name="createPath">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilderExtensions.Increment``2(Couchbase.KeyValue.MutateInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.UInt64,System.Boolean)">
            <summary>
            Increment a counter of type <typeparamref name="TContent"/> in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/> where the the subdocument mutation is being built.</param>
            <param name="path">Lambda expression path that navigates to the counter from the parent document.</param>
            <param name="delta">Amount to increment the counter.</param>
            <param name="createPath">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilderExtensions.Decrement``2(Couchbase.KeyValue.MutateInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int64,System.Boolean)">
            <summary>
            Decrement a counter of type <typeparamref name="TContent"/> in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/> where the the subdocument mutation is being built.</param>
            <param name="path">Lambda expression path that navigates to the counter from the parent document.</param>
            <param name="delta">Amount to decrement the counter.</param>
            <param name="createPath">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilderExtensions.Decrement``2(Couchbase.KeyValue.MutateInSpecBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.UInt64,System.Boolean)">
            <summary>
            Decrement a counter of type <typeparamref name="TContent"/> in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.KeyValue.MutateInSpecBuilder`1"/> where the the subdocument mutation is being built.</param>
            <param name="path">Lambda expression path that navigates to the counter from the parent document.</param>
            <param name="delta">Amount to decrement the counter.</param>
            <param name="createPath">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="T:Couchbase.KeyValue.MutateInSpecBuilder`1">
            <summary>
            Strongly typed version of <see cref="T:Couchbase.KeyValue.MutateInSpecBuilder"/>.
            </summary>
            <typeparam name="TDocument">Type of the whole document.</typeparam>
        </member>
        <member name="P:Couchbase.KeyValue.MutateInSpecBuilder`1.Serializer">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpecBuilder`1.#ctor(Couchbase.Core.IO.Serializers.ITypeSerializer)">
            <summary>
            Creates a new MutateInSpecBuilder.
            </summary>
            <param name="serializer">Type serializer used for generating paths from lambda expressions.</param>
        </member>
        <member name="T:Couchbase.KeyValue.MutateInSpec`1">
            <summary>
            Strongly-typed variant of <see cref="T:Couchbase.KeyValue.MutateInSpec"/>.
            </summary>
            <typeparam name="T">Type of <see cref="P:Couchbase.Core.IO.Operations.SubDocument.OperationSpec.Value"/>.</typeparam>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpec`1.WriteSpecValue(Couchbase.Core.IO.Operations.OperationBuilder,Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.MutateInSpec`1.Clone">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.MutationMacro">
            <summary>
            Server defined MutationMacro values to be expanded by the server.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.MutationMacro.Cas">
            <summary>
            The server will perform a CAS macro expansion.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.MutationMacro.SeqNo">
            <summary>
            The server will perform a SeqNo macro expansion.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.MutationMacro.ValueCRC32c">
            <summary>
            The server will do a ValueCRC32c macro expansion.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.MutationMacroCas">
            <summary>
            Perform a macro expansion for the CAS value on the server.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.MutationMacroSeqNo">
            <summary>
            Perform a macro expansion for the SeqNo value on the server.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.MutationMacroValueCrc32C">
            <summary>
            Perform a macro expansion for the Value_Crc32c value on the server.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.GetOptions">
            <summary>
            Optional parameters for <see cref="M:Couchbase.KeyValue.ICouchbaseCollection.GetAsync(System.String,Couchbase.KeyValue.GetOptions)"/>
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.GetOptions.PreferReturn">
            <summary>
            Used internally to ensure that <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> is not thrown
            when the server returns KeyNotFound for the status.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.GetOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>A <see cref="T:Couchbase.KeyValue.GetOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.GetOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetOptions.Transcoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Inject a <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/> other than the default <see cref="T:Couchbase.Core.IO.Transcoders.JsonTranscoder"/>.
            </summary>
            <param name="transcoder"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetOptions.Expiry">
            <summary>
            The time for the key/value pair to exist on the server.
            </summary>
            <returns>A <see cref="T:Couchbase.KeyValue.GetOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetOptions.Projection(System.String[])">
            <summary>
            A list or array of fields to project - if called will switch to subdoc and only fetch the fields requested.
            If the number of fields is > 16, then it will perform a full-doc lookup instead.
            </summary>
            <param name="fields"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.GetOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.GetOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.GetOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.GetOptions"/> instance for chaining.</returns>
        </member>
        <member name="T:Couchbase.KeyValue.GetAllReplicasOptions">
            <summary>
            Optional parameters for <see cref="M:Couchbase.KeyValue.ICouchbaseCollection.GetAllReplicasAsync(System.String,Couchbase.KeyValue.GetAllReplicasOptions)"/>
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.GetAllReplicasOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>A <see cref="T:Couchbase.KeyValue.GetAllReplicasOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetAllReplicasOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.GetAllReplicasOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetAllReplicasOptions.Transcoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Inject a <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/> other than the default <see cref="T:Couchbase.Core.IO.Transcoders.JsonTranscoder"/>.
            </summary>
            <param name="transcoder"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.GetAllReplicasOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetAllReplicasOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.GetAllReplicasOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.GetAllReplicasOptions"/> instance for chaining.</returns>
        </member>
        <member name="T:Couchbase.KeyValue.GetAnyReplicaOptions">
            <summary>
            Optional parameters for <see cref="M:Couchbase.KeyValue.ICouchbaseCollection.GetAnyReplicaAsync(System.String,Couchbase.KeyValue.GetAnyReplicaOptions)"/>
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.GetAnyReplicaOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.GetAnyReplicaOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetAnyReplicaOptions.Transcoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Inject a <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/> other than the default <see cref="T:Couchbase.Core.IO.Transcoders.JsonTranscoder"/>.
            </summary>
            <param name="transcoder"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.GetAnyReplicaOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetAnyReplicaOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.GetAnyReplicaOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.GetAnyReplicaOptions"/> instance for chaining.</returns>
        </member>
        <member name="T:Couchbase.KeyValue.ExistsOptions">
            <summary>
            Optional parameters for <see cref="M:Couchbase.KeyValue.ICouchbaseCollection.ExistsAsync(System.String,Couchbase.KeyValue.ExistsOptions)"/>
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.ExistsOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>A <see cref="T:Couchbase.KeyValue.ExistsOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ExistsOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ExistsOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ExistsOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.ExistsOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.UpsertOptions.PreserveTtl(System.Boolean)">
            <summary>
            Specifies whether an existing document's expiry should be preserved.
            If true, and the document exists, its expiry will not be modified.Otherwise
            the document's expiry is determined by <see cref="M:Couchbase.KeyValue.UpsertOptions.Expiry(System.TimeSpan)"/>.
            </summary>
            <remarks>The default is false.</remarks>
            <param name="preserveTtl"></param>
            <returns>An options object for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.UpsertOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>A <see cref="T:Couchbase.KeyValue.UpsertOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.UpsertOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.UpsertOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.UpsertOptions.Transcoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Inject a <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/> other than the default <see cref="T:Couchbase.Core.IO.Transcoders.JsonTranscoder"/>.
            </summary>
            <param name="transcoder"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.UpsertOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.UpsertOptions.Expiry(System.TimeSpan)">
            <summary>
            Sets the expiration for a document. By default, documents never expire - if overridden the value must be less than 50 years.
            </summary>
            <param name="expiry">The expiration for a document.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.UpsertOptions.Durability(Couchbase.KeyValue.PersistTo,Couchbase.KeyValue.ReplicateTo)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="persistTo">The durability requirement for persistence.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.UpsertOptions.Durability(Couchbase.KeyValue.DurabilityLevel)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="durabilityLevel">The <see cref="P:Couchbase.KeyValue.UpsertOptions.DurabilityLevel"/> required for persistance.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.UpsertOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.UpsertOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.UpsertOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.UpsertOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.UpsertOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.InsertOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.InsertOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.InsertOptions.Transcoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Inject a <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/> other than the default <see cref="T:Couchbase.Core.IO.Transcoders.JsonTranscoder"/>.
            </summary>
            <param name="transcoder"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.InsertOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.InsertOptions.Expiry(System.TimeSpan)">
            <summary>
            Sets the expiration for a document. By default, documents never expire - if overridden the value must be less than 50 years.
            </summary>
            <param name="expiry">The time-to-live of the document.</param>
            <returns>An options object for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.InsertOptions.Durability(Couchbase.KeyValue.PersistTo,Couchbase.KeyValue.ReplicateTo)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="persistTo">The durability requirement for persistence.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.InsertOptions.Durability(Couchbase.KeyValue.DurabilityLevel)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="durabilityLevel">The <see cref="P:Couchbase.KeyValue.InsertOptions.DurabilityLevel"/> required for persistance.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.InsertOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.InsertOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.InsertOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.InsertOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.UpsertOptions"/> instance for chaining.</returns>
        </member>
        <member name="P:Couchbase.KeyValue.ReplaceOptions.PreferReturn">
            <summary>
            Used internally to ensure that <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> is not thrown
            when the server returns KeyNotFound for the status.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.ReplaceOptions.PreserveTtl(System.Boolean)">
            <summary>
            Specifies whether an existing document's expiry should be preserved.
            If true, and the document exists, its expiry will not be modified.Otherwise
            the document's expiry is determined by <see cref="M:Couchbase.KeyValue.ReplaceOptions.Expiry(System.TimeSpan)"/>.
            </summary>
            <remarks>The default is false.</remarks>
            <param name="preserveTtl"></param>
            <returns>An options object for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ReplaceOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>A <see cref="T:Couchbase.KeyValue.ExistsOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ReplaceOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ReplaceOptions.Transcoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Inject a <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/> other than the default <see cref="T:Couchbase.Core.IO.Transcoders.JsonTranscoder"/>.
            </summary>
            <param name="transcoder"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ReplaceOptions.Expiry(System.TimeSpan)">
            <summary>
            Sets the expiration for a document. By default, documents never expire -
            if overridden the value must be less than 50 years.
            </summary>
            <param name="expiry">The time-to-live of the document.</param>
            <returns>An options object for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ReplaceOptions.Cas(System.UInt64)">
            <summary>
            Compare and Set value for optimistic locking of a document.
            </summary>
            <param name="cas">A <see cref="T:System.UInt64"/> value returned by the server in a previous operation.</param>
            <returns>An options object for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ReplaceOptions.Durability(Couchbase.KeyValue.PersistTo,Couchbase.KeyValue.ReplicateTo)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="persistTo">The durability requirement for persistence.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ReplaceOptions.Durability(Couchbase.KeyValue.DurabilityLevel)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="durabilityLevel">The <see cref="P:Couchbase.KeyValue.ReplaceOptions.DurabilityLevel"/> required for persistance.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ReplaceOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.ReplaceOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.ReplaceOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="P:Couchbase.KeyValue.RemoveOptions.PreferReturn">
            <summary>
            Used internally to ensure that <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> is not thrown
            when the server returns KeyNotFound for the status.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.RemoveOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RemoveOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RemoveOptions.Cas(System.UInt64)">
            <summary>
            Compare and Set value for optimistic locking of a document.
            </summary>
            <param name="cas">A <see cref="T:System.UInt64"/> value returned by the server in a previous operation.</param>
            <returns>An options object for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RemoveOptions.Durability(Couchbase.KeyValue.PersistTo,Couchbase.KeyValue.ReplicateTo)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="persistTo">The durability requirement for persistence.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RemoveOptions.Durability(Couchbase.KeyValue.DurabilityLevel)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="durabilityLevel">The <see cref="P:Couchbase.KeyValue.RemoveOptions.DurabilityLevel"/> required for persistance.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RemoveOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RemoveOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.RemoveOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="P:Couchbase.KeyValue.UnlockOptions.PreferReturn">
            <summary>
            Used internally to ensure that <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> is not thrown
            when the server returns KeyNotFound for the status.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.UnlockOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.UnlockOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.UnlockOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.UnlockOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.UnlockOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="P:Couchbase.KeyValue.TouchOptions.PreferReturn">
            <summary>
            Used internally to ensure that <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> is not thrown
            when the server returns KeyNotFound for the status.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.TouchOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.TouchOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.TouchOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.TouchOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.TouchOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.IncrementOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.IncrementOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.IncrementOptions.Expiry(System.TimeSpan)">
            <summary>
            The document's lifetime before being evicted by the server. By default the operation will never expire - must be set for a value less than 50 years.
            </summary>
            <param name="expiry">The <see cref="T:System.TimeSpan"/> value for expiration</param>
            <returns>A <see cref="T:Couchbase.KeyValue.IncrementOptions"/> object.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.IncrementOptions.Initial(System.UInt64)">
            <summary>
            The initial value to begin incrementing.
            </summary>
            <param name="initial">The <see cref="T:System.UInt64"/> value for the initial increment.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.IncrementOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.IncrementOptions.Delta(System.UInt64)">
            <summary>
            The value to increment the initial value by.
            </summary>
            <param name="delta">The <see cref="T:System.UInt64"/> value to increment the initial value by.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.IncrementOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.IncrementOptions.Cas(System.UInt64)">
            <summary>
            The Compare And Swap or CAS value for optimistic locking.
            </summary>
            <param name="cas">A <see cref="T:System.UInt64"/> value generated by the server by a previous operation.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.IncrementOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.IncrementOptions.Durability(Couchbase.KeyValue.PersistTo,Couchbase.KeyValue.ReplicateTo)">
            <summary>
            Settings to instruct Couchbase Server to update the specified document on multiple nodes in memory and/or disk
            locations across the cluster before considering the write to be committed.
            </summary>
            <param name="persistTo">The <see cref="P:Couchbase.KeyValue.IncrementOptions.PersistTo"/> durability requirement for persistence.</param>
            <param name="replicateTo">The <see cref="P:Couchbase.KeyValue.IncrementOptions.ReplicateTo"/> durability requirement for replication.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.IncrementOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.IncrementOptions.Durability(Couchbase.KeyValue.DurabilityLevel)">
            <summary>
            Settings to instruct Couchbase Server to update the specified document on multiple nodes in memory and/or disk
            locations across the cluster before considering the write to be committed.
            </summary>
            <param name="durabilityLevel">The <see cref="P:Couchbase.KeyValue.IncrementOptions.DurabilityLevel"/> requirement for replication and persistence.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.IncrementOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.IncrementOptions.Timeout(System.TimeSpan)">
            <summary>
            The time allowed for the operation before being terminated. This is controlled by the client; the default is 2.5s.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the amount of time before the operations times out.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.IncrementOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.IncrementOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A token for cooperative cancellation of the operation between threads.
            </summary>
            <param name="token">A <see cref="M:Couchbase.KeyValue.IncrementOptions.CancellationToken(System.Threading.CancellationToken)"/>; if not supplied and internal token will handle cancellation.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.IncrementOptions"/> object for chaining options.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.DecrementOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.DecrementOptions.Expiry(System.TimeSpan)">
            <summary>
            Sets the expiration for a document. By default, documents never expire - if overridden the value must be less than 50 years.
            </summary>
            <param name="expiry">The time-to-live of the document.</param>
            <returns>An options object for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.DecrementOptions.Initial(System.UInt64)">
            <summary>
            The initial value to start from.
            </summary>
            <param name="initial">A <see cref="T:System.UInt64"/> inital value.</param>
        </member>
        <member name="M:Couchbase.KeyValue.DecrementOptions.Delta(System.UInt64)">
            <summary>
            The value to decrement by.
            </summary>
            <param name="delta">A <see cref="T:System.UInt64"/> value to decrement by..</param>
        </member>
        <member name="M:Couchbase.KeyValue.DecrementOptions.Durability(Couchbase.KeyValue.PersistTo,Couchbase.KeyValue.ReplicateTo)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="persistTo">The durability requirement for persistence.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.DecrementOptions.Durability(Couchbase.KeyValue.DurabilityLevel)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="durabilityLevel">The <see cref="P:Couchbase.KeyValue.DecrementOptions.DurabilityLevel"/> required for persistance.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.DecrementOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.DecrementOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.DecrementOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.AppendOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.AppendOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.AppendOptions.Cas(System.UInt64)">
            <summary>
            Compare and Set value for optimistic locking of a document.
            </summary>
            <param name="cas">A <see cref="T:System.UInt64"/> value returned by the server in a previous operation.</param>
            <returns>An options object for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.AppendOptions.Durability(Couchbase.KeyValue.PersistTo,Couchbase.KeyValue.ReplicateTo)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="persistTo">The durability requirement for persistence.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.AppendOptions.Durability(Couchbase.KeyValue.DurabilityLevel)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="durabilityLevel">The <see cref="P:Couchbase.KeyValue.AppendOptions.DurabilityLevel"/> required for persistance.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.AppendOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.AppendOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.AppendOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.PrependOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.PrependOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.PrependOptions.Cas(System.UInt64)">
            <summary>
            Compare and Set value for optimistic locking of a document.
            </summary>
            <param name="cas">A <see cref="T:System.UInt64"/> value returned by the server in a previous operation.</param>
            <returns>An options object for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.PrependOptions.Durability(Couchbase.KeyValue.DurabilityLevel)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="durabilityLevel">The <see cref="P:Couchbase.KeyValue.PrependOptions.DurabilityLevel"/> required for persistance.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.PrependOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.PrependOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.PrependOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="P:Couchbase.KeyValue.GetAndLockOptions.PreferReturn">
            <summary>
            Used internally to ensure that <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> is not thrown
            when the server returns KeyNotFound for the status.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.GetAndLockOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetAndLockOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetAndLockOptions.Transcoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Inject a <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/> other than the default <see cref="T:Couchbase.Core.IO.Transcoders.JsonTranscoder"/>.
            </summary>
            <param name="transcoder"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetAndLockOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetAndLockOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.GetAndLockOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="P:Couchbase.KeyValue.GetAndTouchOptions.PreferReturn">
            <summary>
            Used internally to ensure that <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> is not thrown
            when the server returns KeyNotFound for the status.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.GetAndTouchOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetAndTouchOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetAndTouchOptions.Transcoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Inject a <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/> other than the default <see cref="T:Couchbase.Core.IO.Transcoders.JsonTranscoder"/>.
            </summary>
            <param name="transcoder"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetAndTouchOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.GetAndTouchOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.GetAndTouchOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInOptions.Serializer(Couchbase.Core.IO.Serializers.ITypeSerializer)">
             <summary>
            A custom <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> implementation for serialization.
             </summary>
             <param name="serializer">A custom <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> implementation for serialization.</param>
             <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInOptions.Transcoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Only used internally for full doc gets which also need the expiry. Should not be used for JSON-based LookupIn ops.
            Not exposed for public consumption.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInOptions.Timeout(System.Nullable{System.TimeSpan})">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.LookupInOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInOptions.Expiry(System.Boolean)">
            <summary>
            Sets the expiration for a document. By default, documents never expire - if overridden the value must be less than 50 years.
            </summary>
            <param name="expiry">The time-to-live of the document.</param>
            <returns>An options object for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInAnyReplicaOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInAnyReplicaOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInAnyReplicaOptions.Serializer(Couchbase.Core.IO.Serializers.ITypeSerializer)">
             <summary>
            A custom <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> implementation for serialization.
             </summary>
             <param name="serializer">A custom <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> implementation for serialization.</param>
             <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInAnyReplicaOptions.Transcoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Only used internally for full doc gets which also need the expiry. Should not be used for JSON-based LookupIn ops.
            Not exposed for public consumption.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInAnyReplicaOptions.Timeout(System.Nullable{System.TimeSpan})">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInAnyReplicaOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.LookupInAnyReplicaOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInAllReplicasOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInAllReplicasOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInAllReplicasOptions.Serializer(Couchbase.Core.IO.Serializers.ITypeSerializer)">
             <summary>
            A custom <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> implementation for serialization.
             </summary>
             <param name="serializer">A custom <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> implementation for serialization.</param>
             <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInAllReplicasOptions.Transcoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Only used internally for full doc gets which also need the expiry. Should not be used for JSON-based LookupIn ops.
            Not exposed for public consumption.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInAllReplicasOptions.Timeout(System.Nullable{System.TimeSpan})">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.LookupInAllReplicasOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.LookupInAllReplicasOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOptions.PreserveTtl(System.Boolean)">
            <summary>
            Specifies whether an existing document's expiry should be preserved.
            If true, and the document exists, its expiry will not be modified.Otherwise
            the document's expiry is determined by <see cref="M:Couchbase.KeyValue.MutateInOptions.Expiry(System.TimeSpan)"/>.
            </summary>
            <remarks>The default is false.</remarks>
            <param name="preserveTtl"></param>
            <returns>An options object for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOptions.StoreSemantics(Couchbase.KeyValue.StoreSemantics)">
            <summary>
            StoreSemantics - the storage action
            Replace - replace the document, fail if it doesn't exist
            Upsert - replace the document or create it if it doesn't exist (0x01)
            Insert - create document, fail if it exists(0x02)
            </summary>
            <param name="storeSemantics"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOptions.Serializer(Couchbase.Core.IO.Serializers.ITypeSerializer)">
             <summary>
            A custom <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> implementation for serialization.
             </summary>
             <param name="serializer">A custom <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> implementation for serialization.</param>
             <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOptions.Transcoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Inject a <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/> other than the default <see cref="T:Couchbase.Core.IO.Transcoders.JsonTranscoder"/>.
            </summary>
            <param name="transcoder"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOptions.Expiry(System.TimeSpan)">
            <summary>
            Sets the expiration for a document. By default, documents never expire - if overridden the value must be less than 50 years.
            </summary>
            <param name="expiry">The time-to-live of the document.</param>
            <returns>An options object for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOptions.Cas(System.UInt64)">
            <summary>
            Compare and Set value for optimistic locking of a document.
            </summary>
            <param name="cas">A <see cref="T:System.UInt64"/> value returned by the server in a previous operation.</param>
            <returns>An options object for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOptions.Durability(Couchbase.KeyValue.PersistTo,Couchbase.KeyValue.ReplicateTo)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="persistTo">The durability requirement for persistence.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOptions.Durability(Couchbase.KeyValue.DurabilityLevel)">
            <summary>
            The durability level required for persisting a JSON document across the cluster.
            </summary>
            <param name="durabilityLevel">The <see cref="P:Couchbase.KeyValue.MutateInOptions.DurabilityLevel"/> required for persistance.</param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOptions.Timeout(System.TimeSpan)">
            <summary>
            The time in which the operation will timeout if it does not complete.
            </summary>
            <param name="timeout"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            A <see cref="M:Couchbase.KeyValue.MutateInOptions.CancellationToken(System.Threading.CancellationToken)"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOptions.AccessDeleted(System.Boolean)">
            <summary>
            Allows access to a deleted document's attributes section.
            Only for internal diagnostic use only and is an unsupported feature.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInXattrOperation.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="span">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInXattrOperation.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Inject a custom <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/>.
            </summary>
            <param name="retryStrategy"></param>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInXattrOperation.XAttr">
            <summary>
            If true then this is an xattr operation.
            </summary>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.MutateInOperationOptions.CreatePath">
            <summary>
            Create the path if it doesn't exist.
            </summary>
            <returns>An options instance for chaining.</returns>
        </member>
        <member name="T:Couchbase.KeyValue.MutateInInsertOptions">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.MutateInUpsertOptions">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.MutateInReplaceOptions">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.MutateInRemoveOptions">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.MutateInArrayAppendOptions">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.MutateInArrayInsertOptions">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.MutateInArrayAddUniqueOptions">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.MutateInIncrementOptions">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.MutateInDecrementOptions">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.RangeScan.IScanResult">
            <summary>
            An individual result from a KV Range Scan
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.IScanResult.IdOnly">
            <summary>
            Indicates if the scan was requested with IDs only.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.IScanResult.Id">
            <summary>
            The identifier for the document.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.IScanResult.ContentAs``1">
            <summary>
            Returns the content of the scan result if <see cref="M:Couchbase.KeyValue.RangeScan.ScanOptions.IdsOnly(System.Boolean)"/> is false.
            </summary>
            <typeparam name="T">The underlying document type; POCO or dynamic/object for example.</typeparam>
            <returns></returns>
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.IScanResult.ExpiryTime">
            <summary>
            The time in which the document will expire and be evicted from the cluster.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.IScanResult.Cas">
            <summary>
            Compare and Set value for optimistic locking of a document.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.RangeScan.IScanType">
            <summary>
            A marker interface for scan implementations.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.IScanType.RangeScan(Couchbase.KeyValue.RangeScan.ScanTerm,Couchbase.KeyValue.RangeScan.ScanTerm)">
            <summary>
            Creates a new KV range scan, scanning between two <see cref="T:Couchbase.KeyValue.RangeScan.ScanTerm"/> ScanTerms.
            </summary>
            <param name="from"> From the <see cref="T:Couchbase.KeyValue.RangeScan.ScanTerm"/> to start scanning from. </param>
            <param name="to"> To the <see cref="T:Couchbase.KeyValue.RangeScan.ScanTerm"/> to scan to.</param>
            <returns> A newly created <see cref="M:Couchbase.KeyValue.RangeScan.IScanType.RangeScan(Couchbase.KeyValue.RangeScan.ScanTerm,Couchbase.KeyValue.RangeScan.ScanTerm)"/> to be passed into the Collection API.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.IScanType.PrefixScan(System.String)">
            <summary>
            Creates a new KV range scan, scanning all document IDs starting with the given Prefix.
            </summary>
            <param name="prefix"> The Prefix <see cref="T:Couchbase.KeyValue.RangeScan.ScanTerm"/> to start scanning from. </param>
            <returns> A newly created <see cref="M:Couchbase.KeyValue.RangeScan.IScanType.PrefixScan(System.String)"/> to be passed into the Collection API.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.IScanType.SamplingScan(System.UInt64)">
            <summary>
            Creates a new KV sampling scan, which randomly samples documents up until the configured limit with a default seed.
            </summary>
            <param name="limit"> limit the number of documents to limit sampling to. </param>
            <returns> A newly created <see cref="M:Couchbase.KeyValue.RangeScan.IScanType.SamplingScan(System.UInt64)"/> to be passed into the Collection API.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.IScanType.SamplingScan(System.UInt64,System.UInt64)">
            <summary>
            Creates a new KV sampling scan, which randomly samples documents up until the configured limit with a custom seed.
            </summary>
            <param name="limit"> </param>
            <param name="seed"> The custom seed used for sampling.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.KeyValue.RangeScan.IScanTypeExt">
            <summary>
            Extends the <see cref="T:Couchbase.KeyValue.RangeScan.IScanType"/> with additional collection data and serialization.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.IScanTypeExt.CollectionName">
            <summary>
            The name of the collection being scanned; if omitted the scan will be on the default collection.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.IScanTypeExt.Serialize(System.Boolean,System.TimeSpan,Couchbase.Core.MutationToken)">
            <summary>
            Converts the instance into a JSON <see cref="T:System.Byte"/> array.
            </summary>
            <returns>A JSON <see cref="T:System.Byte"/> that represents the <see cref="T:Couchbase.KeyValue.RangeScan.IScanType"/>.</returns>
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.IScanTypeExt.IsSampling">
            <summary>
            Gets a value indicating whether the operation is a sampling scan.  Affects error handling.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.RangeScan.PrefixScan">
            <summary>
            A PrefixScan
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.RangeScan.RangeScan">
            <summary>
            A range scan.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.RangeScan.From">
            <summary>
            The starting position of the scan.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.RangeScan.To">
            <summary>
            The final position of the scan.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.RangeScan.SamplingScan">
            <summary>
            A random sampling scan
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.SamplingScan.Limit">
            <summary>
            The maximum number of documents to scan.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.SamplingScan.Seed">
            <summary>
            The starting point.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.RangeScan.ScanOptions">
            <summary>
            Options for a KV Range Scan.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanOptions.Timeout(System.TimeSpan)">
            <summary>
            The timeout for the scan.
            </summary>
            <param name="timeSpan">A <see cref="T:System.TimeSpan"/> value specifying when the scan will timeout.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.RangeScan.ScanOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanOptions.Transcoder(Couchbase.Core.IO.Transcoders.ITypeTranscoder)">
            <summary>
            Override the default transcoder.
            </summary>
            <param name="transcoder">A <see cref="T:Couchbase.Core.IO.Transcoders.ITypeTranscoder"/> instance. </param>
            <returns>A <see cref="T:Couchbase.KeyValue.RangeScan.ScanOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Override the default retry strategy.
            </summary>
            <param name="retryStrategy">A <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/> instance.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.RangeScan.ScanOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanOptions.ParentSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            Inject an external span which will the be the parent span of the internal span(s).
            </summary>
            <param name="parentSpan">An <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <returns>A <see cref="T:Couchbase.KeyValue.RangeScan.ScanOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanOptions.IdsOnly(System.Boolean)">
            <summary>
            Do not return content.
            </summary>
            <param name="withoutContent">True to not send content.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.RangeScan.ScanOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanOptions.ConsistentWith(Couchbase.Query.MutationState)">
            <summary>
            Provides a means of ensuring "read your own writes" or RYOW consistency on the current query.
            </summary>
            <param name="mutationState"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.RangeScan.ScanOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanOptions.Token(System.Threading.CancellationToken)">
            <summary>
            A <see cref="T:System.Threading.CancellationToken"/> for cooperative cancellation.
            </summary>
            <param name="token"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.RangeScan.ScanOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanOptions.ItemLimit(System.UInt32)">
            <summary>
            Sets the Item Limit per batch. This will be applied to each stream individually, and acts as a
            target the server aims to reach.
            </summary>
            <param name="limit"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.RangeScan.ScanOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanOptions.ByteLimit(System.UInt32)">
            <summary>
            Sets the Byte Limit per batch. This will be applied to each stream individually, and acts as a
            target the server aims to reach.
            </summary>
            <param name="limit"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.RangeScan.ScanOptions"/> instance for chaining.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanOptions.TimeLimit(System.UInt32)">
            <summary>
            Sets the Time Limit in milliseconds for the scan to keep returning documents. This will be applied to each stream individually.
            </summary>
            <param name="limit"></param>
            <returns>A <see cref="T:Couchbase.KeyValue.RangeScan.ScanOptions"/> instance for chaining.</returns>
        </member>
        <member name="T:Couchbase.KeyValue.RangeScan.ScanResult">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.ScanResult.Id">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.ScanResult.ExpiryTime">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.ScanResult.Cas">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanResult.ContentAs``1">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.RangeScan.ScanTerm">
            <summary>
             A single <see cref="T:Couchbase.KeyValue.RangeScan.ScanTerm"/>identifying either the point to scan from or to scan to
             when performing a Range Scan.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.ScanTerm.Id">
            <summary>
            The term to scan.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.RangeScan.ScanTerm.IsExclusive">
            <summary>
            Controls whether the scan is inclusive or exclusive.
            </summary>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanTerm.Exclusive(System.String)">
            <summary>
            Creates an exclusive scan for a term.
            </summary>
            <param name="id">The term to scan.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.RangeScan.ScanTerm"/> instance for an exclusive scan.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanTerm.Inclusive(System.String)">
            <summary>
            Creates an Inclusive scan for a term.
            </summary>
            <param name="id">The term to scan.</param>
            <returns>A <see cref="T:Couchbase.KeyValue.RangeScan.ScanTerm"/> instance for an inclusive scan.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanType.RangeScan(Couchbase.KeyValue.RangeScan.ScanTerm,Couchbase.KeyValue.RangeScan.ScanTerm)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanType.PrefixScan(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanType.SamplingScan(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.RangeScan.ScanType.SamplingScan(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.Scope">
            <remarks>Volatile</remarks>
        </member>
        <member name="P:Couchbase.KeyValue.Scope.QueryContext">
            <summary>
            Internal seam for unit testing
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.Scope.Bucket">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.Scope.IsDefaultScope">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.Scope.Collection(System.String)">
            <summary>
            Returns a given collection by name.
            </summary>
            <param name="collectionName"></param>
            <returns></returns>
            <remarks>Volatile</remarks>
        </member>
        <member name="M:Couchbase.KeyValue.Scope.QueryAsync``1(System.String,Couchbase.Query.QueryOptions)">
            <summary>
            Collection N1QL querying
            </summary>
            <typeparam name="T">The Type of the row returned.</typeparam>
            <param name="statement">The required statement to execute.</param>
            <param name="options">Optional parameters.</param>
            <returns>A <see cref="T:Couchbase.Query.IQueryResult`1"/> which can be enumerated.</returns>
        </member>
        <member name="M:Couchbase.KeyValue.Scope.SearchAsync(System.String,Couchbase.Search.SearchRequest,Couchbase.Search.SearchOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.Scope.AnalyticsQueryAsync``1(System.String,Couchbase.Analytics.AnalyticsOptions)">
            <summary>
            Collection analytics querying
            </summary>
            <typeparam name="T">The Type of the row returned.</typeparam>
            <param name="statement">The required statement to execute.</param>
            <param name="options">Optional parameters.</param>
            <returns>A <see cref="T:Couchbase.Analytics.IAnalyticsResult`1"/> which can be enumerated.</returns>
        </member>
        <member name="P:Couchbase.KeyValue.Scope.EventingFunctions">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.Scope.SearchIndexes">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.StoreSemantics">
            <summary>
            Flags for indicating additional actions when working with MutateIn Sub-Document operations.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.StoreSemantics.Replace">
            <summary>
            Replace the document; fail if the document does not exist.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.StoreSemantics.Upsert">
            <summary>
            Creates the document; update the document if it exists.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.StoreSemantics.Insert">
            <summary>
            Create the document; fail if it exists.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.StoreSemantics.AccessDeleted">
            <summary>
            Allows access to a deleted document's attributes section.
            Only for internal diagnostic use only and is an unsupported feature.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.SubdocDocFlags">
            <summary>
            Flags for indicating additional actions when working with subdocument documents.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.SubdocDocFlags.None">
            <summary>
            No document flags have been specified.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.SubdocDocFlags.UpsertDocument">
            <summary>
            Creates the document if it does not exist.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.SubdocDocFlags.InsertDocument">
            <summary>
            Similar to <see cref="F:Couchbase.KeyValue.SubdocDocFlags.UpsertDocument"/>, except that the operation only succeds if the document does not exist.
            This option makes sense in the context of wishing to create a new document together with Xattrs.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.SubdocDocFlags.AccessDeleted">
            <summary>
            Allows access to a deleted document's attributes section.
            Only for internal diagnostic use only and is an unsupported feature.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.SubdocDocFlags.CreateAsDeleted">
            <summary>
            If the server needs to create a new document, it will create it as a tombstone.
            Any system or user xattrs provided in the request will be stored, but a document body will not be.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.SubdocDocFlags.ReplicaRead">
            <summary>
            Specifies that the request is being sent to a replica.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.SubdocPathFlags">
            <summary>
            Flags for indicating additional actions when working with subdocument paths.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.SubdocPathFlags.None">
            <summary>
            No path flags have been specified.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.SubdocPathFlags.CreatePath">
            <summary>
            Creates path if it does not exist.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.SubdocPathFlags.Xattr">
            <summary>
            Path refers to a location within the document’s attributes section.
            </summary>
        </member>
        <member name="F:Couchbase.KeyValue.SubdocPathFlags.ExpandMacroValues">
            <summary>
            Indicates that the server should expand any macros before storing the value. Infers <see cref="F:SubdocDocFlags.Xattr"/>.
            Only for internal diagnostic use only and is an unsupported feature.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.TryGetResult">
            <summary>
            Provides an interface for supporting the state of a document if the server
            returns a KeyNotFound status, as opposed to throwing a <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/>
            like in the regular GetAsync methods.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.TryGetResult.Cas">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.TryGetResult.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.KeyValue.TryGetResult.ContentAs``1">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.TryGetResult.Expiry">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.KeyValue.TryGetResult.ExpiryTime">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.KeyValue.TryMutationResult">
            <summary>
            Provides an interface for 'mutating' a document, but instead of throwing
            <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> exception if the document key is
            not found, allows for the existence to be checked via <see cref="P:Couchbase.KeyValue.ITryMutationResult.Exists"/>.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.TryRemoveResult">
            <summary>
            Provides an interface for removing a document, but instead of throwing
            <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> exception if the document key is
            not found, allows for the existence to be checked via <see cref="P:Couchbase.KeyValue.ITryRemoveResult.Exists"/>.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.TryResultBase">
            <summary>
            Base class for operation results that do not throw <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/>.
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.TryResultBase.Status">
            <summary>
            The <see cref="T:Couchbase.Core.IO.Operations.ResponseStatus"/> returned from the server. In this case
            it should only be <see cref="F:Couchbase.Core.IO.Operations.ResponseStatus.Success"/> or <see cref="F:Couchbase.Core.IO.Operations.ResponseStatus.KeyNotFound"/>
            </summary>
        </member>
        <member name="P:Couchbase.KeyValue.TryResultBase.Exists">
            <summary>
            If false, the document does not exist on the server for a given key.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.TryTouchResult">
            <summary>
            Provides an interface for 'touching' a document, but instead of throwing
            <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> exception if the document key is
            not found, allows for the existence to be checked via <see cref="P:Couchbase.KeyValue.ITryTouchResult.Exists"/>.
            </summary>
        </member>
        <member name="T:Couchbase.KeyValue.TryUnlockResult">
            <summary>
            Provides an interface for unlocking a locked document, but instead of throwing
            <see cref="T:Couchbase.Core.Exceptions.KeyValue.DocumentNotFoundException"/> exception if the document key is
            not found, allows for the existence to be checked via <see cref="P:Couchbase.KeyValue.ITryUnlockResult.Exists"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Analytics.Link.AnalyticsLinkResponseRecord">
            <summary>
            A placeholder record used for deserializing JSON representations of <see cref="T:Couchbase.Management.Analytics.Link.AnalyticsLink"/>
            with redacted information.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Analytics.Link.AnalyticsLinkResponseRecord.#ctor(System.String,System.String,System.String)">
            <summary>
            A placeholder record used for deserializing JSON representations of <see cref="T:Couchbase.Management.Analytics.Link.AnalyticsLink"/>
            with redacted information.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Analytics.Link.CouchbaseRemoteAnalyticsLinkResponse">
            <summary>
            A record for deserializing the response format from the management API to later turn into a <see cref="T:Couchbase.Management.Analytics.Link.CouchbaseRemoteAnalyticsLink"/>
            </summary>
        </member>
        <member name="M:Couchbase.Management.Analytics.Link.CouchbaseRemoteAnalyticsLinkResponse.#ctor(System.String,System.String,System.String,System.String,Couchbase.Management.Analytics.Link.CouchbaseRemoteAnalyticsLink.EncryptionLevel)">
            <summary>
            A record for deserializing the response format from the management API to later turn into a <see cref="T:Couchbase.Management.Analytics.Link.CouchbaseRemoteAnalyticsLink"/>
            </summary>
        </member>
        <member name="T:Couchbase.Management.Analytics.Link.GeneralAnalyticsLinkResponse">
            <summary>
            An <see cref="T:Couchbase.Management.Analytics.Link.AnalyticsLink"/> as serialized from JSON when we don't support the type directly.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Analytics.Link.GeneralAnalyticsLinkResponse.#ctor(System.String,System.String)">
            <summary>
            An <see cref="T:Couchbase.Management.Analytics.Link.AnalyticsLink"/> as serialized from JSON when we don't support the type directly.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.Name">
            <summary>
            The bucket name.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.BucketType">
            <summary>
            The <see cref="P:Couchbase.Management.Buckets.BucketSettings.BucketType"/> type to be created.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.RamQuotaMB">
            <summary>
            The amount of RAM to allocate for the bucket.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.FlushEnabled">
            <summary>
            Enables flushing on the bucket.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.NumReplicas">
            <summary>
            The number of servers that a document will be replicated to.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.ReplicaIndexes">
            <summary>
            Whether or not to replicate indexes across the cluster.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.ConflictResolutionType">
            <summary>
            The type of conflict resolution to use.
            Note: Only use this with CreateBucketAsync().
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.EvictionPolicy">
            <summary>
            The <see cref="P:Couchbase.Management.Buckets.BucketSettings.EvictionPolicy"/> to use.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.MaxTtl">
            <summary>
            The maximum Time-To-Live (TTL) for new documents in the Bucket.
            0 : Documents do not expire.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.CompressionMode">
            <summary>
            The <see cref="P:Couchbase.Management.Buckets.BucketSettings.CompressionMode"/> to use.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.DurabilityMinimumLevel">
            <summary>
            Returns the minimum durability level set for the bucket.
            </summary>
            <remarks>Note that if the bucket does not support it, and by default, it is set to <see cref="F:Couchbase.KeyValue.DurabilityLevel.None"/>.</remarks>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.StorageBackend">
            <summary>
            The type of storage to use with the bucket. This is only specified for "couchbase" buckets.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.HistoryRetentionCollectionDefault">
            <summary>
            Whether to enable history retention on collections by default.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.HistoryRetentionBytes">
            <summary>
            The maximum size, in bytes, of the change history that is written to disk for all collections in this bucket.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Buckets.BucketSettings.HistoryRetentionDuration">
            <summary>
            The maximum duration of history each vBucket should aim to retain on disk.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Buckets.BucketSettings.ToFormValues">
            <summary>
            Validates the settings and creates a list of name value pairs to send to the server as form values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Management.Buckets.BucketType">
            <summary>
            Represents the Bucket types supported by Couchbase Server
            </summary>
        </member>
        <member name="F:Couchbase.Management.Buckets.BucketType.Couchbase">
            <summary>
            A persistent Bucket supporting replication and rebalancing.
            </summary>
        </member>
        <member name="F:Couchbase.Management.Buckets.BucketType.Memcached">
            <summary>
            A Bucket supporting in-memory Key/Value operations.
            </summary>
        </member>
        <member name="F:Couchbase.Management.Buckets.BucketType.Ephemeral">
            <summary>
            The ephemeral bucket type for in-memory buckets with Couchbase bucket behavior.
            </summary>
        </member>
        <member name="F:Couchbase.Management.Buckets.ConflictResolutionType.Custom">
            <summary>
            Allows for custom conflict resolution.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Buckets.CreateBucketOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Buckets.CreateBucketOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Buckets.DropBucketOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Buckets.DropBucketOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Buckets.DropCollectionOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Buckets.DropCollectionOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="F:Couchbase.Management.Buckets.EvictionPolicyType.FullEviction">
            <summary>
                During ejection, everything (including key, metadata, and value) will be ejected.
                Full Ejection reduces the memory overhead requirement, at the cost of performance.
                This value is only valid for buckets of type <see cref="F:Couchbase.Management.Buckets.BucketType.Couchbase" />
            </summary>
        </member>
        <member name="F:Couchbase.Management.Buckets.EvictionPolicyType.ValueOnly">
            <summary>
                During ejection, only the value will be ejected (key and metadata will remain in memory).
                Value Ejection needs more system memory, but provides better performance than Full Ejection.
                This value is only valid for buckets of type <see cref="F:Couchbase.Management.Buckets.BucketType.Couchbase" />
            </summary>
        </member>
        <member name="F:Couchbase.Management.Buckets.EvictionPolicyType.NotRecentlyUsed">
            <summary>
                When the memory quota is reached, Couchbase Server ejects data that has not been used recently.
                This value is only valid for buckets of type <see cref="F:Couchbase.Management.Buckets.BucketType.Ephemeral" />
            </summary>
        </member>
        <member name="F:Couchbase.Management.Buckets.EvictionPolicyType.NoEviction">
            <summary>
                Couchbase Server keeps all data until explicitly deleted, but will reject
                any new data if you reach the quota(dedicated memory) you set for your bucket.
                This value is only valid for buckets of type <see cref="F:Couchbase.Management.Buckets.BucketType.Ephemeral" />
            </summary>
        </member>
        <member name="M:Couchbase.Management.Buckets.FlushBucketOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Buckets.FlushBucketOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Buckets.GetAllBucketsOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Buckets.GetAllBucketsOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Buckets.GetBucketOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Buckets.GetBucketOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="T:Couchbase.Management.Buckets.StorageBackend">
            <summary>
            The type of storage to use with the bucket. This is only specified for "couchbase" buckets.
            </summary>
        </member>
        <member name="F:Couchbase.Management.Buckets.StorageBackend.Couchstore">
            <summary>
            Backend storage type 'couchstore'.
            </summary>
        </member>
        <member name="F:Couchbase.Management.Buckets.StorageBackend.Magma">
            <summary>
            Backend storage type 'magma'.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Buckets.UpdateBucketOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Buckets.UpdateBucketOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.CollectionExistsOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.CollectionExistsOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="T:Couchbase.Management.Collections.CollectionManager">
            <remarks>Volatile</remarks>
        </member>
        <member name="T:Couchbase.Management.Collections.CollectionManager.RestApi">
            <summary>
            REST endpoint path definitions.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Collections.CollectionManager.CreateScopeAsync(System.String,Couchbase.Management.Collections.CreateScopeOptions)">
            <summary>
            Creates a scope given a unique name.
            </summary>
            <param name="scopeName">The name of the scope to create.</param>
            <param name="options">Any optional parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that can be awaited.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.CollectionManager.CreateScopeAsync(Couchbase.Management.Collections.ScopeSpec,Couchbase.Management.Collections.CreateScopeOptions)">
            <summary>
            Creates a scope given a unique name.
            </summary>
            <param name="spec">The <see cref="T:Couchbase.Management.Collections.ScopeSpec"/> of the scope including its name.</param>
            <remarks>Does not create the collections if any are included in the <see cref="T:Couchbase.Management.Collections.ScopeSpec"/></remarks>
            <param name="options">Any optional parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that can be awaited.</returns>
        </member>
        <member name="T:Couchbase.Management.Collections.CollectionManagerFactory">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Collections.CollectionManagerFactory.Create(System.String,Couchbase.Core.Configuration.Server.BucketConfig)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Management.Collections.CollectionSpec.Name">
            <summary>
            The Collection name.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Collections.CollectionSpec.ScopeName">
            <summary>
            The Scope name.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Collections.CollectionSpec.MaxExpiry">
            <summary>
            MaxExpiry is the time in seconds for the TTL for new documents in the collection. It will be infinite if not set.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Collections.CollectionSpec.History">
            <summary>
            Whether history retention override is enabled on this collection. If not set will default to bucket level setting.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Collections.CreateCollectionOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.CreateCollectionOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="P:Couchbase.Management.Collections.CreateCollectionSettings.MaxExpiry">
            <summary>
            The maximum Time-To-Live (TTL) for new documents in the collection.
            Unset or 0 : Uses the Bucket's MaxExpiry
            -1 (TimeSpan.FromSeconds(-1)) : Documents do not expire. You can use the static constant NoExpiry for this.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Collections.CreateCollectionSettings.History">
            <summary>
            Whether history retention override is enabled on this collection. If left unset, it defaults to the bucket-level setting.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Collections.CreateCollectionSettings.#ctor(System.Nullable{System.TimeSpan},System.Nullable{System.Boolean})">
            <summary>
            Optional settings when creating a new Collection.
            </summary>
            <param name="expiry">See <see cref="P:Couchbase.Management.Collections.CreateCollectionSettings.MaxExpiry"/></param>
            <param name="history">See <see cref="P:Couchbase.Management.Collections.CreateCollectionSettings.History"/></param>
        </member>
        <member name="M:Couchbase.Management.Collections.CreateScopeOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.CreateScopeOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.DropScopeOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.DropScopeOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.GetAllScopesOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.GetAllScopesOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.GetScopeOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.GetScopeOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="T:Couchbase.Management.Collections.ICouchbaseCollectionManager">
            <remarks>Volatile</remarks>
        </member>
        <member name="T:Couchbase.Management.Collections.ICollectionManagerFactory">
            <summary>
            Creates an <see cref="T:Couchbase.Management.Collections.ICouchbaseCollectionManager"/> for a given bucket.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Collections.ICollectionManagerFactory.Create(System.String,Couchbase.Core.Configuration.Server.BucketConfig)">
            <summary>
            Creates an <see cref="T:Couchbase.Management.Collections.ICouchbaseCollectionManager"/> for a given bucket.
            </summary>
            <param name="bucketName">Name of the bucket.</param>
            <param name="bucketConfig">The bucket's config.</param>
            <returns>The <see cref="T:Couchbase.Management.Collections.ICouchbaseCollectionManager"/>.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.ScopeExistsOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.ScopeExistsOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.UpdateCollectionOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="token">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Collections.UpdateCollectionOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="P:Couchbase.Management.Collections.UpdateCollectionSettings.MaxExpiry">
            <summary>
            The maximum Time-To-Live (TTL) for new documents in the collection.
            Unset or 0 : Uses the Bucket's MaxExpiry
            -1 (TimeSpan.FromSeconds(-1)) : Documents do not expire. You can use the static constant NoExpiry for this.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Collections.UpdateCollectionSettings.History">
            <summary>
            Whether history retention override is enabled on this collection. If left unset, it defaults to the bucket-level setting.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Collections.UpdateCollectionSettings.#ctor(System.Nullable{System.TimeSpan},System.Nullable{System.Boolean})">
            <summary>
            Optional settings when creating a new Collection.
            </summary>
            <param name="expiry">See <see cref="P:Couchbase.Management.Collections.UpdateCollectionSettings.MaxExpiry"/></param>
            <param name="history">See <see cref="P:Couchbase.Management.Collections.UpdateCollectionSettings.History"/></param>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunction">
            <summary>
            Eventing Functions offers a computing paradigm using which developers can handle data changes
            via the handlers of OnUpdate or OnDelete. Resources are managed at or above the Eventing
            Function level, and the containing Eventing Function scopes the state of all handlers.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunction.Name">
            <summary>
            The app name.
            </summary>
            <remarks>Required. The minimum length is 1 and the max length is 100.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunction.Code">
            <summary>
            The handler's code.
            </summary>
            <remarks>Required. The minimum length is 1.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunction.Version">
            <summary>
            Authoring tool. use 'external' if authored or edited outside eventing ui.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunction.EnforceSchema">
            <summary>
            Enforces stricter validation for all settings and configuration fields.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunction.HandlerUuid">
            <summary>
            Unique id of the the handler. Generated by server.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunction.FunctionInstanceId">
            <summary>
            Unique id of the deployment of the handler. Generated by server.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunction.Settings">
            <summary>
            Any additional configuration settings.
            </summary>
            <remarks>Required.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunction.DeploymentConfig">
            <summary>
            The deployment configuration.
            </summary>
            <remarks>Required.</remarks>
        </member>
        <member name="T:Couchbase.Management.Eventing.DeploymentConfig">
            <summary>
            The deployment configuration.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.DeploymentConfig.SourceBucket">
            <summary>
            The bucket to listen to for document mutations.
            </summary>
            <remarks>The min length is 1 and the max is 100.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.DeploymentConfig.SourceScope">
            <summary>
            The scope to listen to for document mutations.
            </summary>
            <remarks>The min length is 1 and the max is 30.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.DeploymentConfig.SourceCollection">
            <summary>
            The collection to listen to for document mutations.
            </summary>
            <remarks>The min length is 1 and the max is 30.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.DeploymentConfig.MetadataBucket">
            <summary>
            The bucket to store eventing checkpoints and timers.
            </summary>
            <remarks>The min length is 1 and the max is 100.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.DeploymentConfig.MetadataScope">
            <summary>
            The scope to store eventing checkpoints and timers.
            </summary>
            <remarks>The min length is 1 and the max is 30.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.DeploymentConfig.MetadataCollection">
            <summary>
            The collection to store eventing checkpoints and timers.
            </summary>
            <remarks>The min length is 1 and the max is 30.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.DeploymentConfig.BucketBindings">
            <summary>
            The bucket bindings.
            </summary>
            <remarks>Optional.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.DeploymentConfig.UrlBindings">
            <summary>
            The url bindings.
            </summary>
            <remarks>Optional.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.DeploymentConfig.ConstantBindings">
            <summary>
            The constant bindings.
            </summary>
            <remarks>Optional.</remarks>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionKeyspace">
            <summary>
            The key-space for an eventing function. May represent a source or meta-data key-space.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionKeyspace.Bucket">
            <summary>
            The bucket name.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionKeyspace.Scope">
            <summary>
            The scope name.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionKeyspace.Collection">
            <summary>
            The collection name.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionBucketBinding">
            <summary>
            Bucket aliases allow JavaScript handlers to access Couchbase KV collections from the Data Service or KV.x
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionBucketBinding.Alias">
            <summary>
            Symbolic name used in code to refer to this binding.
            </summary>
            <remarks>Required. The min length is 1 and the max length is 20.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionBucketBinding.BucketName">
            <summary>
            The name of the bucket this binding maps to.
            </summary>
            <remarks>Required. The min length is 1 and the max length is 100.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionBucketBinding.ScopeName">
            <summary>
            The name of the scope this binding maps to.
            </summary>
            <remarks>The min length is 1 and the max length is 30.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionBucketBinding.CollectionName">
            <summary>
            The name of the collection this binding maps to.
            </summary>
            <remarks>The min length is 1 and the max length is 100.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionBucketBinding.Access">
            <summary>
            The bucket access level (read or read+write).
            </summary>
            <remarks>Required.</remarks>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionBucketAccess">
            <summary>
            The eventing function bucket access required.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionUrlBinding">
            <summary>
            These bindings are utilized by the cURL language construct to access external resources.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionUrlBinding.Hostname">
            <summary>
            Full URL (including any path) that this binding connects.
            </summary>
            <remarks>Required. The minimum length is 1.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionUrlBinding.AllowCookies">
            <summary>
            Allow cookies on the session.
            </summary>
            <remarks>Required. The default is true.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionUrlBinding.ValidateSslCertificate">
            <summary>
            Validate remote server certificate using OS mechanisms.
            </summary>
            <remarks>Required.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionUrlBinding.Alias">
            <summary>
            Symbolic name used in code to refer to this binding
            </summary>
            <remarks>Required. The minimum length is 1 and the max is 20.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionUrlBinding.Auth">
            <summary>
            The http authentication method to use with this endpoint.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.IEventingFunctionUrlAuth">
            <summary>
            The authentication type to use.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.ISerializableEventingFunctionUrlAuth">
            <summary>
            Internal variant of <see cref="T:Couchbase.Management.Eventing.IEventingFunctionUrlAuth"/> which handles JSON serialization.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionUrlNoAuth">
            <summary>
            Do not use authentication.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionUrlAuthBasic">
            <summary>
            Basic authentication.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionUrlAuthBasic.Username">
            <summary>
            The username for http auth methods that use it.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionUrlAuthBasic.Password">
            <summary>
            The password for http auth methods that use it.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionUrlAuthDigest">
            <summary>
            Digest authentication.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionUrlAuthDigest.Username">
            <summary>
            The username for http auth methods that use it.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionUrlAuthDigest.Password">
            <summary>
            The password for http auth methods that use it.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionUrlAuthBearer">
            <summary>
            Auth-bearer authentication.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionUrlAuthBearer.Key">
            <summary>
            The bearer key for bearer auth.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionConstantBinding">
            <summary>
            These bindings are utilized by the Function’s JavaScript handler code as global variables.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionConstantBinding.Alias">
            <summary>
            The alias name of the constant binding.
            </summary>
            <remarks>Optional. The min length is 1 and the max is 20.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionConstantBinding.Literal">
            <summary>
            The literal value bound to the alias name.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionSettings">
            <summary>
            Advanced settings that may be adjusted.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.CppWorkerThreadCount">
            <summary>
            Number of threads each worker utilizes.
            </summary>
            <remarks>Minimum is 1.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.DcpStreamBoundary">
            <summary>
            Indicates where to start dcp stream from (beginning of time, present point) 'from_prior' is deprecated in 6.6.2.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.Description">
            <summary>
            Free form text for user to describe the handler. no functional role.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.DeploymentStatus">
            <summary>
            Indicates if the function is deployed. true=deployed, false=undeployed.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.ProcessingStatus">
            <summary>
            Indicates if the function is running (i.e., not paused). true=running, false=paused.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.LanguageCompatibility">
            <summary>
            Eventing language version this handler assumes in terms of syntax and behavior.
            </summary>
            <remarks>Default is '6.6.2'.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.LogLevel">
            <summary>
            Level of detail in system logging.
            </summary>
            <remarks>Default is INFO.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.ExecutionTimeout">
            <summary>
            Maximum time the handler can run before it is forcefully terminated (in seconds).
            </summary>
            <remarks>The minimum is 1 and the default is 60s.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.LcbInstCapacity">
            <summary>
            Maximum number of libcouchbase connections that may be opened and pooled.
            </summary>
            <remarks>The minimum is 1 and the default is 10.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.LcbRetryCount">
            <summary>
            Number of retries of retriable libcouchbase failures. 0 keeps trying till execution_timeout.
            </summary>
            <remarks>The default is 0.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.LcbTimeout">
            <summary>
            Maximum time the lcb command is waited until completion before we terminate the request(in seconds).
            </summary>
            <remarks>The minimum is 1 and the default is 5.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.QueryConsistency">
            <summary>
            Consistency level used by n1ql statements in the handler.
            </summary>
            <remarks>The default is 'none' or 'not bounded'.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.NumTimerPartitions">
            <summary>
            Number of timer shards. defaults to number of vbuckets.
            </summary>
            <remarks>1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.SockBatchSize">
            <summary>
            Batch size for messages from producer to consumer. normally, this must not be specified.
            </summary>
            <remarks>Default is 1.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.TickDuration">
            <summary>
            Duration to log stats from this handler, in milliseconds.
            </summary>
            <remarks>The default is 60000ms.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.TimerContextSize">
            <summary>
            Size limit of timer context object
            </summary>
            <remarks>The minimum is 20, the max is 20971520 and the default is 1024.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.UserPrefix">
            <summary>
            Key prefix for all data stored in metadata by this handler.
            </summary>
            <remarks>The default is 'eventing'.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.BucketCacheSize">
            <summary>
            Maximum size in bytes the bucket cache can grow to.
            </summary>
            <remarks>The minimum is 20971520 and the default is 67108864.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.BucketCacheAge">
            <summary>
            Time in milliseconds after which a cached bucket object is considered stale.
            </summary>
            <remarks>The minimum is 1 and the default is 1000.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.CurlMaxAllowedRespSize">
            <summary>
            Maximum allowable curl call response in 'MegaBytes'. Setting the value to 0 lifts the upper limit off. This parameters affects v8 engine stability since it defines the maximum amount of heap space acquired by a curl call
            </summary>
            <remarks>The default is 100mb.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.QueryPrepareAll">
            <summary>
            Automatically prepare all n1ql statements in the handler.
            </summary>
            <remarks>The default is false.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.WorkerCount">
            <summary>
            Number of worker processes handler utilizes on each eventing node.
            </summary>
            <remarks>The minimum is 1 and the default is 1.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.HandlerHeaders">
            <summary>
            Code to automatically prepend to top of handler code.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.HandlerFooters">
            <summary>
            Code to automatically append to bottom of handler code.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.EnableAppLogRotation">
            <summary>
            Enable rotating this handlers log() message files.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.AppLogDir">
            <summary>
            Directory to write content of log() message files.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.AppLogMaxSize">
            <summary>
            Rotate logs when file grows to this size in bytes approximately.
            </summary>
            <remarks>The minimum is 1024b and the max is 41943040b.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.AppLogMaxFiles">
            <summary>
            Number of log() message files to retain when rotating.
            </summary>
            <remarks>The minimum is 1 and the default is 10.</remarks>
        </member>
        <member name="P:Couchbase.Management.Eventing.EventingFunctionSettings.CheckpointInterval">
            <summary>
            Number of seconds before writing a progress checkpoint.
            </summary>
            <remarks>The minimum is 1 and the default is 60.</remarks>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionDcpBoundary">
            <summary>
            Indicates where to start dcp stream from (beginning of time, present point) 'from_prior' is deprecated in 6.6.2.
            </summary>
        </member>
        <member name="F:Couchbase.Management.Eventing.EventingFunctionDcpBoundary.Everything">
            <summary>
            Deploy for all data mutations available.
            </summary>
        </member>
        <member name="F:Couchbase.Management.Eventing.EventingFunctionDcpBoundary.FromNow">
            <summary>
            Deploy the handler to process only future data mutations, post deployment.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionDeploymentStatus">
            <summary>
            Indicates if the function is deployed. true=deployed, false=undeployed.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionProcessingStatus">
            <summary>
            Indicates if the function is running (i.e., not paused). true=running, false=paused
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionLogLevel">
            <summary>
            The level of detail in system logging.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionLanguageCompatibility">
            <summary>
            The eventing language version this handler assumes in terms of syntax and behavior.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionCompilationFailureException">
            <summary>
            Thrown when the compilation of the function code failed.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionIdenticalKeyspaceException">
            <summary>
            Thrown when source and metadata key spaces are the same.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Eventing.EventingFunctionManager.UpsertFunctionAsync(Couchbase.Management.Eventing.EventingFunction,Couchbase.Management.Eventing.UpsertFunctionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Eventing.EventingFunctionManager.DropFunctionAsync(System.String,Couchbase.Management.Eventing.DropFunctionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Eventing.EventingFunctionManager.GetAllFunctionsAsync(Couchbase.Management.Eventing.GetAllFunctionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Eventing.EventingFunctionManager.GetFunctionAsync(System.String,Couchbase.Management.Eventing.GetFunctionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Eventing.EventingFunctionManager.PauseFunctionAsync(System.String,Couchbase.Management.Eventing.PauseFunctionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Eventing.EventingFunctionManager.ResumeFunctionAsync(System.String,Couchbase.Management.Eventing.ResumeFunctionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Eventing.EventingFunctionManager.DeployFunctionAsync(System.String,Couchbase.Management.Eventing.DeployFunctionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Eventing.EventingFunctionManager.UndeployFunctionAsync(System.String,Couchbase.Management.Eventing.UndeployFunctionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Eventing.EventingFunctionManager.FunctionsStatus(Couchbase.Management.Eventing.FunctionsStatusOptions)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionNotBootstrappedException">
            <summary>
            Thrown when a function is deployed but not “fully” bootstrapped.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionNotDeployedException">
            <summary>
            Thrown if the function is not deployed, but the action expects it to be.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionNotFoundException">
            <summary>
            Thrown if the function is not found.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionDeployedException">
            <summary>
            Thrown when a function is deployed but the action does not expect it to be.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.EventingFunctionService">
            <inheritdoc cref="T:Couchbase.Management.Eventing.IEventingFunctionService" />
        </member>
        <member name="M:Couchbase.Management.Eventing.EventingFunctionService.GetAsync(System.String,Couchbase.Core.Diagnostics.Tracing.IRequestSpan,Couchbase.Core.Diagnostics.Tracing.IRequestSpan,System.Threading.CancellationToken,Couchbase.Management.Eventing.EventingFunctionKeyspace)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Eventing.EventingFunctionService.PostAsync(System.String,Couchbase.Core.Diagnostics.Tracing.IRequestSpan,Couchbase.Core.Diagnostics.Tracing.IRequestSpan,System.Threading.CancellationToken,Couchbase.Management.Eventing.EventingFunction,Couchbase.Management.Eventing.EventingFunctionKeyspace)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Eventing.EventingFunctionService.DeleteAsync(System.String,Couchbase.Core.Diagnostics.Tracing.IRequestSpan,Couchbase.Core.Diagnostics.Tracing.IRequestSpan,System.Threading.CancellationToken,Couchbase.Management.Eventing.EventingFunctionKeyspace)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Management.Eventing.IEventingFunctionManager">
            <summary>
            The manager allows the user to read functions, modify them and change their deployment state.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Eventing.IEventingFunctionManager.DropFunctionAsync(System.String,Couchbase.Management.Eventing.DropFunctionOptions)">
            <summary>
            Drops a function.
            </summary>
            <param name="name">The function name.</param>
            <param name="options">Any optional parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.Management.Eventing.IEventingFunctionManager.DeployFunctionAsync(System.String,Couchbase.Management.Eventing.DeployFunctionOptions)">
            <summary>
            Deploys a function (from state undeployed to deployed).
            </summary>
            <param name="name">The function name.</param>
            <param name="options">Any optional parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.Management.Eventing.IEventingFunctionManager.GetAllFunctionsAsync(Couchbase.Management.Eventing.GetAllFunctionOptions)">
            <summary>
            Lists all functions (both deployed and undeployed).
            </summary>
            <param name="options">Any optional parameters.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> for enumeration of the results.</returns>
        </member>
        <member name="M:Couchbase.Management.Eventing.IEventingFunctionManager.GetFunctionAsync(System.String,Couchbase.Management.Eventing.GetFunctionOptions)">
            <summary>
            Fetches a specific function.
            </summary>
            <param name="name">The function name.</param>
            <param name="options">Any optional parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.Eventing.IEventingFunctionManager.PauseFunctionAsync(System.String,Couchbase.Management.Eventing.PauseFunctionOptions)">
            <summary>
            Pauses a function.
            </summary>
            <param name="name">The function name.</param>
            <param name="options">Any optional parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.Management.Eventing.IEventingFunctionManager.ResumeFunctionAsync(System.String,Couchbase.Management.Eventing.ResumeFunctionOptions)">
            <summary>
            Resumes a function if it is paused.
            </summary>
            <param name="name">The function name.</param>
            <param name="options">Any optional parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.Management.Eventing.IEventingFunctionManager.UndeployFunctionAsync(System.String,Couchbase.Management.Eventing.UndeployFunctionOptions)">
            <summary>
            Undeploys a function (from state deployed to undeployed).
            </summary>
            <param name="name">The function name.</param>
            <param name="options">Any optional parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.Management.Eventing.IEventingFunctionManager.FunctionsStatus(Couchbase.Management.Eventing.FunctionsStatusOptions)">
            <summary>
            Receives the status of all the eventing functions.
            </summary>
            <param name="options">Any optional parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Management.Eventing.FunctionOptionsBase">
            <summary>
            Base class for event function options.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.FunctionOptionsBase.Timeout">
            <summary>
            A <see cref="T:System.TimeSpan"/> representing the timeout duration.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.FunctionOptionsBase.Token">
            <summary>
            An optional <see cref="T:System.Threading.CancellationToken"/> which will use the default timeout if null.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.FunctionOptionsBase.RequestSpan">
            <summary>
            An optional parent <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/> for tracing.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.FunctionOptionsBase.ClientContextId">
            <summary>
            The unique client context id of request.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.UndeployFunctionOptions">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Management.Eventing.UndeployFunctionOptions.Default">
            <summary>
            Gets a default instance of the options class.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.ResumeFunctionOptions">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Management.Eventing.ResumeFunctionOptions.Default">
            <summary>
            Gets a default instance of the options class.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.PauseFunctionOptions">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Management.Eventing.PauseFunctionOptions.Default">
            <summary>
            Gets a default instance of the options class.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.GetAllFunctionOptions">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Management.Eventing.GetAllFunctionOptions.Default">
            <summary>
            Gets a default instance of the options class.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.GetFunctionOptions">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Management.Eventing.GetFunctionOptions.Default">
            <summary>
            Gets a default instance of the options class.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.DropFunctionOptions">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Management.Eventing.DropFunctionOptions.Default">
            <summary>
            Gets a default instance of the options class.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.DeployFunctionOptions">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Management.Eventing.DeployFunctionOptions.Default">
            <summary>
            Gets a default instance of the options class.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.UpsertFunctionOptions">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Management.Eventing.UpsertFunctionOptions.Default">
            <summary>
            Gets a default instance of the options class.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.FunctionsStatusOptions.Default">
            <summary>
            Gets a default instance of the options class.
            </summary>
        </member>
        <member name="T:Couchbase.Management.Eventing.IEventingFunctionService">
            <summary>
            An HTTP service for doing CRUD operations on a <see cref="T:Couchbase.Management.Eventing.EventingFunction"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Eventing.IEventingFunctionService.GetAsync(System.String,Couchbase.Core.Diagnostics.Tracing.IRequestSpan,Couchbase.Core.Diagnostics.Tracing.IRequestSpan,System.Threading.CancellationToken,Couchbase.Management.Eventing.EventingFunctionKeyspace)">
            <summary>
            Sends a GET request to the eventing management service for a specific eventing function.
            </summary>
            <param name="path">The path of the resource.</param>
            <param name="parentSpan">The parent <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <param name="encodeSpan">The encoding phase <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> token</param>
            <param name="managementScope">The scope of the eventing function</param>
            <returns>A <see cref="T:System.Net.Http.HttpResponseMessage"/> representing the server response</returns>
        </member>
        <member name="M:Couchbase.Management.Eventing.IEventingFunctionService.PostAsync(System.String,Couchbase.Core.Diagnostics.Tracing.IRequestSpan,Couchbase.Core.Diagnostics.Tracing.IRequestSpan,System.Threading.CancellationToken,Couchbase.Management.Eventing.EventingFunction,Couchbase.Management.Eventing.EventingFunctionKeyspace)">
            <summary>
            Sends a POST request to the eventing management service inserting or updating a <see cref="T:Couchbase.Management.Eventing.EventingFunction"/>
            </summary>
            <param name="path">The path of the resource.</param>
            <param name="parentSpan">The parent <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <param name="encodeSpan">The encoding phase <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> token</param>
            <param name="eventingFunction">The <see cref="T:Couchbase.Management.Eventing.EventingFunction"/> to send to the server</param>
            <param name="managementScope">The scope of the eventing function</param>
            <returns>A <see cref="T:System.Net.Http.HttpResponseMessage"/> representing the server response</returns>
        </member>
        <member name="M:Couchbase.Management.Eventing.IEventingFunctionService.DeleteAsync(System.String,Couchbase.Core.Diagnostics.Tracing.IRequestSpan,Couchbase.Core.Diagnostics.Tracing.IRequestSpan,System.Threading.CancellationToken,Couchbase.Management.Eventing.EventingFunctionKeyspace)">
            <summary>
            Sends a DELETE request for a particular <see cref="T:Couchbase.Management.Eventing.EventingFunction"/> that has already been published.
            </summary>
            <param name="path">The path of the resource.</param>
            <param name="parentSpan">The parent <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <param name="encodeSpan">The encoding phase <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/></param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> token</param>
            <param name="managementScope">The scope of the eventing function</param>
            <returns>A <see cref="T:System.Net.Http.HttpResponseMessage"/> representing the server response</returns>
        </member>
        <member name="T:Couchbase.Management.Eventing.Internal.BucketAccessConverter">
            <summary>
            This converter is used internally for mapping <see cref="T:Couchbase.Management.Eventing.EventingFunctionBucketAccess"/>
            </summary>
        </member>
        <member name="M:Couchbase.Management.Eventing.Internal.ErrorResponse.GetDescription">
            <summary>
            Gets the description of the failure handling the case where
            the server returns either a string or an object that contains
            the description.
            </summary>
            <returns>The description of the failure or null if not found.</returns>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.Primary">
            <summary>
            An alternate version that ignores comments. This is particularly important for unit tests,
            which have comments in the JSON files.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.DeploymentConfig">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunction">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionBucketAccess">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionBucketBinding">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionConstantBinding">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionDcpBoundary">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionDeploymentStatus">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionLanguageCompatibility">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionLogLevel">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionProcessingStatus">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionSettings">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionState">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionStatus">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionUrlAuthBasic">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionUrlAuthBearer">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionUrlAuthDigest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionUrlBinding">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionUrlNoAuth">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingStatus">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.FunctionScope">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.ErrorResponse">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionBucketBindingDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionRequestDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionResponseDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionSettingsRequestDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionSettingsResponseDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.RuntimeInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.QueryScanConsistency">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.EventingFunctionList">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.ListEventingFunctionBucketBinding">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.ListEventingFunctionConstantBinding">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.ListEventingFunctionState">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.ListEventingFunctionUrlBinding">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.ListString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.JsonElement">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.TimeSpan">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.Int64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Eventing.Internal.EventingSerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Eventing.Internal.EventingSerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Management.Eventing.Internal.EventingSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Management.Eventing.Internal.EventingSerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Couchbase.Management.Eventing.Internal.QueryScanConsistencyConverter">
            <summary>
            This converter is used internally for converting <see cref="T:Couchbase.Query.QueryScanConsistency"/> in cases where "none" is
            returned by the server and converting it to <see cref="F:Couchbase.Query.QueryScanConsistency.NotBounded"/> in the SDK.
            </summary>
        </member>
        <member name="T:Couchbase.Management.ManagementSerializerContext">
            <summary>
            Internal <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> used for management operations.
            </summary>
            <remarks>
            This is separate from the context used for general internal operations as an optimization.
            There is some small cost to the static constructor of a JsonSerializerContext, which scales based
            on the number of types included. Since management operations are more rarely used than others
            we keep them on a separate context.
            </remarks>
        </member>
        <member name="P:Couchbase.Management.ManagementSerializerContext.ManagementErrorContext">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.ManagementSerializerContext.RetryReason">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.ManagementSerializerContext.BucketSettings">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.ManagementSerializerContext.EventingFunctionErrorContext">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.ManagementSerializerContext.ListRetryReason">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.ManagementSerializerContext.ListBucketSettings">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.ManagementSerializerContext.HttpStatusCode">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.ManagementSerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.ManagementSerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Couchbase.Management.ManagementSerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Couchbase.Management.ManagementSerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Management.ManagementSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Management.ManagementSerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Management.Query.BuildDeferredQueryIndexOptions.ScopeName(System.String)">
            <summary>
            Sets the scope name for this query management operation.
            </summary>
            <remarks>If the scope name is set then the collection name must be set as well.</remarks>
            <param name="scopeName">The scope name to use.</param>
            <returns>A CreateQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.BuildDeferredQueryIndexOptions.CollectionName(System.String)">
            <summary>
            Sets the collection name for this query management operation.
            </summary>
            <remarks>If the collection name is set then the scope name must be set as well.</remarks>
            <param name="collectionName">The collection name to use.</param>
            <returns>A CreateQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.BuildDeferredQueryIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.BuildDeferredQueryIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="T:Couchbase.Management.Query.CollectionQueryIndexManager">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Query.CollectionQueryIndexManager.GetAllIndexesAsync(Couchbase.Management.Query.GetAllQueryIndexOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Query.CollectionQueryIndexManager.CreateIndexAsync(System.String,System.Collections.Generic.IEnumerable{System.String},Couchbase.Management.Query.CreateQueryIndexOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Query.CollectionQueryIndexManager.CreatePrimaryIndexAsync(Couchbase.Management.Query.CreatePrimaryQueryIndexOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Query.CollectionQueryIndexManager.DropIndexAsync(System.String,Couchbase.Management.Query.DropQueryIndexOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Query.CollectionQueryIndexManager.DropPrimaryIndexAsync(Couchbase.Management.Query.DropPrimaryQueryIndexOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Query.CollectionQueryIndexManager.WatchIndexesAsync(System.Collections.Generic.IEnumerable{System.String},System.TimeSpan,Couchbase.Management.Query.WatchQueryIndexOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Query.CollectionQueryIndexManager.BuildDeferredIndexesAsync(Couchbase.Management.Query.BuildDeferredQueryIndexOptions)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Query.CreatePrimaryQueryIndexOptions.ScopeName(System.String)">
            <summary>
            Sets the scope name for this query management operation.
            </summary>
            <remarks>If the scope name is set then the collection name must be set as well.</remarks>
            <param name="scopeName">The scope name to use.</param>
            <returns>A CreateQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.CreatePrimaryQueryIndexOptions.CollectionName(System.String)">
            <summary>
            Sets the collection name for this query management operation.
            </summary>
            <remarks>If the collection name is set then the scope name must be set as well.</remarks>
            <param name="collectionName">The collection name to use.</param>
            <returns>A CreateQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.CreatePrimaryQueryIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.CreatePrimaryQueryIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.CreateQueryIndexOptions.ScopeName(System.String)">
            <summary>
            Sets the scope name for this query management operation.
            </summary>
            <remarks>If the scope name is set then the collection name must be set as well.</remarks>
            <param name="scopeName">The scope name to use.</param>
            <returns>A CreateQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.CreateQueryIndexOptions.CollectionName(System.String)">
            <summary>
            Sets the collection name for this query management operation.
            </summary>
            <remarks>If the collection name is set then the scope name must be set as well.</remarks>
            <param name="collectionName">The collection name to use.</param>
            <returns>A CreateQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.CreateQueryIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.CreateQueryIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.DropPrimaryQueryIndexOptions.ScopeName(System.String)">
            <summary>
            Sets the scope name for this query management operation.
            </summary>
            <remarks>If the scope name is set then the collection name must be set as well.</remarks>
            <param name="scopeName">The scope name to use.</param>
            <returns>A DropPrimaryQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.DropPrimaryQueryIndexOptions.CollectionName(System.String)">
            <summary>
            Sets the collection name for this query management operation.
            </summary>
            <remarks>If the collection name is set then the scope name must be set as well.</remarks>
            <param name="collectionName">The collection name to use.</param>
            <returns>A DropPrimaryQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.DropPrimaryQueryIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.DropPrimaryQueryIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.DropQueryIndexOptions.ScopeName(System.String)">
            <summary>
            Sets the scope name for this query management operation.
            </summary>
            <remarks>If the scope name is set then the collection name must be set as well.</remarks>
            <param name="scopeName">The scope name to use.</param>
            <returns>A DropQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.DropQueryIndexOptions.CollectionName(System.String)">
            <summary>
            Sets the collection name for this query management operation.
            </summary>
            <remarks>If the collection name is set then the scope name must be set as well.</remarks>
            <param name="collectionName">The collection name to use.</param>
            <returns>A DropQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.DropQueryIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.DropQueryIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.GetAllQueryIndexOptions.ScopeName(System.String)">
            <summary>
            Sets the scope name for this query management operation.
            </summary>
            <remarks>If the scope name is set then the collection name must be set as well.</remarks>
            <param name="scopeName">The scope name to use.</param>
            <returns>A GetAllQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.GetAllQueryIndexOptions.CollectionName(System.String)">
            <summary>
            Sets the collection name for this query management operation.
            </summary>
            <remarks>If the collection name is set then the scope name must be set as well.</remarks>
            <param name="collectionName">The collection name to use.</param>
            <returns>A GetAllQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.GetAllQueryIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.GetAllQueryIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="T:Couchbase.Management.Query.ICollectionQueryIndexManager">
            <summary>
            This interface contains the means for managing collection-level indexes used for queries.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Query.ICollectionQueryIndexManager.GetAllIndexesAsync(Couchbase.Management.Query.GetAllQueryIndexOptions)">
            <summary>
            Fetches all indexes from the server for the given bucket (limiting to scope/collection if applicable).
            </summary>
            <param name="options">The operational to specify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the results of the query.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.ICollectionQueryIndexManager.CreateIndexAsync(System.String,System.Collections.Generic.IEnumerable{System.String},Couchbase.Management.Query.CreateQueryIndexOptions)">
            <summary>
            Creates a new index.
            </summary>
            <param name="indexName">The name of the index.</param>
            <param name="fields">The fields to create the index over.</param>
            <param name="options">Any optional parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.ICollectionQueryIndexManager.CreatePrimaryIndexAsync(Couchbase.Management.Query.CreatePrimaryQueryIndexOptions)">
            <summary>
            Creates a new primary index on the bucket in scope.
            </summary>
            <param name="options">Any optional fields.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.ICollectionQueryIndexManager.DropIndexAsync(System.String,Couchbase.Management.Query.DropQueryIndexOptions)">
            <summary>
            Drops an index.
            </summary>
            <param name="indexName">The name of the index to drop.</param>
            <param name="options">Any optional parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.ICollectionQueryIndexManager.DropPrimaryIndexAsync(Couchbase.Management.Query.DropPrimaryQueryIndexOptions)">
            <summary>
            Drops a primary index.
            </summary>
            <param name="options">Any optional parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.ICollectionQueryIndexManager.WatchIndexesAsync(System.Collections.Generic.IEnumerable{System.String},System.TimeSpan,Couchbase.Management.Query.WatchQueryIndexOptions)">
            <summary>
            An internal collection reference for the query_context.
            </summary>
            <param name="indexNames">The names of the indexes to watch.</param>
            <param name="duration">The time allowed for the operation to be terminated.</param>
            <param name="options">Any optional parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.ICollectionQueryIndexManager.BuildDeferredIndexesAsync(Couchbase.Management.Query.BuildDeferredQueryIndexOptions)">
            <summary>
            Build Deferred builds all indexes which are currently in deferred state.
            </summary>
            <param name="options">Any optional parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for awaiting.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.WatchQueryIndexOptions.ScopeName(System.String)">
            <summary>
            Sets the scope name for this query management operation.
            </summary>
            <remarks>If the scope name is set then the collection name must be set as well.</remarks>
            <param name="scopeName">The scope name to use.</param>
            <returns>A WatchQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.WatchQueryIndexOptions.CollectionName(System.String)">
            <summary>
            Sets the collection name for this query management operation.
            </summary>
            <remarks>If the collection name is set then the scope name must be set as well.</remarks>
            <param name="collectionName">The collection name to use.</param>
            <returns>A WatchQueryIndexOptions for chaining options.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.WatchQueryIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Query.WatchQueryIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.AllowQueryingSearchIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.AllowQueryingSearchIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.DisallowQueryingSearchIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.DisallowQueryingSearchIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.DropSearchIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.DropSearchIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.FreezePlanSearchIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.FreezePlanSearchIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.GetAllSearchIndexesOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.GetAllSearchIndexesOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.GetSearchIndexDocumentCountOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.GetSearchIndexDocumentCountOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.GetSearchIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.GetSearchIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.PauseIngestSearchIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.PauseIngestSearchIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.ResumeIngestSearchIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.ResumeIngestSearchIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.UnfreezePlanSearchIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.UnfreezePlanSearchIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.UpsertSearchIndexOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Search.UpsertSearchIndexOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.AvailableRolesOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.AvailableRolesOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.ChangePasswordOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.ChangePasswordOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.DropGroupOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.DropGroupOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.DropUserOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.DropUserOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.GetAllGroupsOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.GetAllGroupsOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.GetAllUsersOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.GetAllUsersOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.GetGroupOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.GetGroupOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.GetUserOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.GetUserOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.Role.#ctor(System.String)">
            <summary>
            Creates a new system-wide role (not specific to a bucket)
            </summary>
            <param name="roleName">symbolic name of the role</param>
        </member>
        <member name="M:Couchbase.Management.Users.Role.#ctor(System.String,System.String)">
            <summary>
            Creates a new role. If the bucket parameter is null, a system-wide role is created.
            Otherwise, the role applies to all scopes and collections within the bucket.
            </summary>
            <param name="roleName">symbolic name of the role.</param>
            <param name="bucketName">bucket name for the role.</param>
        </member>
        <member name="M:Couchbase.Management.Users.Role.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new role. If the bucket parameter is null, a system-wide role is created.
            Otherwise, the role applies to the scope and collections in the scope and bucket.
            </summary>
            <param name="roleName"></param>
            <param name="bucketName"></param>
            <param name="scopeName"></param>
        </member>
        <member name="M:Couchbase.Management.Users.Role.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new role. If the bucket parameter is null, a system-wide role is created.
            Otherwise, the role applies to the scope and collection provided in the bucket.
            </summary>
            <param name="roleName"></param>
            <param name="bucketName"></param>
            <param name="scopeName"></param>
            <param name="collectionName"></param>
        </member>
        <member name="P:Couchbase.Management.Users.Role.Name">
            <summary>
            The name of the Role.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.Role.Bucket">
            <summary>
            Gives the Role access to a specific Bucket.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.Role.Scope">
            <summary>
            Gives the Role access to a specific Scope.
            <remarks>Bucket must be non-null nor a wildcard (*) for Scope to be set.</remarks>
            </summary>
            <remarks>Uncommitted: this feature may change in the future.</remarks>
        </member>
        <member name="P:Couchbase.Management.Users.Role.Collection">
            <summary>
            Gives the Role access to a specific Collection.
            <remarks>Bucket and Scope must be non-null nor a wildcard (*)  for Scope to be set.</remarks>
            <remarks>Uncommitted: this feature may change in the future.</remarks>
            </summary>
        </member>
        <member name="M:Couchbase.Management.Users.Role.Validate">
            <summary>
            Validates that the internal state of the Role.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Users.UpsertGroupOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.UpsertGroupOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.UpsertUserOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
            Allows to pass in a custom CancellationToken from a CancellationTokenSource.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="cancellationToken">The Token to cancel the operation.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Management.Users.UpsertUserOptions.Timeout(System.TimeSpan)">
            <summary>
            Allows to set a Timeout for the operation.
            Note that CancellationToken() takes precedence over Timeout(). If both CancellationToken and Timeout are set, the former will be used in the operation.
            </summary>
            <param name="timeout">The duration of the Timeout. Set to 75s by default.</param>
            <returns>This class for method chaining.</returns>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.GroupDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.Origin">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.RoleAndDescription">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.RoleDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.UserAndMetadataDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.ListGroupDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.ListOrigin">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.ListRoleAndDescription">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.ListRoleDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.ListUserAndMetadataDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.ListString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.DateTimeOffset">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Users.UserManagementSerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Users.UserManagementSerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Management.Users.UserManagementSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Management.Users.UserManagementSerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Couchbase.Management.Views.IViewIndexManagerFactory">
            <summary>
            Creates an <see cref="T:Couchbase.Management.Views.IViewIndexManager"/> for a given bucket.
            </summary>
        </member>
        <member name="M:Couchbase.Management.Views.IViewIndexManagerFactory.Create(System.String)">
            <summary>
            Creates an <see cref="T:Couchbase.Management.Views.IViewIndexManager"/> for a given bucket.
            </summary>
            <param name="bucketName">Name of the bucket.</param>
            <returns>The <see cref="T:Couchbase.Management.Views.IViewIndexManager"/>.</returns>
        </member>
        <member name="T:Couchbase.Management.Views.ViewIndexManagerFactory">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Management.Views.ViewIndexManagerFactory.Create(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.MemcachedBucket.ViewQueryAsync``2(System.String,System.String,Couchbase.Views.ViewOptions)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.NetworkResolution">
            <summary>
            Specifies the network resolution strategy to use for alternative network; used in some container
            environments where there maybe internal and external addresses for connecting.
            </summary>
        </member>
        <member name="F:Couchbase.NetworkResolution.Auto">
            <summary>
            Alternative addresses will be used if available. The default.
            </summary>
        </member>
        <member name="F:Couchbase.NetworkResolution.Default">
            <summary>
            Do not use alternative addresses. Uses the internal addresses.
            </summary>
        </member>
        <member name="F:Couchbase.NetworkResolution.External">
            <summary>
            Use alternative addresses.
            </summary>
        </member>
        <member name="T:Couchbase.Query.BlockQueryResult`1">
            <summary>
            The result of a N1QL query, read without streaming results.
            </summary>
            <typeparam name="T">The Type of each row returned.</typeparam>
            <seealso cref="T:Couchbase.Query.IQueryResult`1" />
        </member>
        <member name="M:Couchbase.Query.BlockQueryResult`1.#ctor(System.IO.Stream,Couchbase.Core.IO.Serializers.ITypeSerializer,System.IDisposable)">
            <summary>
            Creates a new StreamingQueryResult.
            </summary>
            <param name="responseStream"><see cref="T:System.IO.Stream"/> to read.</param>
            <param name="deserializer"><see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> used to deserialize objects.</param>
            <param name="ownedForCleanup">Additional object to dispose when complete.</param>
        </member>
        <member name="M:Couchbase.Query.BlockQueryResult`1.InitializeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Query.BlockQueryResult`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Query.ErrorPrepared">
            <summary>
            An enum listing the N1QL codes that should trigger a retry for non adhoc queries.
            </summary>
            <remarks>Generic (5000) also needs a check of the message content to determine if
            retry is applicable or not</remarks>
        </member>
        <member name="T:Couchbase.Query.FailureCountingUri">
            <summary>
            A decorator around a <see cref="T:System.Uri"/> that maintains count of the whether the last request failed.
            </summary>
        </member>
        <member name="M:Couchbase.Query.FailureCountingUri.#ctor(System.String,System.UriKind)">
            <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException" />, instead.<paramref name="uriString" /> contains a relative URI and <paramref name="uriKind" /> is <see cref="F:System.UriKind.Absolute" />.or<paramref name="uriString" /> contains an absolute URI and <paramref name="uriKind" /> is <see cref="F:System.UriKind.Relative" />.or<paramref name="uriString" /> is empty.-or- The scheme specified in <paramref name="uriString" /> is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)" />.-or- <paramref name="uriString" /> contains too many slashes.-or- The password specified in <paramref name="uriString" /> is not valid.-or- The host name specified in <paramref name="uriString" /> is not valid.-or- The file name specified in <paramref name="uriString" /> is not valid. -or- The user name specified in <paramref name="uriString" /> is not valid.-or- The host or authority name specified in <paramref name="uriString" /> cannot be terminated by backslashes.-or- The port number specified in <paramref name="uriString" /> is not valid or cannot be parsed.-or- The length of <paramref name="uriString" /> exceeds 65519 characters.-or- The length of the scheme specified in <paramref name="uriString" /> exceeds 1023 characters.-or- There is an invalid character sequence in <paramref name="uriString" />.-or- The MS-DOS path specified in <paramref name="uriString" /> must start with c:\\.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="uriKind" /> is invalid. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uriString" /> is null. </exception>
        </member>
        <member name="M:Couchbase.Query.FailureCountingUri.#ctor(System.Uri,System.String)">
            <exception cref="T:System.ArgumentNullException"><paramref name="baseUri" /> is null. </exception>
            <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException" />, instead.The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is empty or contains only spaces.-or- The scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> contains too many slashes.-or- The password specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The host name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The file name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid. -or- The user name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The host or authority name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> cannot be terminated by backslashes.-or- The port number specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid or cannot be parsed.-or- The length of the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 65519 characters.-or- The length of the scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 1023 characters.-or- There is an invalid character sequence in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" />.-or- The MS-DOS path specified in <paramref name="baseUri" /> must start with c:\\.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUri" /> is not an absolute <see cref="T:System.Uri" /> instance. </exception>
        </member>
        <member name="M:Couchbase.Query.FailureCountingUri.#ctor(System.Uri,System.Uri)">
            <exception cref="T:System.ArgumentException"><paramref name="baseUri" /> is not an absolute <see cref="T:System.Uri" /> instance. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseUri" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUri" /> is not an absolute <see cref="T:System.Uri" /> instance. </exception>
            <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException" />, instead.The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is empty or contains only spaces.-or- The scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> contains too many slashes.-or- The password specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The host name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The file name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid. -or- The user name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The host or authority name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> cannot be terminated by backslashes.-or- The port number specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid or cannot be parsed.-or- The length of the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 65519 characters.-or- The length of the scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 1023 characters.-or- There is an invalid character sequence in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" />.-or- The MS-DOS path specified in <paramref name="baseUri" /> must start with c:\\.</exception>
        </member>
        <member name="M:Couchbase.Query.FailureCountingUri.IncrementFailed">
            <summary>
            Increments the failed count by 1.
            </summary>
        </member>
        <member name="M:Couchbase.Query.FailureCountingUri.ClearFailed">
            <summary>
            Sets the failed count to zero indicating the <see cref="T:System.Uri"/> will execute requests successfully.
            </summary>
        </member>
        <member name="P:Couchbase.Query.FailureCountingUri.FailedCount">
            <summary>
            Gets the failed count.
            </summary>
            <value>
            The failed count.
            </value>
        </member>
        <member name="M:Couchbase.Query.FailureCountingUri.IsHealthy(System.Int32)">
            <summary>
            Determines whether the specified threshold is bueno.
            </summary>
            <param name="threshold">The threshold.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Query.IQueryCacheInvalidator">
            <summary>
            Provides a method signature for invalidating and clearing a cache.
            </summary>
        </member>
        <member name="M:Couchbase.Query.IQueryCacheInvalidator.InvalidateQueryCache">
            <summary>
            Invalidates and clears the query cache. This method can be used to explicitly clear the internal N1QL query cache. This cache will
            be filled with non-adhoc query statements (query plans) to speed up those subsequent executions. Triggering this method will wipe
            out the complete cache, which will not cause an interruption but rather all queries need to be re-prepared internally. This method
            is likely to be deprecated in the future once the server side query engine distributes its state throughout the cluster.
            </summary>
            <returns>An <see cref="T:System.Int32"/> representing the size of the cache before it was cleared.</returns>
        </member>
        <member name="T:Couchbase.Query.IQueryClient">
            <summary>
            An interface for client-side support for executing N1QL queries against a Couchbase Server.
            </summary>
        </member>
        <member name="P:Couchbase.Query.IQueryClient.LastActivity">
            <summary>
            Gets the timestamp of the last activity.
            </summary>
        </member>
        <member name="M:Couchbase.Query.IQueryClient.QueryAsync``1(System.String,Couchbase.Query.QueryOptions)">
            <summary>
            Asynchronously executes an a N1QL query request against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="statement">The query statement.</param>
            <param name="options">The <see cref="T:Couchbase.Query.QueryOptions"/> to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="T:Couchbase.Query.IQueryResult`1">
            <summary>
            Interface for the results of a N1QL query.
            </summary>
            <typeparam name="T">Type of row returned by the N1QL query.</typeparam>
        </member>
        <member name="P:Couchbase.Query.IQueryResult`1.Rows">
            <summary>
            The results of the query as a <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <remarks>
            In most cases, the rows may be enumerated only once. If it's necessary to enumerate more than
            once, use <see cref="M:System.Linq.AsyncEnumerable.ToListAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)"/> to convert to a list.
            ToListAsync can also be used to enumerate with a synchronous foreach loop in C# 7.
            </remarks>
        </member>
        <member name="P:Couchbase.Query.IQueryResult`1.MetaData">
            <summary>
            Gets the meta data associated with the query result. May not be fully populated
            until after the rows are enumerated.
            </summary>
        </member>
        <member name="P:Couchbase.Query.IQueryResult`1.Errors">
            <summary>
            Gets a list of 0 or more error objects; if an error occurred during processing of the request, it will be represented by an error object in this list.
            </summary>
        </member>
        <member name="T:Couchbase.Query.MutationState">
            <summary>
            Represents a composition of <see cref="T:Couchbase.Core.MutationToken"/>'s into a single
            unit for performing "read your own writes" or RYOW semantics on a N1QL query.
            </summary>
        </member>
        <member name="M:Couchbase.Query.MutationState.From(Couchbase.KeyValue.IMutationResult[])">
            <summary>
            Creates a <see cref="T:Couchbase.Core.MutationToken"/> from a list of <see cref="T:Couchbase.KeyValue.IMutationResult"/>'s assuming enhanced durability is enabled.
            </summary>
            <param name="mutationResults">The mutationResults.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Query.MutationState.From(Couchbase.Query.MutationState)">
            <summary>
            Creates a<see cref= "T:Couchbase.Query.MutationState" /> from another <see cref="T:Couchbase.Query.MutationState"/> assuming enhanced durability is enabled.
            </summary>
            <param name="mutationState">State of the mutation.</param>
            <returns>The <see cref="T:Couchbase.Query.MutationState"/> object itself.</returns>
        </member>
        <member name="M:Couchbase.Query.MutationState.Add(Couchbase.KeyValue.IMutationResult[])">
            <summary>
            Adds a <see cref="T:Couchbase.Core.MutationToken"/> to the <see cref="T:Couchbase.Query.MutationState"/> from a list of <see cref="T:Couchbase.KeyValue.IMutationResult"/> assuming enhanced durability is enabled.
            </summary>
            <param name="mutationResults">The mutationResults.</param>
            <exception cref="T:System.ArgumentException">If a <see cref="T:Couchbase.KeyValue.IMutationResult"/> does not contain a valid <see cref="T:Couchbase.Core.MutationToken"/>.</exception>
            <returns>The <see cref="T:Couchbase.Query.MutationState"/> object itself.</returns>
        </member>
        <member name="M:Couchbase.Query.MutationState.Add(Couchbase.Query.MutationState)">
            <summary>
            Adds the <see cref="T:Couchbase.Core.MutationToken"/>'s from another <see cref="T:Couchbase.Query.MutationState"/>.
            </summary>
            <param name="mutationState">State of the mutation.</param>
            <returns>The <see cref="T:Couchbase.Query.MutationState"/> object itself.</returns>
        </member>
        <member name="M:Couchbase.Query.MutationState.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of <see cref="T:Couchbase.Core.MutationToken"/>'s.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Couchbase.Query.MutationState.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of <see cref="T:Couchbase.Core.MutationToken"/>'s.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Couchbase.Query.MutationState.ExportForSearch(System.String)">
            <summary>
            Exports this <see cref="T:Couchbase.Core.MutationToken"/> in the FTS/Search specific format.
            </summary>
            <param name="indexName">The index name as the key.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> in the correct FTS/Search format.</returns>
        </member>
        <member name="T:Couchbase.Query.QueryClient">
            <summary>
            A <see cref="T:Couchbase.Query.QueryClient" /> implementation for executing N1QL queries against a Couchbase Server.
            </summary>
        </member>
        <member name="M:Couchbase.Query.QueryClient.InvalidateQueryCache">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Query.QueryClient.QueryAsync``1(System.String,Couchbase.Query.QueryOptions)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Query.QueryInterpolatedStringHandler">
            <summary>
            Provides a handler used by the language compiler to process interpolated strings into
            N1QL queries with positional parameters.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QueryInterpolatedStringHandler.QueryOptions">
            <summary>
            The <see cref="P:Couchbase.Query.QueryInterpolatedStringHandler.QueryOptions"/> to be used when executing the query.
            </summary>
            <remarks>
            Positional parameters will be added to these options as <see cref="M:Couchbase.Query.QueryInterpolatedStringHandler.AppendFormatted(System.String)"/>
            or its overloads are called.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a handler used by the language compiler to process interpolated strings into
            N1QL queries with positional parameters.
            </summary>
            <param name="literalLength">The number of constant characters outside of interpolation expressions in the interpolated string.</param>
            <param name="formattedCount">The number of interpolation expressions in the interpolated string.</param>
            <remarks>
            This is intended to be called only by compiler-generated code. Arguments are not validated as they'd
            otherwise be for members intended to be used directly.
            <see cref="P:Couchbase.Query.QueryInterpolatedStringHandler.QueryOptions"/> will be defaulted to AdHoc of <c>false</c>.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.#ctor(System.Int32,System.Int32,Couchbase.Query.QueryOptions)">
            <summary>
            Creates a handler used by the language compiler to process interpolated strings into
            N1QL queries with positional parameters.
            </summary>
            <param name="literalLength">The number of constant characters outside of interpolation expressions in the interpolated string.</param>
            <param name="formattedCount">The number of interpolation expressions in the interpolated string.</param>
            <param name="queryOptions">Options to enrich with parameters as the interpolated string is processed.</param>
            <remarks>
            This is intended to be called only by compiler-generated code. Arguments are not validated as they'd
            otherwise be for members intended to be used directly.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.AppendLiteral(System.String)">
            <summary>
            Writes the specified string to the handler.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.AppendFormatted(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the specified value to the handler as a positional parameter.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.AppendFormatted(System.ReadOnlySpan{System.Char},System.Int32,System.String)">
            <summary>Writes the specified value to the handler as a positional parameter.</summary>
            <param name="value">The value to write.</param>
            <param name="alignment">Ignored.</param>
            <param name="format">Ignored.</param>
            <remarks>
            Provided for API compatibility, <paramref name="alignment"/> and <paramref name="format"/> are ignored.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.AppendFormatted``1(``0)">
            <summary>
            Writes the specified value to the handler as a positional parameter.
            </summary>
            <param name="value">The value to write.</param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.AppendFormatted``1(``0,System.String)">
            <summary>
            Writes the specified value to the handler as a positional parameter.
            </summary>
            <param name="value">The value to write.</param>
            <param name="format">Ignored.</param>
            <typeparam name="T">The type of the value to write.</typeparam>
            <remarks>
            Provided for API compatibility, <paramref name="format"/> is ignored.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.AppendFormatted``1(``0,System.Int32)">
            <summary>
            Writes the specified value to the handler as a positional parameter.
            </summary>
            <param name="value">The value to write.</param>
            <param name="alignment">Ignored.</param>
            <typeparam name="T">The type of the value to write.</typeparam>
            <remarks>
            Provided for API compatibility, <paramref name="alignment"/> is ignored.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.AppendFormatted``1(``0,System.Int32,System.String)">
            <summary>
            Writes the specified value to the handler as a positional parameter.
            </summary>
            <param name="value">The value to write.</param>
            <param name="alignment">Ignored.</param>
            <param name="format">Ignored.</param>
            <typeparam name="T">The type of the value to write.</typeparam>
            <remarks>
            Provided for API compatibility, <paramref name="alignment"/> and <paramref name="format"/> are ignored.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.AppendFormatted(System.Object,System.Int32,System.String)">
            <summary>
            Writes the specified value to the handler as a positional parameter.
            </summary>
            <param name="value">The value to write.</param>
            <param name="alignment">Ignored.</param>
            <param name="format">Ignored.</param>
            <remarks>
            Provided for API compatibility, <paramref name="alignment"/> and <paramref name="format"/> are ignored.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.AppendFormatted(System.String)">
            <summary>
            Writes the specified value to the handler as a positional parameter.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.AppendFormatted(System.String,System.Int32,System.String)">
            <summary>
            Writes the specified value to the handler as a positional parameter.
            </summary>
            <param name="value">The value to write.</param>
            <param name="alignment">Ignored.</param>
            <param name="format">Ignored.</param>
            <remarks>
            Provided for API compatibility, <paramref name="alignment"/> and <paramref name="format"/> are ignored.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.ToString">
            <summary>
            Gets the built N1QL query.
            </summary>
            <returns>The built N1QL query.</returns>
        </member>
        <member name="M:Couchbase.Query.QueryInterpolatedStringHandler.ToStringAndClear">
            <summary>
            Gets the built N1QL query and clears the handler.
            </summary>
            <returns>The built N1QL query.</returns>
            <remarks>
            This releases any resources used by the handler. The method should be invoked only
            once and as the last thing performed on the handler. Subsequent use is erroneous, ill-defined,
            and may destabilize the process, as may using any other copies of the handler after ToStringAndClear
            is called on any one of them.
            </remarks>
        </member>
        <member name="P:Couchbase.Query.QueryMetaData.ClientContextId">
            <summary>
            Gets the clientContextID of the request, if one was supplied. Used for debugging.
            </summary>
            <value>
            The client context identifier.
            </value>
        </member>
        <member name="P:Couchbase.Query.QueryMetaData.Metrics">
            <summary>
            Gets an object containing metrics about the request.
            </summary>
            <value>
            The metrics.
            </value>
        </member>
        <member name="P:Couchbase.Query.QueryMetaData.Profile">
            <summary>
            Gets the request N1QL query profile.
            </summary>
            <value>
            The profile.
            </value>
        </member>
        <member name="P:Couchbase.Query.QueryMetaData.RequestId">
            <summary>
            Gets A unique identifier for the response.
            </summary>
            <value>
            The unique identifier for the response.
            </value>
        </member>
        <member name="P:Couchbase.Query.QueryMetaData.Signature">
            <summary>
            Gets the schema of the results. Present only when the query completes successfully.
            </summary>
            <value>
            The signature of the schema of the request.
            </value>
        </member>
        <member name="P:Couchbase.Query.QueryMetaData.Status">
            <summary>
            Gets the status of the request; possible values are: success, running, errors, completed, stopped, timeout, fatal.
            </summary>
            <value>
            The status of the request.
            </value>
        </member>
        <member name="P:Couchbase.Query.QueryMetaData.Warnings">
            <summary>
            Gets a list of 0 or more warning objects; if a warning occurred during processing of the request, it will be represented by a warning object in this list.
            </summary>
            <value>
            The warnings.
            </value>
        </member>
        <member name="P:Couchbase.Query.QueryMetaData.LastDispatchedToNode">
            <summary>
            Gets the base URI of last node the query was sent to.
            </summary>
        </member>
        <member name="T:Couchbase.Query.QueryOptions">
            <summary>
            Options to control execution of a N1QL query.
            </summary>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.#ctor">
            <summary>
            Creates a new QueryOptions object.
            </summary>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.#ctor(System.String)">
            <summary>
            Creates a new QueryOptions object with a N1QL query statement.
            </summary>
            <param name="statement">A N1QL query statement.</param>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.#ctor(Couchbase.Query.QueryPlan,System.String)">
            <summary>
            Creates a new QueryOptions object with an existing <see cref="M:Couchbase.Query.QueryOptions.QueryPlan(Couchbase.Query.QueryPlan)"/>.
            </summary>
            <param name="plan">The <see cref="M:Couchbase.Query.QueryOptions.QueryPlan(Couchbase.Query.QueryPlan)"/>.</param>
            <param name="originalStatement">The original N1QL query statement used to generate the plan.</param>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.UseReplica(System.Nullable{System.Boolean})">
            <summary>
            Allows querying data from replicas.
            True: Allows the server to read potentially stale data from replica vBuckets.
            False: The server must use up-to-date data from primaries (nodes which own the vBucket containing the data).
            </summary>
            <param name="useReplica"></param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Query.QueryOptions.UseReplicaHasValue">
            <summary>
            For internal use to get the value of UseReplica.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QueryOptions.BucketName">
            <summary>
            The bucket name for tracing.
            </summary>
            <remarks>For internal use only</remarks>
        </member>
        <member name="P:Couchbase.Query.QueryOptions.ScopeName">
            <summary>
            The bucket name for tracing.
            </summary>
            <remarks>For internal use only</remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Overrides the global <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/> defined in <see cref="T:Couchbase.ClusterOptions"/> for a request.
            </summary>
            <param name="retryStrategy">The <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/> to use for a single request.</param>
            <returns>The options.</returns>
        </member>
        <member name="P:Couchbase.Query.QueryOptions.IsPrepared">
            <summary>
                Returns true if the request is a prepared statement
            </summary>
        </member>
        <member name="P:Couchbase.Query.QueryOptions.IsAdHoc">
            <summary>
                Gets a value indicating whether this query statement is to executed in an ad-hoc manner.
            </summary>
            <value>
                <c>true</c> if this instance is ad-hoc; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Query.QueryOptions.CurrentContextId">
            <summary>
                Gets the context identifier for the N1QL query request/response. Useful for debugging.
            </summary>
            <remarks>This value changes for every request./></remarks>
            <value>
                The context identifier.
            </value>
        </member>
        <member name="P:Couchbase.Query.QueryOptions.Serializer">
            <summary>
                Custom <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer" /> to use when deserializing query results.
            </summary>
            <remarks>Null will use the default <see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer" />.</remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.ConsistentWith(Couchbase.Query.MutationState)">
            <summary>
                Provides a means of ensuring "read your own writes" or RYOW consistency on the current query.
            </summary>
            <remarks>Note: <see cref="M:Couchbase.Query.QueryOptions.ScanConsistency(Couchbase.Query.QueryScanConsistency)" /> will be overwritten to <see cref="F:Couchbase.Query.QueryScanConsistencyInternal.AtPlus" />.</remarks>
            <param name="mutationState">State of the mutation.</param>
            <returns>A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.MaxServerParallelism(System.Int32)">
            <summary>
                Specifies the maximum parallelism for the query. A zero or negative value means the number of logical
                cpus will be used as the parallelism for the query. There is also a server wide max_parallelism parameter
                which defaults to 1. If a request includes max_parallelism, it will be capped by the server max_parallelism.
                If a request does not include max_parallelism, the server wide max_parallelism will be used.
            </summary>
            <param name="parallelism"></param>
            <returns></returns>
            <value>
                The maximum server parallelism.
            </value>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.AdHoc(System.Boolean)">
            <summary>
                If set to false, the client will try to perform optimizations
                transparently based on the server capabilities, like preparing the statement and
                then executing a query plan instead of the raw query.
            </summary>
            <param name="adHoc">if set to <c>false</c> the query will be optimized if possible.</param>
            <returns></returns>
            <remarks>
                The default is <c>true</c>; the query will executed in an ad-hoc manner,
                without special optimizations.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Prepared(Couchbase.Query.QueryPlan,System.String)">
            <summary>
                Sets a N1QL statement to be executed in an optimized way using the given queryPlan.
            </summary>
            <param name="preparedPlan">The <see cref="T:Couchbase.Query.QueryPlan" /> that was prepared beforehand.</param>
            <param name="originalStatement">The original statement (eg. SELECT * FROM default) that the user attempted to optimize</param>
            <returns>A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.</returns>
            <remarks>Required if statement not provided, will erase a previously set Statement.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="preparedPlan" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Statement(System.String)">
            <summary>
                Sets a N1QL statement to be executed.
            </summary>
            <param name="statement">
                Any valid N1QL statement for a POST request, or a read-only N1QL statement (SELECT, EXPLAIN)
                for a GET request.
            </param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">statement</exception>
            <remarks>
                Will erase a previous optimization of a statement using Prepared.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Timeout(System.TimeSpan)">
            <summary>
                Sets the maximum time to spend on the request.
            </summary>
            <param name="timeOut">Maximum time to spend on the request</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
            <remarks>
                Optional - the default is 0ms, which means the request runs for as long as it takes.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.ReadOnly(System.Boolean)">
            <summary>
                If a GET request, this will always be true otherwise false.
            </summary>
            <param name="readOnly">True for get requests.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
            <remarks>
                Any value set here will be overridden by the type of request sent.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Readonly(System.Boolean)">
            <summary>
                If a GET request, this will always be true otherwise false.
            </summary>
            <param name="readOnly">True for get requests.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
            <remarks>
                Any value set here will be overridden by the type of request sent.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Metrics(System.Boolean)">
            <summary>
                Specifies that metrics should be returned with query results.
            </summary>
            <param name="includeMetrics">True to return query metrics.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
            <remarks>
                Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Parameter(System.String,System.Object)">
            <summary>
                Adds a named parameter to the parameters to the statement or prepared statement.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
            <remarks>
                Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Parameter(System.Object)">
            <summary>
                Adds a positional parameter to the parameters to the statement or prepared statement.
            </summary>
            <param name="value">The value of the positional parameter.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
            <remarks>
                Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Parameter(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
                Adds a collection of named parameters to the parameters to the statement or prepared statement.
            </summary>
            <param name="parameters">A list of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to be sent.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
            <remarks>
                Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Parameter(System.Object[])">
            <summary>
                Adds a list of positional parameters to the statement or prepared statement.
            </summary>
            <param name="parameters">A list of positional parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.PreserveExpiry(System.Boolean)">
            <summary>
            (v.7.1.0 and onwards)
            Tells the query engine to preserve expiration values set on any documents modified by this query.
            </summary>
            <param name="preserveExpiry">If expiration values should be preserved, the default is false.</param>
            <returns>A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.ScanConsistency(Couchbase.Query.QueryScanConsistency)">
            <summary>
                Specifies the consistency guarantee/constraint for index scanning.
            </summary>
            <param name="scanConsistency">Specify the consistency guarantee/constraint for index scanning.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
            <remarks>
                Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.ScanConsistencyInternal(Couchbase.Query.QueryScanConsistencyInternal)">
            <summary>
                Specifies the consistency guarantee/constraint for index scanning.
            </summary>
            <param name="scanConsistency">Specify the consistency guarantee/constraint for index scanning.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Invalid <paramref name="scanConsistency"/>.</exception>
            <remarks>
                Used internally to allow <see cref="M:Couchbase.Query.QueryOptions.ConsistentWith(Couchbase.Query.MutationState)"/> to set the consistency to <see cref="F:Couchbase.Query.QueryScanConsistencyInternal.AtPlus"/>.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.ScanWait(System.TimeSpan)">
            <summary>
                Specifies the maximum time the client is willing to wait for an index to catch up to the vector timestamp in the
                request. If an index has to catch up, and the <see cref="M:Couchbase.Query.QueryOptions.ScanWait(System.TimeSpan)" /> time is exceed doing so, an error is
                returned.
            </summary>
            <param name="scanWait">The maximum time the client is willing to wait for index to catch up to the vector timestamp.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
            <remarks>
                Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.ClientContextId(System.String)">
            <summary>
                Client Context ID.
                If no client context ID is provided on this option, a UUID is generated and sent
                automatically so by default it is always possible to identify a query when debugging.
            </summary>
            <param name="clientContextId">The client context identifier.</param>
            <returns>A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Raw(System.String,System.Object)">
            <summary>
                Adds a raw query parameter and value to the query.
                NOTE: This is uncommitted and may change in the future.
            </summary>
            <param name="name">The paramter name.</param>
            <param name="value">The parameter value.</param>
            <returns>A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.ScanCap(System.Int32)">
            <summary>
                Sets maximum buffered channel size between the indexer client
                and the query service for index scans.
                This parameter controls when to use scan backfill.
                Use 0 or a negative number to disable.
            </summary>
            <param name="capacity">The maximum number of channels.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.PipelineBatch(System.Int32)">
            <summary>
                Sets the number of items execution operators can batch for
                fetch from the KV.
            </summary>
            <param name="batchSize">The maximum number of items.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.PipelineCap(System.Int32)">
            <summary>
                Sets maximum number of items each execution operator can buffer
                between various operators.
            </summary>
            <param name="capacity">The maximum number of items.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Profile(Couchbase.Query.QueryProfile)">
            <summary>
                Set the <see cref="T:Couchbase.Query.QueryProfile"/> information to be returned along with the query results.
            </summary>
            <param name="profile">The <see cref="T:Couchbase.Query.QueryProfile"/>.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.CancellationToken(System.Threading.CancellationToken)">
            <summary>
                Set the <see cref="M:Couchbase.Query.QueryOptions.CancellationToken(System.Threading.CancellationToken)"/> which will cancel the query if it is incomplete.
            </summary>
            <param name="cancellationToken">The <see cref="M:Couchbase.Query.QueryOptions.CancellationToken(System.Threading.CancellationToken)"/>.</param>
            <returns>
                A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.
            </returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.FlexIndex(System.Boolean)">
            <summary>
            Tells the query engine to use a flex index (utilizing the search service).
            </summary>
            <param name="flexIndex">true if a flex index should be used, false is the default</param>
            <returns>A reference to the current <see cref="T:Couchbase.Query.QueryOptions" /> for method chaining.</returns>
            <remarks>This feature is Uncommitted and may change in the future.</remarks>
        </member>
        <member name="P:Couchbase.Query.QueryOptions.QueryContext">
             <summary>
            The alias for the namespace:bucket:scope:collection
             </summary>
             <returns></returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.GetFormValues">
            <summary>
                Gets a <see cref="T:System.Collections.Generic.IDictionary`2" /> of the name/value pairs to be POSTed to the service.
            </summary>
            <returns>
                The <see cref="T:System.Collections.Generic.IDictionary`2" /> of the name/value pairs to be POSTed to the service.
            </returns>
            <exception cref="T:System.ArgumentException">A statement or prepared plan must be provided.</exception>
            <remarks>
                Since values will be POSTed as JSON, here we deal with unencoded typed values
                (like ints, Lists, etc...) rather than only strings.
            </remarks>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.GetFormValuesAsJson">
            <summary>
            Gets the JSON representation of this query for execution in a POST.
            </summary>
            <returns>The form values as a JSON object.</returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.GetRequestBody(Couchbase.Core.IO.Serializers.ITypeSerializer,Couchbase.Core.IO.Serializers.IFallbackTypeSerializerProvider)">
            <summary>
            Gets the JSON representation of this query for execution in an HTTP POST.
            </summary>
            <returns>The <see cref="T:System.Net.Http.HttpContent"/>.</returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Create">
            <summary>
                Creates a new <see cref="T:Couchbase.Query.QueryOptions" /> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Create(System.String)">
            <summary>
                Creates a new <see cref="T:Couchbase.Query.QueryOptions" /> object with the specified statement.
            </summary>
            <param name="statement">The statement.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Query.QueryOptions.Create(Couchbase.Query.QueryPlan,System.String)">
            <summary>
                Creates a query using the given plan as an optimization for the originalStatement.
            </summary>
            <param name="plan">The plan.</param>
            <param name="originalStatement">The original statement, unoptimized.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Query.QueryOptionsDto">
            <summary>
            Serialization POCO used by <see cref="T:Couchbase.Query.QueryOptions"/> to create a JSON body for a query request.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QueryPlan.Name">
            <summary>
            Gets the name of the query plan generated by the server.
            </summary>
            <value>
            The name of the query plan.
            </value>
        </member>
        <member name="T:Couchbase.Query.QueryProfile">
            <summary>
            Query profile information to be returned with the query results.
            </summary>
        </member>
        <member name="F:Couchbase.Query.QueryProfile.Off">
            <summary>
            Returns no query profile information. This is the default.
            </summary>
        </member>
        <member name="F:Couchbase.Query.QueryProfile.Phases">
            <summary>
            Returns phase information.
            </summary>
        </member>
        <member name="F:Couchbase.Query.QueryProfile.Timings">
            <summary>
            Returns timing information.
            </summary>
        </member>
        <member name="T:Couchbase.Query.QueryResultBase`1">
            <summary>
            Abstract base class for with shared implementations of <see cref="T:Couchbase.Query.IQueryResult`1"/>.
            </summary>
            <typeparam name="T">The Type of each row returned.</typeparam>
        </member>
        <member name="M:Couchbase.Query.QueryResultBase`1.#ctor(System.IO.Stream,System.IDisposable)">
            <summary>
            Creates a new QueryResultBase.
            </summary>
            <param name="responseStream"><see cref="T:System.IO.Stream"/> to read.</param>
            <param name="ownedForCleanup">Additional object to dispose when complete.</param>
        </member>
        <member name="P:Couchbase.Query.QueryResultBase`1.Rows">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Query.QueryResultBase`1.ResponseStream">
            <summary>
            Response stream being deserialized.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QueryResultBase`1.MetaData">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Query.QueryResultBase`1.HttpStatusCode">
            <summary>
            Gets or sets the HTTP status code.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QueryResultBase`1.Errors">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Query.QueryResultBase`1.Success">
            <summary>
            Returns true if the operation was successful.
            </summary>
            <remarks>
            If Success is false, use the Message property to help determine the reason.
            </remarks>
        </member>
        <member name="P:Couchbase.Query.QueryResultBase`1.Message">
            <summary>
            If the operation wasn't successful, a message indicating why it was not successful.
            </summary>
        </member>
        <member name="M:Couchbase.Query.QueryResultBase`1.ShouldRetry(System.Boolean)">
            <summary>
            If the response indicates the request is retryable, returns true.
            </summary>
            <returns></returns>
            <remarks>
            Intended for internal use only.
            </remarks>
        </member>
        <member name="P:Couchbase.Query.QueryResultBase`1.PreparedPlanName">
            <summary>
            Get the prepared query plan name stored in the cluster.
            </summary>
        </member>
        <member name="M:Couchbase.Query.QueryResultBase`1.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the reader, and reads all attributes until result rows are encountered.
            This must be called before properties are valid.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Couchbase.Query.QueryResultBase`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Query.QueryResultBase`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Query.QueryResultExtensions.IsQueryPlanStale``1(Couchbase.Query.IQueryResult{``0})">
            <summary>
            Determines whether a prepared query's plan stale.
            </summary>
            <param name="queryResult">The N1QL query result.</param>
            <returns>
              <c>true</c> if query plan is stale; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Couchbase.Query.QueryResultExtensions.CreateExceptionForError``1(Couchbase.Query.IQueryResult{``0},Couchbase.Core.Exceptions.Query.QueryErrorContext)">
            <summary>
            Create the appropriate Exception for an error context
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="result">Result</param>
            <param name="context">Error context</param>
            <returns>Exception</returns>
        </member>
        <member name="M:Couchbase.Query.QueryResultExtensions.ThrowExceptionOnError``1(Couchbase.Query.IQueryResult{``0},Couchbase.Core.Exceptions.Query.QueryErrorContext)">
            <summary>
            Create/throw the appropriate Exception given an error context
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="result">Result</param>
            <param name="context">Error context</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Query.QueryScanConsistency">
            <summary>
            Sets the desired index scan consistency for current N1QL query.
            </summary>
        </member>
        <member name="F:Couchbase.Query.QueryScanConsistency.NotBounded">
            <summary>
            The default which means that the query can return data that is currently indexed
            and accessible by the index or the view. The query output can be arbitrarily
            out-of-date if there are many pending mutations that have not been indexed by
            the index or the view. This consistency level is useful for queries that favor
            low latency and do not need precise and most up-to-date information.
            </summary>
        </member>
        <member name="F:Couchbase.Query.QueryScanConsistency.RequestPlus">
            <summary>
            This level provides the strictest consistency level and thus executes with higher
            latencies than the other levels. This consistency level requires all mutations, up
            to the moment of the query request, to be processed before the query execution can start.
            </summary>
        </member>
        <member name="T:Couchbase.Query.QueryScanConsistencyInternal">
            <summary>
            More complete version of <see cref="T:Couchbase.Query.QueryScanConsistency"/> for internal SDK use.
            Includes <see cref="F:Couchbase.Query.QueryScanConsistencyInternal.AtPlus"/>, which isn't publicly offered.
            </summary>
        </member>
        <member name="T:Couchbase.Query.QuerySequenceGenerator">
            <summary>
            Generates a linear progression of sequence numbers, overlapping if the storage is exceeded.
            </summary>
        </member>
        <member name="M:Couchbase.Query.QuerySequenceGenerator.GetNext">
            <summary>
            Gets the next sequence in the progression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Query.QuerySequenceGenerator.GetNextAsString">
            <summary>
            Gets the next sequence in the progression as a <see cref="T:System.String"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Query.QuerySequenceGenerator.Reset">
            <summary>
            Resets the sequence to zero. Mainly for testing.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.NullableBoolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.QueryErrorContext">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.TypeSerializerWrapper">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.RetryReason">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.QueryError">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.QueryErrorData">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.QueryMetricsData">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.QueryOptionsDto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.QueryPlan">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.QueryProfile">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.QueryScanConsistencyInternal">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.NullableQueryScanConsistencyInternal">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.QueryStatus">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.QueryWarning">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.Reason">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.ScanVectorComponent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.Severity">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.DictionaryStringScanVectorComponent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.DictionaryStringDictionaryStringScanVectorComponent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.DictionaryStringObject">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.IDictionaryStringObject">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.ListTypeSerializerWrapper">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.ListRetryReason">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.ListError">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.HttpStatusCode">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.TimeSpan">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.NullableTimeSpan">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.NullableInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.Object">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.UInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Couchbase.Query.QuerySerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Couchbase.Query.QuerySerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Query.QuerySerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.Query.QuerySerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Couchbase.Query.ScanVectorComponent">
            <summary>
            Component of a scan vector supplied in query request as part of RYOW.
            </summary>
        </member>
        <member name="T:Couchbase.Query.ScanVectorComponentJsonConverter">
            <summary>
            Serializes a <see cref="T:Couchbase.Query.ScanVectorComponent"/> as JSON for a query.
            </summary>
        </member>
        <member name="T:Couchbase.Query.StreamingQueryResult`1">
            <summary>
            Represents a streaming N1QL response for reading each item as they become available over the network.
            </summary>
            <typeparam name="T">A POCO that matches each row of the response.</typeparam>
            <seealso cref="T:Couchbase.Query.IQueryResult`1" />
        </member>
        <member name="M:Couchbase.Query.StreamingQueryResult`1.#ctor(System.IO.Stream,Couchbase.Core.IO.Serializers.IStreamingTypeDeserializer,System.Func{Couchbase.Query.QueryResultBase{`0},System.Net.HttpStatusCode,Couchbase.Core.Exceptions.Query.QueryErrorContext},System.IDisposable)">
            <summary>
            Creates a new StreamingQueryResult.
            </summary>
            <param name="responseStream"><see cref="T:System.IO.Stream"/> to read.</param>
            <param name="deserializer"><see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> used to deserialize objects.</param>
            <param name="errorContextFactory">Factory to create an error context if there is an error found after the results array.</param>
            <param name="ownedForCleanup">Additional object to dispose when complete.</param>
        </member>
        <member name="M:Couchbase.Query.StreamingQueryResult`1.InitializeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Query.StreamingQueryResult`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Query.StreamingQueryResult`1.ReadResponseAttributes(System.Threading.CancellationToken)">
            <summary>
            Reads and parses any response attributes, returning at the end of the response or
            once the "results" attribute is encountered.
            </summary>
        </member>
        <member name="M:Couchbase.Query.StreamingQueryResult`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.ScopeExtensions.QueryAsync``1(Couchbase.KeyValue.IScope,System.String,System.Action{Couchbase.Query.QueryOptions})">
            <summary>
            Executes a N1QL query on the server.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="scope">The calling scope.</param>
            <param name="statement">The statement to execute.</param>
            <param name="configureOptions">Any options as a lambda.</param>
            <returns>A Task that can be awaited for the results of the query.</returns>
        </member>
        <member name="M:Couchbase.ScopeExtensions.QueryAsync``1(Couchbase.KeyValue.IScope,System.String)">
            <summary>
            Executes a N1QL query on the server.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="scope">The calling scope.</param>
            <param name="statement">The statement to execute.</param>
            <returns>A Task that can be awaited for the results of the query.</returns>
        </member>
        <member name="M:Couchbase.ScopeExtensions.AnalyticsQueryAsync``1(Couchbase.KeyValue.IScope,System.String,System.Action{Couchbase.Analytics.AnalyticsOptions})">
            <summary>
            Executes a analytics query on the server.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="scope">The calling scope.</param>
            <param name="statement">The statement to execute.</param>
            <param name="configureOptions"></param>
            <returns>A Task that can be awaited for the results of the query.</returns>
        </member>
        <member name="T:Couchbase.Search.CouchbaseSearchResponseException">
            <summary>
            Exception thrown for a failed search query response if EnsureSucess is called.
            </summary>
        </member>
        <member name="P:Couchbase.Search.CouchbaseSearchResponseException.Status">
            <summary>
            <see cref="T:Couchbase.Search.SearchStatus"/> returned from Couchbase.
            </summary>
        </member>
        <member name="P:Couchbase.Search.CouchbaseSearchResponseException.Errors">
            <summary>
            Errors returned from Couchbase.
            </summary>
        </member>
        <member name="M:Couchbase.Search.CouchbaseSearchResponseException.#ctor(System.String,Couchbase.Search.SearchStatus,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a new CouchbaseSearchResponseException.
            </summary>
            <param name="message">Error message.</param>
            <param name="status"><see cref="T:Couchbase.Search.SearchStatus"/> returned from Couchbase.</param>
            <param name="errors">Errors returned from Couchbase.</param>
        </member>
        <member name="M:Couchbase.Search.CouchbaseSearchResponseException.#ctor(System.String,Couchbase.Search.SearchStatus,System.Collections.Generic.IList{System.String},System.Exception)">
            <summary>
            Creates a new CouchbaseSearchResponseException.
            </summary>
            <param name="message">Error message.</param>
            <param name="status"><see cref="T:Couchbase.Search.SearchStatus"/> returned from Couchbase.</param>
            <param name="errors">Errors returned from Couchbase.</param>
            <param name="innerException">Exception included in the response from Couchbase.</param>
        </member>
        <member name="P:Couchbase.Search.DateRange.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Couchbase.Search.DateRange.Start">
            <summary>
            Gets or sets the start date.
            </summary>
            <value>
            The start.
            </value>
        </member>
        <member name="P:Couchbase.Search.DateRange.End">
            <summary>
            Gets or sets the end date.
            </summary>
            <value>
            The end.
            </value>
        </member>
        <member name="P:Couchbase.Search.DateRange.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="T:Couchbase.Search.DateRangeFacet">
            <summary>
            A <see cref="T:Couchbase.Search.ISearchFacet"/> which counts how many documents fall between two <see cref="T:System.DateTime"/> values.
            </summary>
        </member>
        <member name="M:Couchbase.Search.DateRangeFacet.AddRange(System.String,System.DateTime,System.DateTime)">
            <summary>
            Adds a <see cref="T:Couchbase.Search.Range`1"/> to the <see cref="T:Couchbase.Search.ISearchFacet"/>.
            </summary>
            /// <param name="name">The name of the range.</param>
            <param name="startDate">The start date of the range.</param>
            <param name="endDate">The end date of the range.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.DateRangeFacet.AddRange(Couchbase.Search.Range{System.DateTime})">
            <summary>
            Adds a <see cref="T:Couchbase.Search.Range`1"/> to the <see cref="T:Couchbase.Search.ISearchFacet"/>.
            </summary>
            <param name="range">A <see cref="T:Couchbase.Search.Range`1"/> for the <see cref="T:Couchbase.Search.ISearchFacet"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.DateRangeFacet.AddRanges(Couchbase.Search.Range{System.DateTime}[])">
            <summary>
            Adds a range of <see cref="T:Couchbase.Search.Range`1"/>'s to the <see cref="T:Couchbase.Search.ISearchFacet"/>.
            </summary>
            <param name="ranges">A range of <see cref="T:Couchbase.Search.Range`1"/>'s to add the <see cref="T:Couchbase.Search.ISearchFacet"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.DateRangeFacet.ToJson">
            <summary>
            Gets the JSON representation of this object.
            </summary>
            <exception cref="T:System.InvalidOperationException">The Name and the Field property must have a value.</exception>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> representing the object's state.</returns>
        </member>
        <member name="T:Couchbase.Search.DateRangeFacetResult">
            <summary>
            The result for a <see cref="T:Couchbase.Search.DateRangeFacet"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Search.DateRangeFacetResult.DateRanges">
            <summary>
            Gets or sets the date ranges.
            </summary>
            <value>
            The date ranges.
            </value>
        </member>
        <member name="P:Couchbase.Search.DateRangeFacetResult.FacetResultType">
            <summary>
            Gets the type of the facet result.
            </summary>
            <value>
            The type of the facet result.
            </value>
        </member>
        <member name="T:Couchbase.Search.DefaultFacetResult">
            <summary>
            The default facet result.
            </summary>
        </member>
        <member name="P:Couchbase.Search.DefaultFacetResult.Name">
            <summary>
            Gets or sets the name of the result.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Couchbase.Search.DefaultFacetResult.Field">
            <summary>
            Gets the field used for the facet.
            </summary>
            <value>
            The field.
            </value>
        </member>
        <member name="P:Couchbase.Search.DefaultFacetResult.Total">
            <summary>
            Gets the total number of hits for the facet.
            </summary>
            <value>
            The total.
            </value>
        </member>
        <member name="P:Couchbase.Search.DefaultFacetResult.Missing">
            <summary>
            Gets the number of misses for the facet.
            </summary>
            <value>
            The missing.
            </value>
        </member>
        <member name="P:Couchbase.Search.DefaultFacetResult.Other">
            <summary>
            Gets the number of others for the facet.
            </summary>
            <value>
            The other.
            </value>
        </member>
        <member name="P:Couchbase.Search.DefaultFacetResult.FacetResultType">
            <summary>
            Gets the type of the facet result.
            </summary>
            <value>
            The type of the facet result.
            </value>
        </member>
        <member name="T:Couchbase.Search.FacetResultType">
            <summary>
            The type of facet result.
            </summary>
        </member>
        <member name="T:Couchbase.Search.HighLightStyle">
            <summary>
            The highlighting options available from the server.
            </summary>
        </member>
        <member name="F:Couchbase.Search.HighLightStyle.None">
            <summary>
            The default if <see cref="F:Couchbase.Search.HighLightStyle.Html"/> or <see cref="F:Couchbase.Search.HighLightStyle.Ansi"/> are not specified.
            </summary>
        </member>
        <member name="F:Couchbase.Search.HighLightStyle.Html">
            <summary>
            For Html style highlighting
            </summary>
        </member>
        <member name="F:Couchbase.Search.HighLightStyle.Ansi">
            <summary>
            For Ansi style highlighting
            </summary>
        </member>
        <member name="T:Couchbase.Search.IFacetResult">
            <summary>
            Interface to describe Facet results.
            </summary>
        </member>
        <member name="P:Couchbase.Search.IFacetResult.FacetResultType">
            <summary>
            Gets the type of the facet result.
            </summary>
            <value>
            The type of the facet result.
            </value>
        </member>
        <member name="P:Couchbase.Search.IFacetResult.Name">
            <summary>
            Gets or sets the name of the result.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Couchbase.Search.IFacetResult.Field">
            <summary>
            Gets the field used for the facet.
            </summary>
            <value>
            The field.
            </value>
        </member>
        <member name="P:Couchbase.Search.IFacetResult.Total">
            <summary>
            Gets the total number of hits for the facet.
            </summary>
            <value>
            The total.
            </value>
        </member>
        <member name="P:Couchbase.Search.IFacetResult.Missing">
            <summary>
            Gets the number of misses for the facet.
            </summary>
            <value>
            The missing.
            </value>
        </member>
        <member name="P:Couchbase.Search.IFacetResult.Other">
            <summary>
            Gets the number of others for the facet.
            </summary>
            <value>
            The other.
            </value>
        </member>
        <member name="T:Couchbase.Search.ISearchClient">
            <summary>
            A client for making FTS <see cref="T:Couchbase.Search.ISearchQuery"/> requests and mapping the responses to <see cref="T:Couchbase.Search.ISearchResult"/>'s.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchClient.LastActivity">
            <summary>
            Gets the timestamp of the last activity.
            </summary>
        </member>
        <member name="M:Couchbase.Search.ISearchClient.QueryAsync(System.String,Couchbase.Core.Retry.Search.FtsSearchRequest,Couchbase.Search.Queries.Vector.VectorSearch,Couchbase.KeyValue.IScope,System.Threading.CancellationToken)">
            <summary>
            Executes a <see cref="T:Couchbase.Search.ISearchQuery"/> request including any <see cref="T:Couchbase.Search.SearchOptions"/> parameters asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.ISearchFacet">
            <summary>
            A <see cref="T:Couchbase.Search.ISearchFacet"/> allows for aggregating information collected on a particular result set.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchFacet.Name">
            <summary>
            The name of the facet.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchFacet.Field">
            <summary>
            The field of the facet.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchFacet.Size">
            <summary>
            The limit for ??????
            </summary>
        </member>
        <member name="M:Couchbase.Search.ISearchFacet.ToJson">
            <summary>
            Gets the JSON representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.ISearchQuery">
            <summary>
            Represents a search query request.
            </summary>
        </member>
        <member name="M:Couchbase.Search.ISearchQuery.Boost(System.Double)">
            <summary>
            Used to increase the relative weight of a clause (with a boost greater than 1) or decrease the relative weight (with a boost between 0 and 1).
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.ISearchQuery.Export">
            <summary>
            Gets a JSON object representing this instance excluding any <see cref="T:Couchbase.Search.SearchOptions"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.ISearchQueryRow">
            <summary>
            Represents a single "hit" for a <see cref="T:Couchbase.Search.ISearchQuery"/> request.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Id">
            <summary>
            The document identifier.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Score">
            <summary>
            The relative score for this "hit".
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Index">
            <summary>
            Gets the index used for the "hit".
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Explanation">
            <summary>
            Detailed explanation of the search "hit".
            </summary>
            <value>
            The explanation.
            </value>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Locations">
            <summary>
            Indicates the offsets of the search terms matched inside the document.
            </summary>
            <value>
            The locations.
            </value>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Fields">
            <summary>
            Give thes complete value of the included fields where matches occurred.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Fragments">
            <summary>
            The highlighted fragments of the search hits within the content.
            </summary>
            <value>
            The fragments.
            </value>
        </member>
        <member name="T:Couchbase.Search.ISearchRequester">
            <summary>
            An interface representing the ability to do make a <see cref="T:Couchbase.Search.SearchRequest" />
            </summary>
        </member>
        <member name="T:Couchbase.Search.ISearchResult">
            <summary>
            The result of a search query.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchResult.Hits">
            <summary>
            The rows returned by the search request.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchResult.Facets">
            <summary>
            The results for the facet components of the query.
            </summary>
        </member>
        <member name="P:Couchbase.Search.NumericRange.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Couchbase.Search.NumericRange.Min">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="P:Couchbase.Search.NumericRange.Max">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:Couchbase.Search.NumericRange.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="T:Couchbase.Search.NumericRangeFacet">
            <summary>
            A <see cref="T:Couchbase.Search.ISearchFacet"/> which counts how many documents fall between two <see cref="T:System.Single"/> values.
            </summary>
        </member>
        <member name="M:Couchbase.Search.NumericRangeFacet.AddRange(System.String,System.Single,System.Single)">
            <summary>
            Adds a numeric range to the <see cref="T:Couchbase.Search.ISearchFacet"/>.
            </summary>
            /// <param name="name">The name of the numeric range."/></param>
            <param name="start">The start of the numeric range."/></param>
            <param name="end">The end of the numeric range.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.NumericRangeFacet.AddRange(Couchbase.Search.Range{System.Single})">
            <summary>
            Adds a numeric range to the <see cref="T:Couchbase.Search.ISearchFacet"/>.
            </summary>
            <param name="range">A numeric range.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.NumericRangeFacet.AddRanges(Couchbase.Search.Range{System.Single}[])">
            <summary>
            Adds a range of numeric ranges to the <see cref="T:Couchbase.Search.ISearchFacet"/>
            </summary>
            <param name="ranges">A range of <see cref="T:Couchbase.Search.ISearchFacet"/>s.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.NumericRangeFacet.ToJson">
            <summary>
            Gets the JSON representation of this object.
            </summary>
            <exception cref="T:System.InvalidOperationException">The Name and the Field property must have a value.</exception>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> representing the object's state.</returns>
        </member>
        <member name="T:Couchbase.Search.NumericRangeFacetResult">
            <summary>
            The result for a <see cref="T:Couchbase.Search.NumericRangeFacet"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Search.NumericRangeFacetResult.NumericRanges">
            <summary>
            Gets or sets the numeric ranges.
            </summary>
            <value>
            The numeric ranges.
            </value>
        </member>
        <member name="P:Couchbase.Search.NumericRangeFacetResult.FacetResultType">
            <summary>
            Gets the type of the facet result.
            </summary>
            <value>
            The type of the facet result.
            </value>
        </member>
        <member name="T:Couchbase.Search.Queries.Compound.BooleanQuery">
            <summary>
            A combination of conjunction and disjunction queries.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.BooleanQuery.Must(Couchbase.Search.ISearchQuery[])">
            <summary>
            Result documents must satisfy these queries.
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.BooleanQuery.Should(Couchbase.Search.ISearchQuery[])">
            <summary>
            Result documents should satisfy these queries..
            </summary>
            <param name="queries">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.BooleanQuery.ShouldMin(System.Int32)">
            <summary>
            If a hit satisfies at least min queries in the should be boosted by this amount.
            </summary>
            <param name="min">The minimum to boost by - the default is 1.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.BooleanQuery.MustNot(Couchbase.Search.ISearchQuery[])">
            <summary>
            Result documents must not satisfy these queries.
            </summary>
            <param name="queries">The query.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Compound.ConjunctionQuery">
            <summary>
            The conjunction query is a compound query. The result documents must satisfy all of the child queries. It is possible to recursively nest compound queries.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.ConjunctionQuery.And(Couchbase.Search.ISearchQuery[])">
            <summary>
            Adds additional <see cref="T:Couchbase.Search.Queries.SearchQueryBase"/> implementations to this <see cref="T:Couchbase.Search.Queries.Compound.ConjunctionQuery"/>.
            </summary>
            <param name="queries">One or more <see cref="T:Couchbase.Search.Queries.SearchQueryBase"/> queries to add.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Compound.DisjunctionQuery">
            <summary>
            The disjunction query is a compound query. The result documents must satisfy a configurable min number of child queries. By default this min is set to 1.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.DisjunctionQuery.Or(Couchbase.Search.ISearchQuery[])">
            <summary>
            Adds additional <see cref="T:Couchbase.Search.Queries.SearchQueryBase"/> implementations to this <see cref="T:Couchbase.Search.Queries.Compound.ConjunctionQuery"/>.
            </summary>
            <param name="queries">One or more <see cref="T:Couchbase.Search.Queries.SearchQueryBase"/> queries to add.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.DisjunctionQuery.Min(System.Int32)">
            <summary>
            The minimum number of child queries that must be satisfied for the disjunction query.
            </summary>
            <param name="min">The minimum.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Geo.Coordinate">
            <summary>
             A coordinate is a tuple of a latitude and a longitude.
            </summary>
            <remarks>This class is Uncommitted and may change in future versions.</remarks>
        </member>
        <member name="M:Couchbase.Search.Queries.Geo.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a coordinate given latitude and longitude.
            </summary>
            <param name="latitude">The latitude of the point as a <see cref="T:System.Double"/>.</param>
            <param name="longitude">The longitude of the point as a <see cref="T:System.Double"/>.</param>
        </member>
        <member name="M:Couchbase.Search.Queries.Geo.Coordinate.OfLatLon(System.Double,System.Double)">
            <summary>
            Constructs a <see cref="T:Couchbase.Search.Queries.Geo.Coordinate"/> object with latitude and longitude.
            </summary>
            <param name="latitude">The latitude of the point as a <see cref="T:System.Double"/>.</param>
            <param name="longitude">The longitude of the point as a <see cref="T:System.Double"/>.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Search.Queries.Geo.Coordinate.Lat">
            <summary>
            Returns the Latitude of this coordinate as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Search.Queries.Geo.Coordinate.Lon">
            <summary>
            Returns the Longitude of this coordinate as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Search.Queries.Geo.GeoBoundingBoxQuery">
            <summary>
            This query finds all matches within a given box (identified by the upper left and lower right corner coordinates).
            Both coordinate points are required so the server can identify the right bounding box.
            </summary>
        </member>
        <member name="T:Couchbase.Search.Queries.Geo.GeoDistanceQuery">
            <summary>
            This query finds all matches from a given location (point) within the given distance.
            Both the point and the distance are required.
            </summary>
        </member>
        <member name="T:Couchbase.Search.Queries.Geo.GeoPolygonQuery">
            <summary>
            Performs a random bounding polygon query to select documents within that polygon area.
            </summary>
            <remarks>This class is Uncommitted and may change in future versions.</remarks>
        </member>
        <member name="M:Couchbase.Search.Queries.Geo.GeoPolygonQuery.#ctor(System.Collections.Generic.List{Couchbase.Search.Queries.Geo.Coordinate})">
            <summary>
            Creates a GeoPolygonQuery given a list of <see cref="T:Couchbase.Search.Queries.Geo.Coordinate"/>.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="M:Couchbase.Search.Queries.Geo.GeoPolygonQuery.Field(System.String)">
            <summary>
            The optional field to search.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Geo.GeoPolygonQuery.Export">
            <summary>
            Exports the GeoPolygonQuery as a JSON object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Range.DateRangeQuery">
            <summary>
            The date range query finds documents containing a date value in the specified field within the specified range.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Range.DateRangeQuery.Start(System.DateTime,System.Boolean)">
            <summary>
            The start date of the range.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="inclusive">if set to <c>true</c> [inclusive].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Range.DateRangeQuery.End(System.DateTime,System.Boolean)">
            <summary>
            The end date of the range
            </summary>
            <param name="endTime">The end time.</param>
            <param name="inclusive">if set to <c>true</c> [inclusive].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Range.DateRangeQuery.Field(System.String)">
            <summary>
            If a field is specified, only terms in that field will be matched. This can also affect the used analyzer if one isn't specified explicitly.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Range.DateRangeQuery.Parser(System.String)">
            <summary>
            The name of the parser to use.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Range.NumericRangeQuery">
            <summary>
            The numeric range query finds documents containing a numeric value in the specified field within the specified range. Either min or max can be omitted, but not both.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Range.NumericRangeQuery.Min(System.Double,System.Boolean)">
            <summary>
            The lower end of the range, inclusive by default.
            </summary>
            <param name="min">The minimum.</param>
            <param name="inclusive">if set to <c>true</c> [inclusive].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Range.NumericRangeQuery.Max(System.Double,System.Boolean)">
            <summary>
            The higher end of the range, inclusive by default.
            </summary>
            <param name="max">The maximum.</param>
            <param name="inclusive">if set to <c>true</c> [inclusive].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Range.NumericRangeQuery.Field(System.String)">
            <summary>
            If a field is specified, only terms in that field will be matched. This can also affect the used analyzer if one isn't specified explicitly.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Range.TermRangeQuery">
            <summary>
            The term range query finds documents containing a string value in the specified field within the specified range.
            Either min or max can be omitted, but not both.
            </summary>
        </member>
        <member name="T:Couchbase.Search.Queries.SearchQueryBase">
            <summary>
            Base class for <see cref="T:Couchbase.Search.ISearchQuery"/> implementations.
            </summary>
            <seealso cref="T:Couchbase.Search.ISearchQuery" />
        </member>
        <member name="M:Couchbase.Search.Queries.SearchQueryBase.Boost(System.Double)">
            <summary>
            Used to increase the relative weight of a clause (with a boost greater than 1) or decrease the relative weight (with a boost between 0 and 1).
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.SearchQueryBase.Export">
            <summary>
            Gets a JSON object representing this query instance />
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.BooleanFieldQuery">
            <summary>
            A boolean field query matches documents which have a boolean field which corresponds to the requested boolean value.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.BooleanFieldQuery.Field(System.String)">
            <summary>
            The field for the match.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.DocIdQuery">
            <summary>
            A docId query is a query that directly matches the documents whose ID have been provided.
            It can be combined within a ConjunctionQuery to restrict matches on the set of documents.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.DocIdQuery.Add(System.String[])">
            <summary>
            Adds the specified document ids.
            </summary>
            <param name="docIds">The document ids.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.MatchAllQuery">
            <summary>
            A match all query matches all documents in the index. It can take search parameters
            as other queries, so this can be restricted (eg. with limit).
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.MatchNoneQuery">
            <summary>
            A match none query doesn't match any document in the index.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.MatchOperator">
            <summary>
            Specifies how the individual match terms should be logically concatenated.
            </summary>
        </member>
        <member name="F:Couchbase.Search.Queries.Simple.MatchOperator.Or">
            <summary>
            Specifies that individual match terms are concatenated with a logical OR - this is the default if not provided.
            </summary>
        </member>
        <member name="F:Couchbase.Search.Queries.Simple.MatchOperator.And">
            <summary>
            Specifies that individual match terms are concatenated with a logical AND.
            </summary>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.MatchPhraseQuery">
            <summary>
             A match query searches for terms occurring in the specified positions and offsets.
             The input text is analyzed and a phrase query is built with the terms resulting from the analysis.
             This depends on term vectors, which are consulted to determine phrase distance.
             </summary>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.MatchQuery">
            <summary>
             A query that analyzes the input text and uses that analyzed text to query the index.
            </summary>
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.MatchQuery.MatchOperator(Couchbase.Search.Queries.Simple.MatchOperator)">
            <summary>
            Specifies how the individual match terms should be logically concatenated.
            </summary>
            <param name="matchOperator">The <see cref="M:Couchbase.Search.Queries.Simple.MatchQuery.MatchOperator(Couchbase.Search.Queries.Simple.MatchOperator)"/> used to match terms.</param>
            <returns>A <see cref="T:Couchbase.Search.Queries.Simple.MatchQuery"/> object for chaining.</returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.PhraseQuery">
            <summary>
            The phrase query allows to query for exact term phrases in the index. The provided
            terms must exist in the correct order, at the correct index offsets, in the specified field
            (as no analyzer are applied to the terms). Queried field must have been indexed with
            includeTermVectors set to true. It is generally more useful in debugging scenarios,
            and the Match Phrase Query should usually be preferred for real-world use cases.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.PhraseQuery.Field(System.String)">
            <summary>
            The field to search against.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.PrefixQuery">
            <summary>
            The prefix query finds documents containing terms that start with the provided prefix.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.PrefixQuery.Field(System.String)">
            <summary>
            The field to search against.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.QueryStringQuery">
            <summary>
            The query string query allows humans to describe complex queries using a simple syntax.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.QueryStringQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Search.Queries.Simple.QueryStringQuery"/> class.
            </summary>
            <param name="query">The query string to be analyzed and used against. The query string is required.</param>
            <exception cref="T:System.ArgumentNullException">query</exception>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.RegexpQuery">
            <summary>
            Regexp query finds documents containing terms that match the specified regular expression.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.RegexpQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Search.Queries.Simple.RegexpQuery"/> class.
            </summary>
            <param name="regex">The regexp to be analyzed and used against. The regexp string is required.</param>
            <exception cref="T:System.ArgumentNullException">regex</exception>
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.RegexpQuery.Field(System.String)">
            <summary>
            If a field is specified, only terms in that field will be matched. This can also affect the used analyzer if one isn't specified explicitly.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.TermQuery">
            <summary>
            A term query is a query that may be "fuzzy" and matches terms within a specified edit distance (Levenshtein distance).
            Also, you can optionally specify that the term must have a matching prefix of the specified length.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.TermQuery.Field(System.String)">
            <summary>
            The field to search against.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.WildcardQuery">
            <summary>
            A wildcard query is a query in which term the character * will match 0..n occurrences of any characters and ? will match 1 occurrence of any character.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.SearchQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.WildcardQuery.Field(System.String)">
            <summary>
            The field for the match.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="F:Couchbase.Search.Queries.Vector.VectorSearch.PropVectorQueries">
            <summary>
            "K Nearest Neighbor"
            </summary>
        </member>
        <member name="T:Couchbase.Search.Range`1">
            <summary>
            Represents a range of values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Couchbase.Search.Range`1.Name">
            <summary>
            Gets or sets the name for the range.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Couchbase.Search.Range`1.Start">
            <summary>
            Gets or sets the start value.
            </summary>
            <value>
            The start.
            </value>
        </member>
        <member name="P:Couchbase.Search.Range`1.End">
            <summary>
            Gets or sets the end value.
            </summary>
            <value>
            The end.
            </value>
        </member>
        <member name="T:Couchbase.Search.SearchClient">
            <summary>
            A client for making FTS <see cref="T:Couchbase.Search.ISearchQuery"/> requests and mapping the responses to <see cref="T:Couchbase.Search.ISearchResult"/>'s.
            </summary>
            <seealso cref="T:Couchbase.Search.ISearchClient" />
        </member>
        <member name="M:Couchbase.Search.SearchClient.QueryAsync(System.String,Couchbase.Core.Retry.Search.FtsSearchRequest,Couchbase.Search.Queries.Vector.VectorSearch,Couchbase.KeyValue.IScope,System.Threading.CancellationToken)">
            <summary>
            Executes a <see cref="T:Couchbase.Search.ISearchQuery" /> request including any <see cref="T:Couchbase.Search.SearchOptions" /> parameters asynchronously.
            </summary>
            <returns>A <see cref="T:Couchbase.Search.ISearchResult"/> wrapped in a <see cref="T:System.Threading.Tasks.Task"/> for awaiting on.</returns>
        </member>
        <member name="T:Couchbase.Search.SearchFacet">
            <summary>
            An abstract class for creating <see cref="T:Couchbase.Search.ISearchFacet"/> implementations.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchFacet.Name">
            <summary>
            The name of the facet.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchFacet.Field">
            <summary>
            The field of the facet.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchFacet.Size">
            <summary>
            The number of facets or categories returned.
            </summary>
        </member>
        <member name="M:Couchbase.Search.SearchFacet.ToJson">
            <summary>
            Gets the JSON representation of this object.
            </summary>
            <exception cref="T:System.InvalidOperationException">The Name and the Field property must have a value.</exception>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> representing the object's state.</returns>
        </member>
        <member name="M:Couchbase.Search.SearchFacet.Term(System.String,System.String,System.Int32)">
            <summary>
            Factory for creating <see cref="T:Couchbase.Search.TermFacet"/> instances.
            </summary>
            <param name="name">The name.</param>
            <param name="field">The field.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchFacet.Numeric(System.String,System.String,System.Int32,Couchbase.Search.Range{System.Single}[])">
            <summary>
            Factory for creating <see cref="T:Couchbase.Search.NumericRangeFacet"/> instances.
            </summary>
            <param name="name">The name.</param>
            <param name="field">The field.</param>
            <param name="size">The size.</param>
            <param name="ranges">The ranges.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchFacet.Date(System.String,System.String,System.Int32,Couchbase.Search.Range{System.DateTime}[])">
            <summary>
            Factory for creating <see cref="T:Couchbase.Search.DateRangeFacet"/> instances.
            </summary>
            <param name="name">The name.</param>
            <param name="field">The field.</param>
            <param name="size">The size.</param>
            <param name="ranges">The ranges.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Search.SearchMetrics.SuccessCount">
            <summary>
            The number of shards (pindex) of the FTS index that were successfully queried, returning hits.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchMetrics.ErrorCount">
            <summary>
            The count of errors.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchMetrics.TotalCount">
            <summary>
            Gets the total count.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchMetrics.Took">
            <summary>
            Total time taken for the results.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchMetrics.TotalHits">
            <summary>
            Total hits returned by the results.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchMetrics.MaxScore">
            <summary>
            The maximum score within the results.
            </summary>
        </member>
        <member name="T:Couchbase.Search.SearchOptions">
            <summary>
            Represents a number of query options that can be applied to a FTS query request.
            </summary>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            A parent or external span for tracing.
            </summary>
            <param name="span">An external <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/> implementation for tracing.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.RetryStrategy(Couchbase.Core.Retry.IRetryStrategy)">
            <summary>
            Overrides the global <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/> defined in <see cref="T:Couchbase.ClusterOptions"/> for a request.
            </summary>
            <param name="retryStrategy">The <see cref="T:Couchbase.Core.Retry.IRetryStrategy"/> to use for a single request.</param>
            <returns>The options.</returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.Limit(System.Int32)">
            <summary>
            Limits the number of matching results from a returned result-set.
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.Skip(System.Int32)">
            <summary>
            Skip indicates how many matching results to skip on the result set before returning matches.
            </summary>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.Explain(System.Boolean)">
            <summary>
            If true, the response will include additional search score explanations.
            </summary>
            <param name="explain"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.Highlight(Couchbase.Search.HighLightStyle)">
            <summary>
            Allows setting of additional highlighting on the result set of matching terms.
            </summary>
            <param name="highLightStyle">The <see cref="T:Couchbase.Search.HighLightStyle" /> to use.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.Highlight(Couchbase.Search.HighLightStyle,System.String[])">
            <summary>
            Allows setting of additional highlighting on the result set of matching terms.
            </summary>
            <param name="highLightStyle">The <see cref="T:Couchbase.Search.HighLightStyle" /> to use.</param>
            <param name="fields">The specific terms or fields to highlight.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.Fields(System.String[])">
            <summary>
            List of fields values that should be returned in the result assuming that they were indexed.
            </summary>
            <param name="fields">The indexed fields to return.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.Facets(Couchbase.Search.ISearchFacet[])">
            <summary>
              <see cref="T:Couchbase.Search.ISearchFacet" />s used to aggregate information collected on a particular result set.
            </summary>
            <param name="searchFacets">The <see cref="T:Couchbase.Search.ISearchFacet" /> to aggregate information on.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.Timeout(System.TimeSpan)">
            <summary>
            The server side timeout allows to specify an upper boundary of request execution so that it potentially doesn't run infinitely.
            </summary>
            <param name="timeout">The max length of time that that will be given to execute the query.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.ScanConsistency(Couchbase.Search.SearchScanConsistency)">
            <summary>
            The <see cref="T:Couchbase.Search.SearchScanConsistency" /> you require for you <see cref="T:Couchbase.Search.ISearchResult" />s.
            </summary>
            <param name="consistency">The <see cref="T:Couchbase.Search.SearchScanConsistency" /> for documents to be included in the query results.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.Scope(System.String)">
            <summary>
            The name of the scope to target for search results.
            </summary>
            <param name="scopeName">The name of the scope.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.Collections(System.String[])">
            <summary>
            The name or names of the collections to target for search results.
            </summary>
            <param name="collectionNames">The collection names.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.Sort(System.String[])">
            <summary>
            Configures the list of fields which are used for sorting the search result. Fields with a prefix of "-" indicate a descending nature.
            If no sort is provided, it is equal to sort("-_score"), since the server will sort it by score in descending order by default.
            </summary>
            <param name="sort">The field names to sort by.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.Sort(Couchbase.Search.Sort.ISearchSort)">
            <summary>
            Configures the sorting criteria for the search results using an implementation of <see cref="T:Couchbase.Search.Sort.ISearchSort" />.
            </summary>
            <param name="sort">The sort.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.Sort(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Configures the sorting criteria for the search results using a custom <see cref="T:Newtonsoft.Json.Linq.JObject" />.
            </summary>
            <param name="sort">The sort.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchOptions.IncludeLocations(System.Boolean)">
            <summary>
            If set to true, will include the SearchRowLocations.
            </summary>
            <param name="includeLocations"><see cref="T:System.Boolean"/> indicating that the locations will be returned. The default is false.</param>
            <returns><see cref="T:Couchbase.Search.SearchOptions"/> for chaining method calls.</returns>
        </member>
        <member name="T:Couchbase.Search.SearchQueryRow">
            <summary>
            Represents a single "hit" for a <see cref="T:Couchbase.Search.ISearchQuery"/> request.
            </summary>
            <seealso cref="T:Couchbase.Search.ISearchQueryRow" />
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Id">
            <summary>
            The document identifier.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Score">
            <summary>
            The relative score for this "hit".
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Index">
            <summary>
            Gets the index used for the "hit".
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Explanation">
            <summary>
            Detailed explanation of the search "hit".
            </summary>
            <value>
            The explanation.
            </value>
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Locations">
            <summary>
            Indicates the offsets of the search terms matched inside the document.
            </summary>
            <value>
            The locations.
            </value>
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Fields">
            <summary>
            Give thes complete value of the included fields where matches occurred.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Fragments">
            <summary>
            The highlighted fragments of the search hits within the content.
            </summary>
            <value>
            The fragments.
            </value>
        </member>
        <member name="T:Couchbase.Search.SearchRequest">
            <summary>
            A top-level SearchRequest, encompassing all Search sub-request types, including FTS and VectorSearch.
            </summary>
        </member>
        <member name="M:Couchbase.Search.SearchRequest.#ctor(Couchbase.Search.ISearchQuery,Couchbase.Search.Queries.Vector.VectorSearch)">
            <summary>
            A top-level SearchRequest, encompassing all Search sub-request types, including FTS and VectorSearch.
            </summary>
        </member>
        <member name="T:Couchbase.Search.SearchResult">
            <summary>
            The result of a search query.
            </summary>
            <seealso cref="T:Couchbase.Search.ISearchResult" />
        </member>
        <member name="P:Couchbase.Search.SearchResult.Hits">
            <summary>
            The rows returned by the search request.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchResult.Facets">
            <summary>
            The facets for the result.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchResult.MetaData">
            <summary>
            The search result metadata.
            </summary>
        </member>
        <member name="M:Couchbase.Search.SearchResult.Add(Couchbase.Search.ISearchQueryRow)">
            <summary>
            Adds the specified row.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="T:Couchbase.Search.SearchScanConsistency">
            <summary>
            Sets the desired index scan consistency for current N1QL query.
            </summary>
        </member>
        <member name="F:Couchbase.Search.SearchScanConsistency.NotBounded">
            <summary>
            The default which means that the query can return data that is currently indexed
            and accessible by the index or the view. The query output can be arbitrarily
            out-of-date if there are many pending mutations that have not been indexed by
            the index or the view. This consistency level is useful for queries that favor
            low latency and do not need precise and most up-to-date information.
            </summary>
        </member>
        <member name="F:Couchbase.Search.SearchScanConsistency.RequestPlus">
            <summary>
            This level provides the strictest consistency level and thus executes with higher
            latencies than the other levels. This consistency level requires all mutations, up
            to the moment of the query request, to be processed before the query execution can start.
            </summary>
        </member>
        <member name="F:Couchbase.Search.SearchScanConsistency.AtPlus">
            <summary>
            Do not use; for RYOW use <see cref="M:Couchbase.Search.SearchOptions.ConsistentWith(Couchbase.Query.MutationState)"/> and do not specify a <see cref="T:Couchbase.Search.SearchScanConsistency"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Search.SearchStatus">
            <summary>
            The status of the <see cref="T:Couchbase.Search.ISearchQuery"/> response.
            </summary>
        </member>
        <member name="F:Couchbase.Search.SearchStatus.Success">
            <summary>
            The search query returned with an HTTP 200
            </summary>
        </member>
        <member name="F:Couchbase.Search.SearchStatus.Failed">
            <summary>
            The search query failed.
            </summary>
        </member>
        <member name="T:Couchbase.Search.Sort.FieldSearchSort">
            <summary>
            Sorts the search results by a field in the hits.
            </summary>
        </member>
        <member name="T:Couchbase.Search.Sort.GeoDistanceSearchSort">
            <summary>
            Sorts the search results by a field in the hits.
            </summary>
        </member>
        <member name="T:Couchbase.Search.Sort.IdSearchSort">
            <summary>
            Sorts the search resilts by document ID.
            </summary>
        </member>
        <member name="T:Couchbase.Search.Sort.ISearchSort">
            <summary>
            Represents the search sort criteria.
            </summary>
        </member>
        <member name="T:Couchbase.Search.Sort.ScoreSearchSort">
            <summary>
            Sorts the search results by hit score.
            </summary>
        </member>
        <member name="M:Couchbase.Search.Sort.SearchSortBase.Export">
            <summary>
            Gets a JSON object representing this search sort.
            </summary>
        </member>
        <member name="P:Couchbase.Search.Term.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Couchbase.Search.Term.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="T:Couchbase.Search.TermFacet">
            <summary>
            A <see cref="T:Couchbase.Search.ISearchFacet"/> implementation which counts up how many  of the matching documents have a particular term in a particular field.
            </summary>
        </member>
        <member name="T:Couchbase.Search.TermFacetResult">
            <summary>
            The result for a <see cref="T:Couchbase.Search.TermFacet"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Search.TermFacetResult.Terms">
            <summary>
            Gets or sets the terms.
            </summary>
            <value>
            The terms.
            </value>
        </member>
        <member name="P:Couchbase.Search.TermFacetResult.FacetResultType">
            <summary>
            Gets the type of the facet result.
            </summary>
            <value>
            The type of the facet result.
            </value>
        </member>
        <member name="T:Couchbase.ServiceResultExtensions">
            <summary>
            Extension methods with more convenient overloads for ServiceResult.
            </summary>
        </member>
        <member name="M:Couchbase.ServiceResultExtensions.ThrowOnNoRetry(Couchbase.IServiceResult)">
            <summary>
            Throw exception in the "No Retry" scenario
            </summary>
            <param name="result">The Service Result</param>
        </member>
        <member name="M:Couchbase.Stellar.KeyValue.LookupInResult.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Stellar.KeyValue.MutateInResult.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Stellar.Search.IStellarSearchClient">
            <summary>
            This is required to go back in time to the ISearchClient interface before Vector
            search changes (NCBC-3593) - so that we can properly mock the client for testing.
            </summary>
        </member>
        <member name="P:Couchbase.Stellar.Search.StellarSearchResult.Hits">
            <summary>
            The rows returned by the search request.
            </summary>
        </member>
        <member name="P:Couchbase.Stellar.Search.StellarSearchResult.Facets">
            <summary>
            The facets for the result.
            </summary>
        </member>
        <member name="P:Couchbase.Stellar.Search.StellarSearchResult.MetaData">
            <summary>
            The search result metadata.
            </summary>
        </member>
        <member name="M:Couchbase.Stellar.StellarCluster.ThrowIfBootStrapFailed">
            <summary>
            Throw an exception if the bucket is not bootstrapped successfully.
            </summary>
        </member>
        <member name="M:Couchbase.Stellar.StellarCluster.ThrowBootStrapFailed">
            <summary>
            Throw am AggregateException with deferred bootstrap exceptions.
            </summary>
            <remarks>
            This is a separate method from <see cref="M:Couchbase.Stellar.StellarCluster.ThrowIfBootStrapFailed"/> to allow that method to
            be inlined for the fast, common path where there the bucket is bootstrapped.
            </remarks>
        </member>
        <member name="M:Couchbase.Stellar.StellarCluster.Couchbase#IClusterExtended#RemoveBucket(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Stellar.StellarCluster.Couchbase#IClusterExtended#BucketExists(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.TuningOptions">
            <summary>
            Options for performance tuning specific to the .NET SDK.
            </summary>
        </member>
        <member name="P:Couchbase.TuningOptions.MaximumOperationBuilderCapacity">
            <summary>
            Maximum size of a buffer used for building key/value operations to be sent to the server
            which will be retained for reuse. Buffers larger than this value will be disposed. If your
            application is consistently sending mutation operations larger than this value, increasing
            the value may improve performance at the cost of RAM utilization. Defaults to 1MB.
            </summary>
        </member>
        <member name="P:Couchbase.TuningOptions.MaximumRetainedOperationBuilders">
            <summary>
            Maximum number of buffers used for building key/value operations to be sent to the server
            which will be retained for reuse. If your application has a very high degree of parallelism
            (for example, a very large number of data nodes), increasing this number may improve
            performance at the cost of RAM utilization. Defaults to the 4 times the number of logical CPUs.
            </summary>
        </member>
        <member name="P:Couchbase.TuningOptions.MaximumInFlightOperationsPerConnection">
            <summary>
            Maximum number of operations which may be sent and still awaiting a response from the server
            per connection. This value may need tuning on high latency connections or based on average
            operation response size. Defaults to 16 operations per connection.
            </summary>
            <remarks>
            <para>
                Note that this is not directly limiting the total number of in-flight operations, each bucket
                and each node gets a dedicated pool of connections that scale based on the minimum and
                maximum pool size. This limit is per connection.
            </para>
            <para>
                This limit only applies to operations sent on the wire and awaiting a response.
                Operations waiting to be retried do not count against this limit. Operations being encoded or
                decoded also do not count towards this limit.
            </para>
            </remarks>
        </member>
        <member name="P:Couchbase.TuningOptions.StreamHttpResponseBodies">
            <summary>
            If enabled, HTTP responses such as query responses will be streamed after response headers
            are received rather than waiting for the entire response body to be received. This defaults
            to <c>true</c> on modern .NET runtimes and <c>false</c> on .NET 4.x.
            </summary>
            <remarks>
            When enabled it becomes more important to call <see cref="M:System.IDisposable.Dispose"/> on result objects
            such as <see cref="T:Couchbase.Query.IQueryResult`1"/> and <see cref="T:Couchbase.Analytics.IAnalyticsResult`1"/> to ensure the underlying
            HTTP connection is released. This is especially true on .NET 4.x where failure to dispose may cause
            issues with connection pool exhaustion.
            </remarks>
        </member>
        <member name="M:Couchbase.Utils.CancellationTokenExtensions.FallbackToTimeout(System.Threading.CancellationToken,System.TimeSpan)">
            <summary>
            Returns a new CancellationTokenSource with the given timeout value if the current token is CancellationToken.None.
            Otherwise, returns the current token.
            This is to help differentiate between users passing in existing CancellationTokens to operations, or specifying a
            timeout using a TimeSpan in Management operations' options.
            </summary>
            <param name="token">The current CancellationToken object.</param>
            <param name="timeout">The fallback Timeout value.</param>
            <returns>Either null or a new CancellationTokenSource which will cancel after the given Timeout.</returns>
        </member>
        <member name="M:Couchbase.Utils.CancellationTokenExtensions.FallbackToToken(System.Threading.CancellationTokenSource,System.Threading.CancellationToken)">
            <summary>
            Returns this CancellationTokenSource's token if it is non-null, or the passed in CancellationToken.
            </summary>
            <param name="cts">This CancellationTokenSource object.</param>
            <param name="token">The fallback CancellationToken.</param>
            <returns>Either the CTS's token or the fallback token.></returns>
        </member>
        <member name="T:Couchbase.Utils.CancellationTokenSourcePool">
            <summary>
            For .NET 6, provides a pool of reusable <see cref="T:System.Threading.CancellationTokenSource"/>. This is made
            possible by the new TryReset API available. For older frameworks this class is effectively a noop.
            </summary>
        </member>
        <member name="P:Couchbase.Utils.CancellationTokenSourcePool.Shared">
            <summary>
            Shared instance of <see cref="T:Couchbase.Utils.CancellationTokenSourcePool"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Utils.DotNetDnsClient">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Utils.IDotNetDnsClient">
            <summary>
            Wrapper for <see cref="T:System.Net.Dns"/> to support mocking.
            </summary>
        </member>
        <member name="T:Couchbase.Utils.IIpEndPointService">
            <summary>
            Provides helpers for resolving IP endpoints.
            </summary>
        </member>
        <member name="M:Couchbase.Utils.IIpEndPointService.GetIpEndPointAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns the <see cref="T:System.Net.IPEndPoint"/> for a given hostname and port. Hostname may be an IP addres.
            </summary>
            <param name="hostNameOrIpAddress">The host name or IP address.</param>
            <param name="port">The port number.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>The IP endpoint, or null if the name could not be resolved.</returns>
            <remarks>If providing an IPv6 address, wrapping in square brackets (i.e. [::1]) is acceptable.</remarks>
        </member>
        <member name="T:Couchbase.Utils.IpEndPointService">
            <summary>
            Default implementation of <see cref="T:Couchbase.Utils.IIpEndPointService"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Utils.LightweightStopwatch">
            <summary>
            A lightweight stopwatch implementation.
            </summary>
            <remarks>
            This implementation doesn't support stopping. Also, on .NET Core and .NET 5-7 it has a poor resolution
            compared to <see cref="T:System.Diagnostics.Stopwatch"/> (approximately 10-16 milliseconds). However, on .NET Core 3.1 and later
            it avoids heap allocations and on .NET 8 or later it matches the resolution of Stopwatch. For older frameworks
            we fallback to a <see cref="T:System.Diagnostics.Stopwatch"/> since <c>Environment.TickCount64</c> is not available
            and <see cref="P:System.Environment.TickCount"/> has issues wrapping to negative numbers.
            </remarks>
        </member>
        <member name="M:Couchbase.Utils.LightweightStopwatch.StartNew">
            <summary>
            Creates and starts a new <see cref="T:Couchbase.Utils.LightweightStopwatch"/>.
            </summary>
            <returns>The <see cref="T:Couchbase.Utils.LightweightStopwatch"/>.</returns>
        </member>
        <member name="P:Couchbase.Utils.LightweightStopwatch.ElapsedMilliseconds">
            <summary>
            Elapsed milliseconds since the stopwatch was started.
            </summary>
            <remarks>
            Resolution is 10-16 milliseconds.
            </remarks>
        </member>
        <member name="P:Couchbase.Utils.LightweightStopwatch.Elapsed">
            <summary>
            Elapsed time since the stopwatch was started.
            </summary>
            <remarks>
            Resolution is 10-16 milliseconds.
            </remarks>
        </member>
        <member name="M:Couchbase.Utils.LightweightStopwatch.Restart">
            <summary>
            Restart the stopwatch from zero.
            </summary>
        </member>
        <member name="T:Couchbase.Utils.MemoryPoolExtensions">
            <summary>
            Extensions of <see cref="T:System.Buffers.MemoryPool`1"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Utils.MemoryPoolExtensions.RentAndSlice``1(System.Buffers.MemoryPool{``0},System.Int32)">
            <summary>
            Rents a block of memory of a specific length.
            </summary>
            <typeparam name="T">The type of the objects that are in the memory.</typeparam>
            <param name="memoryPool">The <see cref="T:System.Buffers.MemoryPool`1"/>.</param>
            <param name="length">Amount of memory requested.</param>
            <returns>The block of memory. The caller is responsible for releasing this memory when it is no longer in use.</returns>
            <remarks>
            The normal implementation of <see cref="M:System.Buffers.MemoryPool`1.Rent(System.Int32)"/> may return more memory than requested.
            This method will reduce the size of the returned memory if more is returned than requested.
            Note that a greater amount of memory may still be reserved, it is just unused.
            </remarks>
        </member>
        <member name="T:Couchbase.Utils.NullAsyncDisposable">
            <summary>
            Implementation of <see cref="T:System.IAsyncDisposable"/> which does nothing.
            </summary>
        </member>
        <member name="P:Couchbase.Utils.NullAsyncDisposable.Instance">
            <summary>
            Reusable static instance of <see cref="T:Couchbase.Utils.NullAsyncDisposable"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Utils.NullAsyncDisposable.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Utils.NullDisposable">
            <summary>
            Implementation of <see cref="T:System.IDisposable"/> which does nothing.
            </summary>
        </member>
        <member name="P:Couchbase.Utils.NullDisposable.Instance">
            <summary>
            Reusable static instance of <see cref="T:Couchbase.Utils.NullDisposable"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Utils.NullDisposable.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Utils.SlicedMemoryOwner`1">
             <summary>
             Wraps a <see cref="T:System.Buffers.IMemoryOwner`1"/> with information to access a subset of the memory.
             This is particularly useful when renting memory from a <see cref="T:System.Buffers.MemoryPool`1"/>,
             which may return a larger array of memory than desired.
             </summary>
             <typeparam name="T">The type of the objects that are in the memory.</typeparam>
             <remarks>
             Disposing of this object is simply a forwarder to dispose of the owned memory. It assumed
             that this type follows the same rules for memory ownership as <see cref="T:System.Buffers.IMemoryOwner`1"/>.
             For example, calls which return this type assume that the caller takes ownership of the returned
             value. Calls which accept this type as a parameter assume that the callee takes ownership of
             the passed value.
            
             Failing to dispose of this type may result in memory leaks. Using this object after it is
             disposed may result in accessing memory in use for other purposes.
            
             While this structure does implement <see cref="T:System.Buffers.IMemoryOwner`1"/>, casting to the interface
             should be avoided as it will cause boxing.
             </remarks>
        </member>
        <member name="P:Couchbase.Utils.SlicedMemoryOwner`1.Empty">
            <summary>
            Shortcut for an empty slice.
            </summary>
        </member>
        <member name="P:Couchbase.Utils.SlicedMemoryOwner`1.MemoryOwner">
            <summary>
            The owned block of memory.
            </summary>
        </member>
        <member name="P:Couchbase.Utils.SlicedMemoryOwner`1.Memory">
            <summary>
            Shortcut to get the memory slice.
            </summary>
        </member>
        <member name="P:Couchbase.Utils.SlicedMemoryOwner`1.IsEmpty">
            <summary>
            Returns true if this <see cref="T:Couchbase.Utils.SlicedMemoryOwner`1"/> is an empty wrapper.
            </summary>
        </member>
        <member name="M:Couchbase.Utils.SlicedMemoryOwner`1.#ctor(System.Buffers.IMemoryOwner{`0})">
            <summary>
            Create a new <see cref="T:Couchbase.Utils.SlicedMemoryOwner`1"/> without slicing.
            </summary>
            <param name="memoryOwner">The <see cref="T:System.Buffers.IMemoryOwner`1"/> to slice.</param>
        </member>
        <member name="M:Couchbase.Utils.SlicedMemoryOwner`1.#ctor(System.Buffers.IMemoryOwner{`0},System.Int32)">
            <summary>
            Create a new <see cref="T:Couchbase.Utils.SlicedMemoryOwner`1"/>, slicing the memory and taking ownership.
            </summary>
            <param name="memoryOwner">The <see cref="T:System.Buffers.IMemoryOwner`1"/> to slice.</param>
            <param name="start">Start index of the slice.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="memoryOwner"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> is out of bounds.</exception>
        </member>
        <member name="M:Couchbase.Utils.SlicedMemoryOwner`1.#ctor(System.Buffers.IMemoryOwner{`0},System.Int32,System.Int32)">
            <summary>
            Create a new <see cref="T:Couchbase.Utils.SlicedMemoryOwner`1"/>, slicing the memory and taking ownership.
            </summary>
            <param name="memoryOwner">The <see cref="T:System.Buffers.IMemoryOwner`1"/> to slice.</param>
            <param name="start">Start index of the slice.</param>
            <param name="length">Length of the slice.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="memoryOwner"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="length"/> is out of bounds.</exception>
        </member>
        <member name="M:Couchbase.Utils.SlicedMemoryOwner`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Utils.SlicedMemoryOwner`1.Slice(System.Int32)">
            <summary>
            Slices the memory further. Ownership of the memory belongs to the new slice, the old
            one should be discarded.
            </summary>
            <param name="start">Starting offset of the slice.</param>
            <returns>New slice of memory.</returns>
        </member>
        <member name="M:Couchbase.Utils.SlicedMemoryOwner`1.Slice(System.Int32,System.Int32)">
            <summary>
            Slices the memory further. Ownership of the memory belongs to the new slice, the old
            one should be discarded.
            </summary>
            <param name="start">Starting offset of the slice.</param>
            <param name="length">Length of the slice.</param>
            <returns>New slice of memory.</returns>
        </member>
        <member name="T:Couchbase.Utils.SynchronizationContextExclusion">
            <summary>
            Temporarily removes the <see cref="T:System.Threading.SynchronizationContext"/> from the current thread, replacing it once
            the object is disposed.
            </summary>
            <remarks>
            This is designed to help prevent deadlocks when synchronously waiting on an asynchronous task,
            as in http://blogs.msdn.com/b/pfxteam/archive/2012/04/13/10293638.aspx.  This class is designed
            to be used with a "using" clause for simplicity and to guarantee that the context is replaced even
            if there is an exception.
            </remarks>
        </member>
        <member name="M:Couchbase.Utils.TimerFactory.CreateWithFlowSuppressed(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates a <see cref="T:System.Threading.Timer"/> where the <see cref="T:System.Threading.ExecutionContext"/> does not flow to the callbacks.
            </summary>
            <param name="callback">A delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or <c>null</c>.</param>
            <param name="dueTime">The amount of time to delay before the <paramref name="callback"/> is invoked. Specify <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> to prevent the timer from starting. Specify <see cref="F:System.TimeSpan.Zero"/> to start the timer immediately.</param>
            <param name="period">The time interval between invocations of <paramref name="callback"/>. Specify <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> to disable periodic signaling.</param>
            <returns>The new <see cref="T:System.Threading.Timer"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of milliseconds in the value of <paramref name="dueTime"/> or <paramref name="period"/> is negative and not equal to
            <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="callback"/> is <c>null</c>.
            </exception>
            <remarks>
            This is important for long-running timers (i.e. which repeat based on <paramref name="period"/>) to avoid the appearance of memory leaks.
            Much of the Couchbase SDK is lazy initialized, meaning it doesn't start up until the first time it is used in a request.
            This means that <see cref="T:System.Threading.AsyncLocal`1"/> values which are part of the ExecutionContext at bootstrap may continue
            to live indefinitely. This may include activity tracing, the first HttpContext, etc, and may cause memory leaks or other
            undesired behaviors.
            </remarks>
        </member>
        <member name="M:Couchbase.Utils.TimeSpanExtensions.ToMicroseconds(System.TimeSpan)">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> to an <see cref="T:System.UInt32"/> in Microseconds.
            </summary>
            <remarks>This will overflow at 1hour 11min 34s, which shouldn't be encountered
            in most cases, but could throw an exception in edge cases like wrapping a span
            around a background operation or leaving the code on a breakpoint and going to
            lunch.</remarks>
            <param name="duration">The <see cref="T:System.TimeSpan"/> duration to convert to microseconds.</param>
            <returns>The microsecond equivalent of the passed in duration.</returns>
        </member>
        <member name="M:Couchbase.Utils.TimeSpanExtensions.ToTtl(System.TimeSpan)">
            <summary>
            Converts a <see cref="T:System.TimeSpan" /> into an uint correctly representing a Time-To-Live,
            that is expressed in seconds.
            Durations strictly bigger than 30 days are converted to a unix-syle timestamp (seconds since the Epoch),
            as described in the couchbase TTL documentation.
            </summary>
            <returns>The TTL, expressed as a suitable uint.</returns>
        </member>
        <member name="M:Couchbase.Utils.TimeSpanExtensions.ToTtl(System.UInt32)">
            <summary>
            Converts a duration expressed as milliseconds to a unix-based TTL.
            </summary>
            <param name="duration">Milliseconds to use as TTL.</param>
            <returns>The TTL, expressed as a unix-based TTL in milliseconds.</returns>
        </member>
        <member name="M:Couchbase.Utils.TimeSpanExtensions.GetSeconds(System.TimeSpan)">
            <summary>
            Retrieves the number of seconds expressed in a <see cref="T:System.TimeSpan"/> as an <see cref="T:System.UInt32"/>.
            </summary>
            <param name="timeSpan">The timespan.</param>
            <returns>An <see cref="T:System.UInt32"/> that is the total number of seconds in the <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Couchbase.Utils.TimeSpanExtensions.TryConvertToMicros(System.Object,System.Int64@)">
            <summary>
            Attempts to convert the object into a <see cref="T:System.Int64"/> duration that may include a precision suffix.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to try and convert.</param>
            <param name="duration">The <see cref="T:System.Int64"/> duration of the object.</param>
            <returns>A <see cref="T:System.Boolean"/> to indicate if a conversion was possible.</returns>
        </member>
        <member name="M:Couchbase.Utils.TimeSpanExtensions.NanosecondsToTicks(System.Int64)">
            <summary>
            Convert nanoseconds to ticks
            </summary>
            <param name="nanoseconds">The nanoseconds value to convert.</param>
            <returns>The number of ticks represented, which is probably lower resolution.</returns>
        </member>
        <member name="M:Couchbase.Utils.TimeSpanExtensions.FromNanoseconds(System.Int64)">
            <summary>
            Convert nanoseconds to a TimeSpan
            </summary>
            <param name="nanoseconds">The nanosecond to convert</param>
            <returns>A TimeSpan</returns>
        </member>
        <member name="P:Couchbase.Utils.Utf8Helpers.Utf8Bom">
            <summary>
            UTF-8 Byte Order Mark as bytes.
            </summary>
        </member>
        <member name="M:Couchbase.Utils.Utf8Helpers.TrimBomIfPresent(System.ReadOnlySpan{System.Byte})">
            <summary>
            If the data begins with a UTF-8 Byte Order Mark it is trimmed.
            </summary>
            <param name="data">Data to test and trim.</param>
            <returns>The trimmed data, or the original data if the BOM was not present.</returns>
        </member>
        <member name="M:Couchbase.Utils.Utf8Helpers.TrimBomIfPresent(System.ReadOnlyMemory{System.Byte})">
            <summary>
            If the data begins with a UTF-8 Byte Order Mark it is trimmed.
            </summary>
            <param name="data">Data to test and trim.</param>
            <returns>The trimmed data, or the original data if the BOM was not present.</returns>
        </member>
        <member name="T:Couchbase.Views.BlockViewResult`2">
            <summary>
            The result of a view query, read without streaming results.
            </summary>
            <typeparam name="TKey">Type of the key for each result row.</typeparam>
            <typeparam name="TValue">Type of the value for each result row.</typeparam>
            <seealso cref="T:Couchbase.Views.IViewResult`2" />
        </member>
        <member name="M:Couchbase.Views.BlockViewResult`2.#ctor(System.Net.HttpStatusCode,System.String,Couchbase.Core.IO.Serializers.ITypeSerializer)">
            <summary>
            Creates a new BlockViewResult.
            </summary>
            <param name="statusCode">HTTP status code returned with result.</param>
            <param name="message">Message about result.</param>
            <param name="deserializer"><see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> used to deserialize objects.</param>
        </member>
        <member name="M:Couchbase.Views.BlockViewResult`2.#ctor(System.Net.HttpStatusCode,System.String,System.IO.Stream,Couchbase.Core.IO.Serializers.ITypeSerializer,System.IDisposable,System.IDisposable)">
            <summary>
            Creates a new BlockViewResult.
            </summary>
            <param name="statusCode">HTTP status code returned with result.</param>
            <param name="message">Message about result.</param>
            <param name="responseStream"><see cref="T:System.IO.Stream"/> to read.</param>
            <param name="deserializer"><see cref="T:Couchbase.Core.IO.Serializers.ITypeSerializer"/> used to deserialize objects.</param>
            <param name="decodeSpan">Span to complete once decoding is done.</param>
            <param name="ownedForCleanup">Additional object to dispose when complete.</param>
        </member>
        <member name="M:Couchbase.Views.BlockViewResult`2.InitializeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Views.BlockViewResult`2.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Views.IViewClient">
            <summary>
            An interface for client-side support for querying Couchbase views.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewClient.LastActivity">
            <summary>
            Gets the timestamp of the last activity.
            </summary>
        </member>
        <member name="M:Couchbase.Views.IViewClient.ExecuteAsync``2(Couchbase.Views.IViewQuery)">
            <summary>
            Executes a <see cref="T:Couchbase.Views.IViewQuery"/> asynchronously against a View.
            </summary>
            <typeparam name="TKey">Type of the key for each result row.</typeparam>
            <typeparam name="TValue">Type of the value for each result row.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="T:Couchbase.Views.IViewQuery">
            <summary>
            Implemented as an object that can query a Couchbase View.
            <remarks>This is a "Fluent" style interface and methods can be chained together.</remarks>
            </summary>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Asc">
            <summary>
            Return the documents in ascending by key order
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Desc">
            <summary>
            Return the documents in descending by key order
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.EndKey(System.Object)">
            <summary>
            Stop returning records when the specified key is reached. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to stop at</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.EndKey(System.Object,System.Boolean)">
            <summary>
            Stop returning records when the specified key is reached. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to stop at</param>
            <param name="encode">True to JSON encode the parameter.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.EndKeyDocId(System.Object)">
            <summary>
            Stop returning records when the specified document ID is reached
            </summary>
            <param name="docId">The document Id to stop at.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.FullSet">
            <summary>
            Use the full cluster data set (development views only).
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Group(System.Nullable{System.Boolean})">
            <summary>
            Group the results using the reduce function to a group or single row
            </summary>
            <param name="group">True to group using the reduce function into a single row</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.GroupLevel(System.Nullable{System.Int32})">
            <summary>
            Specify the group level to be used
            </summary>
            <param name="level">The level of grouping to use</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.InclusiveEnd(System.Nullable{System.Boolean})">
            <summary>
            Specifies whether the specified end key should be included in the result
            </summary>
            <param name="inclusiveEnd">True to include the last key in the result</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Key(System.Object)">
            <summary>
            Return only documents that match the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="key">The key to retrieve</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Key(System.Object,System.Boolean)">
            <summary>
            Return only documents that match the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="key">The key to retrieve</param>
            <param name="encode">True to JSON encode the parameter.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Keys(System.Collections.IEnumerable)">
            <summary>
            Return only documents that match one of keys specified within the given array. Key must be specified as a JSON value. Sorting is not applied when using this option.
            </summary>
            <param name="keys">The keys to retrieve</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Keys(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Return only documents that match one of keys specified within the given array. Key must be specified as a JSON value. Sorting is not applied when using this option.
            </summary>
            <param name="keys">The keys to retrieve</param>
            <param name="encode">True to JSON encode the parameter.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.OnError(System.Boolean)">
            <summary>
            Sets the response in the event of an error
            </summary>
            <param name="stop">True to stop in the event of an error; true to continue</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Reduce(System.Nullable{System.Boolean})">
            <summary>
            Use the reduction function
            </summary>
            <param name="reduce">True to use the reduduction property. Default is false;</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.StartKey(System.Object)">
            <summary>
            Return records with a value equal to or greater than the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to return records greater than or equal to.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.StartKey(System.Object,System.Boolean)">
            <summary>
            Return records with a value equal to or greater than the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to return records greater than or equal to.</param>
            <param name="encode">True to JSON encode the parameter.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.StartKeyDocId(System.Object)">
            <summary>
            Return records starting with the specified document ID.
            </summary>
            <param name="docId">The docId to return records greater than or equal to.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.From(System.String,System.String)">
            <summary>
            Specifies the bucket and design document to target for a query.
            </summary>
            <param name="designDoc">The bucket to target</param>
            <param name="view">The design document to use</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Bucket(System.String)">
            <summary>
            Sets the name of the Couchbase Bucket.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.DesignDoc(System.String)">
            <summary>
            Sets the name of the design document.
            </summary>
            <param name="name">The name of the design document to use.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.View(System.String)">
            <summary>
            Sets the name of the view to query.
            </summary>
            <param name="name">The name of the view to query.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Skip(System.Nullable{System.Int32})">
            <summary>
            Skip this number of records before starting to return the results
            </summary>
            <param name="count">The number of records to skip</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Stale(Couchbase.Views.StaleState)">
            <summary>
            Allow the results from a stale view to be used. The default is StaleState.Ok; for development work set to StaleState.False
            </summary>
            <param name="staleState">The staleState value to use.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Limit(System.Nullable{System.Int32})">
            <summary>
            Limit the number of the returned documents to the specified number
            </summary>
            <param name="limit">The numeric limit</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Development(System.Nullable{System.Boolean})">
            <summary>
            Toggles the query between development or production dataset and View.
            </summary>
            <param name="development">If true the development View will be used</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="T:Couchbase.Views.IViewQueryable">
            <summary>
            A base interface for View and Spatial query requests.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewQueryable.BucketName">
            <summary>
            Gets the name of the <see cref="T:Couchbase.IBucket"/> that the query is targeting.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewQueryable.UseSsl">
            <summary>
            When true, the generated url will contain 'https' and use port 18092
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewQueryable.DesignDocName">
            <summary>
            Gets the name of the design document.
            </summary>
            <value>
            The name of the design document.
            </value>
        </member>
        <member name="P:Couchbase.Views.IViewQueryable.ViewName">
            <summary>
            Gets the name of the view.
            </summary>
            <value>
            The name of the view.
            </value>
        </member>
        <member name="P:Couchbase.Views.IViewQueryable.Serializer">
            <summary>
            Serializer to use when reading the view result.
            </summary>
        </member>
        <member name="M:Couchbase.Views.IViewQueryable.RawUri">
            <summary>
            Returns the raw REST URI which can be executed in a browser or using curl.
            </summary>
            <returns>A <see cref="T:System.Uri"/> object that represents the query. This query can be run within a browser.</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQueryable.BaseUri(System.Uri)">
            <summary>
            Sets the base uri for the query if it's not set in the constructor.
            </summary>
            <param name="uri">The base uri to use - this is normally set internally and may be overridden by clusterOptions.</param>
            <returns>An <see cref="T:Couchbase.Views.IViewQueryable"/> object for chaining</returns>
            <remarks>Note that this will override the baseUri set in the ctor. Additionally, this method may be called internally by the <see cref="T:Couchbase.IBucket"/> and overridden.</remarks>
        </member>
        <member name="M:Couchbase.Views.IViewQueryable.CreateRequestBody">
            <summary>
            Builds a JSON string of the <see cref="T:Couchbase.Views.IViewQueryable"/> used for posting the query to a Couchbase Server.
            </summary>
        </member>
        <member name="T:Couchbase.Views.IViewResult`2">
            <summary>
            Represents the results of a View query.
            </summary>
            <typeparam name="TKey">Type of the key for each result row.</typeparam>
            <typeparam name="TValue">Type of the value for each result row.</typeparam>
        </member>
        <member name="P:Couchbase.Views.IViewResult`2.Rows">
            <summary>
            The results of the query as a <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <remarks>
            In most cases, the rows may be enumerated only once. If it's necessary to enumerate more than
            once, use <see cref="M:System.Linq.AsyncEnumerable.ToListAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)"/> to convert to a list.
            ToListAsync can also be used to enumerate with a synchronous foreach loop in C# 7.
            </remarks>
        </member>
        <member name="P:Couchbase.Views.IViewResult`2.MetaData">
            <summary>
            Gets the query meta data.
            </summary>
        </member>
        <member name="T:Couchbase.Views.ViewMetaData">
            <summary>
            Metadata regarding a <see cref="T:Couchbase.Views.IViewResult`2"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewMetaData.TotalRows">
            <summary>
            The total number of rows returned by the View request.
            </summary>
        </member>
        <member name="T:Couchbase.Views.StaleState">
            <summary>
            Allow the results from a stale view to be used
            </summary>
        </member>
        <member name="T:Couchbase.Views.StaleStateExtensions">
            <summary>
            Extension methods for working withe StaleState enumeration.
            </summary>
        </member>
        <member name="M:Couchbase.Views.StaleStateExtensions.ToLowerString(Couchbase.Views.StaleState)">
            <summary>
            Converts the StaleState value to a lowercase string.
            </summary>
            <param name="value">The <see cref="T:Couchbase.Views.StaleState"/> enumeration value to convert to a string.</param>
            <returns>The string value of a StaleState enumeration.</returns>
        </member>
        <member name="T:Couchbase.Views.StreamingViewResult`2">
            <summary>
            Represents a streaming View response for reading each row as it becomes available over the network.
            Note that unless there is no underlying collection representing the response, instead the rows are extracted
            from the stream one at a time. If the Enumeration is evaluated, eg calling ToListAsync(), then the entire response
            will be read. Once a row has been read from the stream, it is not available to be read again.
            A <see cref="T:Couchbase.Core.Exceptions.StreamAlreadyReadException"/> will be thrown if the result is enumerated after it has reached
            the end of the stream.
            </summary>
            <typeparam name="TKey">Type of the key for each result row.</typeparam>
            <typeparam name="TValue">Type of the value for each result row.</typeparam>
            <seealso cref="T:Couchbase.Views.IViewResult`2" />
        </member>
        <member name="M:Couchbase.Views.StreamingViewResult`2.InitializeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Views.StreamingViewResult`2.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Views.StreamingViewResult`2.ReadResponseAttributes(System.Threading.CancellationToken)">
            <summary>
            Reads and parses any response attributes, returning at the end of the response or
            once the "results" attribute is encountered.
            </summary>
        </member>
        <member name="M:Couchbase.Views.StreamingViewResult`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Views.ViewOptions.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            A parent or external span for tracing.
            </summary>
            <param name="span">An external <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/> implementation for tracing.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Views.ViewQuery">
            <summary>
            Implemented as an object that can query a Couchbase View.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewQuery.DesignDocName">
            <summary>
            Gets the name of the design document.
            </summary>
            <value>
            The name of the design document.
            </value>
        </member>
        <member name="P:Couchbase.Views.ViewQuery.ViewName">
            <summary>
            Gets the name of the view.
            </summary>
            <value>
            The name of the view.
            </value>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.RequestSpan(Couchbase.Core.Diagnostics.Tracing.IRequestSpan)">
            <summary>
            A parent or external span for tracing.
            </summary>
            <param name="span">An external <see cref="T:Couchbase.Core.Diagnostics.Tracing.IRequestSpan"/> implementation for tracing.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Views.ViewQuery.UseSsl">
            <summary>
            When true, the generated url will contain 'https' and use port 18092
            </summary>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.From(System.String,System.String)">
            <summary>
            Specifies the bucket and design document to target for a query.
            </summary>
            <param name="designDoc">The bucket to target</param>
            <param name="view">The design document to use</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Bucket(System.String)">
            <summary>
            Sets the name of the Couchbase Bucket.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.DesignDoc(System.String)">
            <summary>
            Sets the name of the design document.
            </summary>
            <param name="name">The name of the design document to use.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.View(System.String)">
            <summary>
            Sets the name of the view to query.
            </summary>
            <param name="name">The name of the view to query.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Skip(System.Nullable{System.Int32})">
            <summary>
            Skip this number of records before starting to return the results
            </summary>
            <param name="count">The number of records to skip</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Stale(Couchbase.Views.StaleState)">
            <summary>
            Allow the results from a stale view to be used. The default is StaleState.Ok; for development work set to StaleState.False
            </summary>
            <param name="staleState">The staleState value to use.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Asc">
            <summary>
            Return the documents in ascending by key order
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Desc">
            <summary>
            Return the documents in descending by key order
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.EndKey(System.Object)">
            <summary>
            Stop returning records when the specified key is reached. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to stop at</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.EndKey(System.Object,System.Boolean)">
            <summary>
            Stop returning records when the specified key is reached. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to stop at</param>
            <param name="encode">True to JSON encode and URI escape the value.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.EndKeyDocId(System.Object)">
            <summary>
            Stop returning records when the specified document ID is reached
            </summary>
            <param name="endDocId">The document Id to stop at.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.FullSet">
            <summary>
            Use the full cluster data set (development views only).
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Group(System.Nullable{System.Boolean})">
            <summary>
            Group the results using the reduce function to a group or single row
            </summary>
            <param name="group">True to group using the reduce function into a single row</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.GroupLevel(System.Nullable{System.Int32})">
            <summary>
            Specify the group level to be used
            </summary>
            <param name="level">The level of grouping to use</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.InclusiveEnd(System.Nullable{System.Boolean})">
            <summary>
            Specifies whether the specified end key should be included in the result
            </summary>
            <param name="inclusiveEnd">True to include the last key in the result</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Key(System.Object)">
            <summary>
            Return only documents that match the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="key">The key to retrieve</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Key(System.Object,System.Boolean)">
            <summary>
            Return only documents that match the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="key">The key to retrieve</param>
            <param name="encode">True to JSON encode and URI escape the value.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Keys(System.Collections.IEnumerable)">
            <summary>
            Return only documents that match one of keys specified within the given array. Key must be specified as a JSON value. Sorting is not applied when using this option.
            </summary>
            <param name="keys">The keys to retrieve</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Keys(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Return only documents that match one of keys specified within the given array. Key must be specified as a JSON value. Sorting is not applied when using this option.
            </summary>
            <param name="keys">The keys to retrieve</param>
            <param name="encode">True to JSON encode and URI escape the value.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Limit(System.Nullable{System.Int32})">
            <summary>
            Limit the number of the returned documents to the specified number
            </summary>
            <param name="limit">The numeric limit</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.OnError(System.Boolean)">
            <summary>
            Sets the response in the event of an error
            </summary>
            <param name="stop">True to stop in the event of an error; true to continue</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Reduce(System.Nullable{System.Boolean})">
            <summary>
            Use the reduction function
            </summary>
            <param name="reduce">True to use the reduction property. Default is false;</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.StartKey(System.Object)">
            <summary>
            Return records with a value equal to or greater than the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="startKey">The key to return records greater than or equal to.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.StartKey(System.Object,System.Boolean)">
            <summary>
            Return records with a value equal to or greater than the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="startKey">The key to return records greater than or equal to.</param>
            <param name="encode">True to JSON encode and URI escape the value.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.StartKeyDocId(System.Object)">
            <summary>
            Return records starting with the specified document ID.
            </summary>
            <param name="startKeyDocId">The docId to return records greater than or equal to.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Couchbase#Views#IViewQueryable#BaseUri(System.Uri)">
            <summary>
            Sets the base uri for the query if it's not set in the constructor.
            </summary>
            <param name="uri">The base uri to use - this is normally set internally and may be overridden by clusterOptions.</param>
            <returns>An IViewQuery object for chaining</returns>
            <remarks>Note that this will override the baseUri set in the ctor. Additionally, this method may be called internally by the <see cref="T:Couchbase.IBucket"/> and overridden.</remarks>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Development(System.Nullable{System.Boolean})">
            <summary>
            Toggles the query between development or production dataset and View.
            </summary>
            <param name="development">If true the development View will be used</param>
            <returns>An IViewQuery object for chaining</returns>
            <remarks>The default is false; use the published, production view.</remarks>
        </member>
        <member name="P:Couchbase.Views.ViewQuery.BucketName">
            <summary>
            Gets the name of the <see cref="T:Couchbase.IBucket"/> that the query is targeting.
            </summary>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.EncodeParameter(System.Object)">
            <summary>
            JSON encodes the parameter and URI escapes the input parameter.
            </summary>
            <param name="parameter">The parameter to encode.</param>
            <returns>A JSON and URI escaped copy of the parameter.</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.RawUri">
            <summary>
            Returns the raw REST URI which can be executed in a browser or using curl.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.CreateRequestBody">
            <summary>
            Builds a JSON string of the <see cref="T:Couchbase.Views.IViewQueryable"/> used for posting the query to a Couchbase Server.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewQuery.Serializer">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Views.ViewResultBase`2">
            <summary>
            Abstract base implementation of <seealso cref="T:Couchbase.Views.IViewResult`2"/>.
            </summary>
            <typeparam name="TKey">Type of the key for each result row.</typeparam>
            <typeparam name="TValue">Type of the value for each result row.</typeparam>
        </member>
        <member name="M:Couchbase.Views.ViewResultBase`2.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
            Creates a new ViewResultBase.
            </summary>
            <param name="statusCode">HTTP status code returned with result.</param>
            <param name="message">Message about result.</param>
        </member>
        <member name="M:Couchbase.Views.ViewResultBase`2.#ctor(System.Net.HttpStatusCode,System.String,System.IO.Stream,System.IDisposable,System.IDisposable)">
            <summary>
            Creates a new ViewResultBase.
            </summary>
            <param name="statusCode">HTTP status code returned with result.</param>
            <param name="message">Message about result.</param>
            <param name="responseStream"><see cref="T:System.IO.Stream"/> to read.</param>
            <param name="decodeSpan">Span to complete once decoding is done.</param>
            <param name="ownedForCleanup">Additional object to dispose when complete.</param>
        </member>
        <member name="P:Couchbase.Views.ViewResultBase`2.Rows">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Views.ViewResultBase`2.ResponseStream">
            <summary>
            Response stream being deserialized.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResultBase`2.MetaData">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Views.ViewResultBase`2.ShouldRetry">
            <summary>
            If the response indicates the request is retryable, returns true.
            </summary>
            <returns></returns>
            <remarks>
            Intended for internal use only.
            </remarks>
        </member>
        <member name="M:Couchbase.Views.ViewResultBase`2.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the reader, and reads all attributes until result rows are encountered.
            This must be called before properties are valid.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Couchbase.Views.ViewResultBase`2.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Views.ViewResultBase`2.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Views.IViewRow`2">
            <summary>
            A row returned by a view query.
            </summary>
            <typeparam name="TKey">Type of the key for each result row.</typeparam>
            <typeparam name="TValue">Type of the value for each result row.</typeparam>
        </member>
        <member name="P:Couchbase.Views.IViewRow`2.Id">
            <summary>
            The identifier for the row.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewRow`2.Key">
            <summary>
            The key emitted by the View Map function.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewRow`2.Value">
            <summary>
            The value emitted by the View Map function or if a Reduce view, the value of the Reduce.
            </summary>
        </member>
        <member name="T:Couchbase.Views.ViewRow`2">
            <summary>
            A row returned by a view query.
            </summary>
            <typeparam name="TKey">Type of the key for each result row.</typeparam>
            <typeparam name="TValue">Type of the value for each result row.</typeparam>
        </member>
        <member name="P:Couchbase.Views.ViewRow`2.Id">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Views.ViewRow`2.Key">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Views.ViewRow`2.Value">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Views.ViewScanConsistency">
            <summary>
            Sets the desired index scan consistency for current N1QL query.
            </summary>
        </member>
        <member name="F:Couchbase.Views.ViewScanConsistency.RequestPlus">
            <summary>
            This value specifies that the view engine must update the index before executing the view query.
            </summary>
        </member>
        <member name="F:Couchbase.Views.ViewScanConsistency.UpdateAfter">
            <summary>
            The views engine uses the existing index as the basis of the query and marks the index to
            be updated after the results are returned to the client.
            </summary>
        </member>
        <member name="F:Couchbase.Views.ViewScanConsistency.NotBounded">
             <summary>
            This value specifies that the view engine can use the existing index "as is" and does not
            need to update the index
             </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
    </members>
</doc>
